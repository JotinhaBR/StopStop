# compiler: R8
# compiler_version: 1.5.69
# min_api: 19
# pg_map_id: d366f76
android.support.customtabs.ICustomTabsCallback -> a.a.a.b:
    void onMessageChannelReady(android.os.Bundle) -> a
    void onNavigationEvent(int,android.os.Bundle) -> a
    void onPostMessage(java.lang.String,android.os.Bundle) -> a
    void onRelationshipValidationResult(int,android.net.Uri,boolean,android.os.Bundle) -> a
    void extraCallback(java.lang.String,android.os.Bundle) -> b
    android.os.Bundle extraCallbackWithResult(java.lang.String,android.os.Bundle) -> c
android.support.customtabs.ICustomTabsCallback$Stub -> a.a.a.a:
android.support.customtabs.ICustomTabsService -> a.a.a.e:
    boolean newSession(android.support.customtabs.ICustomTabsCallback) -> a
    boolean newSessionWithExtras(android.support.customtabs.ICustomTabsCallback,android.os.Bundle) -> a
    boolean receiveFile(android.support.customtabs.ICustomTabsCallback,android.net.Uri,int,android.os.Bundle) -> a
    boolean warmup(long) -> a
android.support.customtabs.ICustomTabsService$Stub -> a.a.a.d:
    android.support.customtabs.ICustomTabsService asInterface(android.os.IBinder) -> a
android.support.customtabs.ICustomTabsService$Stub$Proxy -> a.a.a.c:
    android.os.IBinder mRemote -> a
    boolean newSession(android.support.customtabs.ICustomTabsCallback) -> a
    boolean newSessionWithExtras(android.support.customtabs.ICustomTabsCallback,android.os.Bundle) -> a
    boolean receiveFile(android.support.customtabs.ICustomTabsCallback,android.net.Uri,int,android.os.Bundle) -> a
    boolean warmup(long) -> a
android.support.customtabs.trusted.ITrustedWebActivityService -> a.a.a.f.b:
    android.os.Bundle getActiveNotifications() -> a
    void cancelNotification(android.os.Bundle) -> b
    int getSmallIconId() -> b
    android.os.Bundle getSmallIconBitmap() -> c
    android.os.Bundle notifyNotificationWithChannel(android.os.Bundle) -> c
    android.os.Bundle areNotificationsEnabled(android.os.Bundle) -> d
android.support.customtabs.trusted.ITrustedWebActivityService$Stub -> a.a.a.f.a:
androidx.annotation.Keep -> b.a.a:
androidx.appcompat.R$styleable -> b.b.a:
    int[] TextAppearance -> V
    int[] AppCompatTheme -> w
    int PopupWindow_android_popupBackground -> O
    int AnimatedStateListDrawableCompat_android_dither -> l
    int[] SearchView -> R
    int ActionMode_background -> h
    int ActionBarLayout_android_layout_gravity -> d
    int[] CompoundButton -> A
    int[] View -> Z
    int[] MenuGroup -> I
    int[] LinearLayoutCompat_Layout -> E
    int AppCompatTextHelper_android_textAppearance -> u
    int[] MenuView -> M
    int[] AppCompatTextView -> v
    int MenuItem_android_icon -> L
    int[] AppCompatSeekBar -> r
    int ListPopupWindow_android_dropDownHorizontalOffset -> H
    int LinearLayoutCompat_android_gravity -> D
    int[] ActionBar -> a
    int[] AlertDialog -> i
    int ButtonBarLayout_allowStacking -> z
    int[] ActionMenuItemView -> e
    int Toolbar_android_gravity -> Y
    int[] ViewStubCompat -> d0
    int[] RecycleListView -> P
    int[] AppCompatImageView -> q
    int Spinner_android_entries -> U
    int[] AnimatedStateListDrawableItem -> m
    int RecycleListView_paddingBottomNoButtons -> Q
    int[] ViewBackgroundHelper -> b0
    int AnimatedStateListDrawableItem_android_id -> n
    int[] Toolbar -> X
    int[] ButtonBarLayout -> y
    int AlertDialog_android_layout -> j
    int[] Spinner -> T
    int ActionMenuItemView_android_minWidth -> f
    int ActionBar_background -> b
    int[] ListPopupWindow -> G
    int[] LinearLayoutCompat -> C
    int AppCompatSeekBar_android_thumb -> s
    int[] MenuItem -> K
    int ViewBackgroundHelper_android_background -> c0
    int View_android_theme -> a0
    int MenuGroup_android_enabled -> J
    int[] AppCompatTextHelper -> t
    int ViewStubCompat_android_id -> e0
    int LinearLayoutCompat_Layout_android_layout_gravity -> F
    int CompoundButton_android_button -> B
    int[] ActionMode -> g
    int[] ActionBarLayout -> c
    int AppCompatTheme_android_windowIsFloating -> x
    int[] PopupWindow -> N
    int[] AnimatedStateListDrawableTransition -> o
    int TextAppearance_android_textSize -> W
    int[] AnimatedStateListDrawableCompat -> k
    int SearchView_android_focusable -> S
    int AnimatedStateListDrawableTransition_android_drawable -> p
androidx.appcompat.app.ActionBar -> androidx.appcompat.app.c:
    boolean collapseActionView() -> a
    void dispatchMenuVisibilityChanged(boolean) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    boolean onKeyShortcut(int,android.view.KeyEvent) -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback) -> a
    int getDisplayOptions() -> b
    void setDefaultDisplayHomeAsUpEnabled(boolean) -> b
    android.content.Context getThemedContext() -> c
    void setShowHideAnimationEnabled(boolean) -> c
    void onDestroy() -> d
androidx.appcompat.app.ActionBar$LayoutParams -> androidx.appcompat.app.a:
    int gravity -> a
androidx.appcompat.app.ActionBar$OnMenuVisibilityListener -> androidx.appcompat.app.b:
    void onMenuVisibilityChanged(boolean) -> a
androidx.appcompat.app.ActionBarDrawerToggle$DelegateProvider -> androidx.appcompat.app.d:
androidx.appcompat.app.AlertController -> androidx.appcompat.app.q:
    android.content.Context mContext -> a
    int mListItemLayout -> O
    int mViewSpacingRight -> l
    android.widget.Button mButtonNeutral -> w
    int mMultiChoiceItemLayout -> M
    boolean mShowTitle -> P
    int mViewSpacingLeft -> j
    int mButtonPanelSideLayout -> K
    android.os.Handler mHandler -> R
    int mCheckedItem -> I
    int mButtonIconDimen -> d
    java.lang.CharSequence mMessage -> f
    android.widget.Button mButtonPositive -> o
    android.widget.ImageView mIconView -> D
    android.widget.ListAdapter mAdapter -> H
    android.widget.Button mButtonNegative -> s
    android.graphics.drawable.Drawable mButtonNegativeIcon -> v
    android.widget.TextView mTitleView -> E
    android.graphics.drawable.Drawable mButtonNeutralIcon -> z
    android.view.View$OnClickListener mButtonHandler -> S
    android.graphics.drawable.Drawable mButtonPositiveIcon -> r
    android.graphics.drawable.Drawable mIcon -> C
    int mSingleChoiceItemLayout -> N
    boolean mViewSpacingSpecified -> n
    int mListLayout -> L
    int mViewSpacingBottom -> m
    android.os.Message mButtonPositiveMessage -> q
    androidx.core.widget.NestedScrollView mScrollView -> A
    int mAlertDialogLayout -> J
    int mViewSpacingTop -> k
    int mViewLayoutResId -> i
    java.lang.CharSequence mTitle -> e
    android.os.Message mButtonNeutralMessage -> y
    int mIconId -> B
    android.os.Message mButtonNegativeMessage -> u
    android.view.Window mWindow -> c
    android.view.View mView -> h
    android.widget.ListView mListView -> g
    java.lang.CharSequence mButtonPositiveText -> p
    java.lang.CharSequence mButtonNegativeText -> t
    androidx.appcompat.app.AppCompatDialog mDialog -> b
    android.widget.TextView mMessageView -> F
    java.lang.CharSequence mButtonNeutralText -> x
    android.view.View mCustomTitleView -> G
    int mButtonPanelLayoutHint -> Q
    1:1:boolean androidx.appcompat.app.AppCompatDialog.supportRequestWindowFeature(int):0:0 -> <init>
    1:1:void <init>(android.content.Context,androidx.appcompat.app.AppCompatDialog,android.view.Window):0 -> <init>
    void centerButton(android.widget.Button) -> a
    int getIconAttributeResId(int) -> a
    1:1:int selectContentView():0:0 -> a
    1:1:void installContent():0 -> a
    2:2:void installContent():0:0 -> a
    3:3:void setupView():0:0 -> a
    3:3:void installContent():0 -> a
    4:4:void setupCustomContent(android.view.ViewGroup):0:0 -> a
    4:4:void setupView():0 -> a
    4:4:void installContent():0 -> a
    5:5:void setupView():0:0 -> a
    5:5:void installContent():0 -> a
    6:6:void setupContent(android.view.ViewGroup):0:0 -> a
    6:6:void setupView():0 -> a
    6:6:void installContent():0 -> a
    7:7:void setupButtons(android.view.ViewGroup):0:0 -> a
    7:7:void setupView():0 -> a
    7:7:void installContent():0 -> a
    8:8:boolean shouldCenterSingleButton(android.content.Context):0:0 -> a
    8:8:void setupButtons(android.view.ViewGroup):0 -> a
    8:8:void setupView():0 -> a
    8:8:void installContent():0 -> a
    9:9:void setupButtons(android.view.ViewGroup):0:0 -> a
    9:9:void setupView():0 -> a
    9:9:void installContent():0 -> a
    10:10:void setupTitle(android.view.ViewGroup):0:0 -> a
    10:10:void setupView():0 -> a
    10:10:void installContent():0 -> a
    11:11:void setupView():0:0 -> a
    11:11:void installContent():0 -> a
    12:12:void setScrollIndicators(android.view.ViewGroup,android.view.View,int,int):0:0 -> a
    12:12:void setupView():0 -> a
    12:12:void installContent():0 -> a
    13:13:void setupView():0:0 -> a
    13:13:void installContent():0 -> a
    void manageScrollIndicators(android.view.View,android.view.View,android.view.View) -> a
    android.view.ViewGroup resolvePanel(android.view.View,android.view.View) -> a
    void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener,android.os.Message,android.graphics.drawable.Drawable) -> a
    void setCustomTitle(android.view.View) -> a
    void setIcon(android.graphics.drawable.Drawable) -> a
    void setMessage(java.lang.CharSequence) -> a
    void setView(android.view.View,int,int,int,int) -> a
    void setIcon(int) -> b
    void setTitle(java.lang.CharSequence) -> b
    void setView(android.view.View) -> b
    boolean canTextInput(android.view.View) -> c
    void setView(int) -> c
androidx.appcompat.app.AlertController$1 -> androidx.appcompat.app.e:
    androidx.appcompat.app.AlertController this$0 -> b
androidx.appcompat.app.AlertController$2 -> androidx.appcompat.app.f:
    android.view.View val$top -> a
    android.view.View val$bottom -> b
    void onScrollChange(androidx.core.widget.NestedScrollView,int,int,int,int) -> a
androidx.appcompat.app.AlertController$3 -> androidx.appcompat.app.g:
    android.view.View val$bottom -> c
    android.view.View val$top -> b
    androidx.appcompat.app.AlertController this$0 -> d
androidx.appcompat.app.AlertController$4 -> androidx.appcompat.app.h:
    android.view.View val$top -> a
    android.view.View val$bottom -> b
androidx.appcompat.app.AlertController$5 -> androidx.appcompat.app.i:
    android.view.View val$bottom -> c
    android.view.View val$top -> b
    androidx.appcompat.app.AlertController this$0 -> d
androidx.appcompat.app.AlertController$AlertParams -> androidx.appcompat.app.n:
    android.content.Context mContext -> a
    android.view.View mView -> z
    android.view.LayoutInflater mInflater -> b
    java.lang.String mIsCheckedColumn -> M
    int mCheckedItem -> I
    android.content.DialogInterface$OnClickListener mOnClickListener -> x
    java.lang.CharSequence mTitle -> f
    android.database.Cursor mCursor -> K
    java.lang.CharSequence mMessage -> h
    int mViewSpacingRight -> C
    int mViewSpacingLeft -> A
    android.content.DialogInterface$OnClickListener mNeutralButtonListener -> q
    android.content.DialogInterface$OnKeyListener mOnKeyListener -> u
    java.lang.CharSequence mNeutralButtonText -> o
    android.content.DialogInterface$OnMultiChoiceClickListener mOnCheckboxClickListener -> J
    int mViewLayoutResId -> y
    boolean mViewSpacingSpecified -> E
    boolean mIsMultiChoice -> G
    android.content.DialogInterface$OnClickListener mPositiveButtonListener -> k
    android.widget.ListAdapter mAdapter -> w
    android.graphics.drawable.Drawable mNeutralButtonIcon -> p
    android.view.View mCustomTitleView -> g
    android.graphics.drawable.Drawable mIcon -> d
    android.content.DialogInterface$OnDismissListener mOnDismissListener -> t
    android.content.DialogInterface$OnCancelListener mOnCancelListener -> s
    java.lang.CharSequence[] mItems -> v
    android.graphics.drawable.Drawable mPositiveButtonIcon -> j
    java.lang.String mLabelColumn -> L
    int mViewSpacingBottom -> D
    int mIconAttrId -> e
    int mViewSpacingTop -> B
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener -> N
    int mIconId -> c
    java.lang.CharSequence mPositiveButtonText -> i
    boolean mCancelable -> r
    java.lang.CharSequence mNegativeButtonText -> l
    boolean[] mCheckedItems -> F
    android.graphics.drawable.Drawable mNegativeButtonIcon -> m
    boolean mIsSingleChoice -> H
    android.content.DialogInterface$OnClickListener mNegativeButtonListener -> n
androidx.appcompat.app.AlertController$AlertParams$1 -> androidx.appcompat.app.j:
    androidx.appcompat.app.AlertController$AlertParams this$0 -> b
    androidx.appcompat.app.AlertController$RecycleListView val$listView -> a
androidx.appcompat.app.AlertController$AlertParams$2 -> androidx.appcompat.app.k:
    androidx.appcompat.app.AlertController$AlertParams this$0 -> e
    androidx.appcompat.app.AlertController$RecycleListView val$listView -> c
    int mIsCheckedIndex -> b
    int mLabelIndex -> a
    androidx.appcompat.app.AlertController val$dialog -> d
androidx.appcompat.app.AlertController$AlertParams$3 -> androidx.appcompat.app.l:
    androidx.appcompat.app.AlertController val$dialog -> b
    androidx.appcompat.app.AlertController$AlertParams this$0 -> c
androidx.appcompat.app.AlertController$AlertParams$4 -> androidx.appcompat.app.m:
    androidx.appcompat.app.AlertController val$dialog -> c
    androidx.appcompat.app.AlertController$AlertParams this$0 -> d
    androidx.appcompat.app.AlertController$RecycleListView val$listView -> b
androidx.appcompat.app.AlertController$ButtonHandler -> androidx.appcompat.app.o:
    java.lang.ref.WeakReference mDialog -> a
androidx.appcompat.app.AlertController$CheckedItemAdapter -> androidx.appcompat.app.p:
androidx.appcompat.app.AlertController$RecycleListView -> androidx.appcompat.app.AlertController$RecycleListView:
    int mPaddingTopNoTitle -> b
    int mPaddingBottomNoButtons -> c
    void setHasDecor(boolean,boolean) -> a
androidx.appcompat.app.AlertDialog -> androidx.appcompat.app.s:
    androidx.appcompat.app.AlertController mAlert -> d
    int resolveDialogTheme(android.content.Context,int) -> a
    1:1:boolean androidx.appcompat.app.AlertController.onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
    1:1:boolean onKeyDown(int,android.view.KeyEvent):0 -> onKeyDown
    2:2:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
    1:1:boolean androidx.appcompat.app.AlertController.onKeyUp(int,android.view.KeyEvent):0:0 -> onKeyUp
    1:1:boolean onKeyUp(int,android.view.KeyEvent):0 -> onKeyUp
    2:2:boolean onKeyUp(int,android.view.KeyEvent):0:0 -> onKeyUp
androidx.appcompat.app.AlertDialog$Builder -> androidx.appcompat.app.r:
    androidx.appcompat.app.AlertController$AlertParams P -> a
    int mTheme -> b
    1:1:void <init>(android.content.Context,int):0:0 -> <init>
    1:1:void <init>(android.content.Context):0 -> <init>
    1:1:void androidx.appcompat.app.AlertController$AlertParams.apply(androidx.appcompat.app.AlertController):0:0 -> a
    1:1:androidx.appcompat.app.AlertDialog create():0 -> a
    2:2:void androidx.appcompat.app.AlertController$AlertParams.createListView(androidx.appcompat.app.AlertController):0:0 -> a
    2:2:void androidx.appcompat.app.AlertController$AlertParams.apply(androidx.appcompat.app.AlertController):0 -> a
    2:2:androidx.appcompat.app.AlertDialog create():0 -> a
    3:3:void androidx.appcompat.app.AlertController$AlertParams.apply(androidx.appcompat.app.AlertController):0:0 -> a
    3:3:androidx.appcompat.app.AlertDialog create():0 -> a
    4:4:androidx.appcompat.app.AlertDialog create():0:0 -> a
    androidx.appcompat.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener) -> a
    androidx.appcompat.app.AlertDialog$Builder setCustomTitle(android.view.View) -> a
    androidx.appcompat.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable) -> a
    androidx.appcompat.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener) -> a
    androidx.appcompat.app.AlertDialog$Builder setTitle(java.lang.CharSequence) -> a
    android.content.Context getContext() -> b
androidx.appcompat.app.AppCompatActivity -> androidx.appcompat.app.t:
    int mThemeId -> n
    android.content.res.Resources mResources -> o
    androidx.appcompat.app.AppCompatDelegate mDelegate -> m
    void onCreateSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder) -> a
    void onSupportActionModeStarted(androidx.appcompat.view.ActionMode) -> a
    androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback) -> a
    1:1:void androidx.core.app.NavUtils.navigateUpTo(android.app.Activity,android.content.Intent):0:0 -> a
    1:1:void supportNavigateUpTo(android.content.Intent):0 -> a
    void onSupportActionModeFinished(androidx.appcompat.view.ActionMode) -> b
    1:1:boolean androidx.core.app.NavUtils.shouldUpRecreateTask(android.app.Activity,android.content.Intent):0:0 -> b
    1:1:boolean supportShouldUpRecreateTask(android.content.Intent):0 -> b
    android.content.Intent getSupportParentActivityIntent() -> c
    void supportInvalidateOptionsMenu() -> h
    1:1:androidx.appcompat.app.AppCompatDelegate androidx.appcompat.app.AppCompatDelegate.create(android.app.Activity,androidx.appcompat.app.AppCompatCallback):0:0 -> i
    1:1:androidx.appcompat.app.AppCompatDelegate getDelegate():0 -> i
    2:2:androidx.appcompat.app.AppCompatDelegate getDelegate():0:0 -> i
    androidx.appcompat.app.ActionBar getSupportActionBar() -> j
    void onPrepareSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder) -> k
    void onSupportContentChanged() -> l
    boolean onSupportNavigateUp() -> m
    1:1:boolean performMenuItemShortcut(int,android.view.KeyEvent):0:0 -> onKeyDown
    1:1:boolean onKeyDown(int,android.view.KeyEvent):0 -> onKeyDown
    2:2:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> onKeyDown
    1:1:void androidx.appcompat.app.AppCompatDelegateImpl.onStart():0:0 -> onStart
    1:1:void onStart():0 -> onStart
androidx.appcompat.app.AppCompatCallback -> androidx.appcompat.app.u:
    void onSupportActionModeStarted(androidx.appcompat.view.ActionMode) -> a
    androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback) -> a
    void onSupportActionModeFinished(androidx.appcompat.view.ActionMode) -> b
androidx.appcompat.app.AppCompatDelegate -> androidx.appcompat.app.v:
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    boolean applyDayNight() -> a
    android.view.View findViewById(int) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onCreate(android.os.Bundle) -> a
    void setContentView(android.view.View) -> a
    void setTitle(java.lang.CharSequence) -> a
    android.view.MenuInflater getMenuInflater() -> b
    void onPostCreate(android.os.Bundle) -> b
    boolean requestWindowFeature(int) -> b
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    androidx.appcompat.app.ActionBar getSupportActionBar() -> c
    void onSaveInstanceState(android.os.Bundle) -> c
    void setContentView(int) -> c
    void installViewFactory() -> d
    void invalidateOptionsMenu() -> e
    void onDestroy() -> f
    void onPostResume() -> g
    void onStop() -> h
androidx.appcompat.app.AppCompatDelegateImpl -> androidx.appcompat.app.N:
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState mPreparedPanel -> F
    int mInvalidatePanelMenuFeatures -> M
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager mAutoNightModeManager -> K
    boolean mApplyDayNightCalled -> J
    int[] sWindowBackgroundStyleable -> T
    int mLocalNightMode -> I
    boolean mInvalidatePanelMenuPosted -> L
    boolean mFeatureProgress -> w
    android.view.Window$Callback mOriginalWindowCallback -> d
    boolean mSubDecorInstalled -> s
    android.view.View mStatusGuard -> v
    boolean mHasActionBar -> y
    androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback mPanelMenuPresenterCallback -> l
    boolean mLongPressBackDown -> G
    androidx.appcompat.widget.ActionBarContextView mActionModeView -> n
    boolean mOverlayActionMode -> A
    boolean mWindowNoTitle -> C
    android.graphics.Rect mTempRect2 -> Q
    java.lang.Runnable mInvalidatePanelMenuRunnable -> N
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState[] mPanels -> E
    androidx.core.view.ViewPropertyAnimatorCompat mFadeAnim -> q
    android.view.ViewGroup mSubDecor -> t
    boolean mEnableDefaultActionBarUp -> O
    android.content.Context mContext -> b
    android.widget.TextView mTitleView -> u
    androidx.appcompat.app.AppCompatViewInflater mAppCompatViewInflater -> R
    boolean sInstalledExceptionHandler -> U
    androidx.appcompat.app.ActionBar mActionBar -> g
    androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback mActionMenuPresenterCallback -> k
    android.view.Window$Callback mAppCompatWindowCallback -> e
    boolean mFeatureIndeterminateProgress -> x
    androidx.appcompat.app.AppCompatCallback mAppCompatCallback -> f
    java.lang.CharSequence mTitle -> i
    boolean mHandleNativeActionModes -> r
    boolean IS_PRE_LOLLIPOP -> S
    android.view.MenuInflater mMenuInflater -> h
    android.view.Window mWindow -> c
    android.graphics.Rect mTempRect1 -> P
    boolean mOverlayActionBar -> z
    androidx.appcompat.widget.DecorContentParent mDecorContentParent -> j
    androidx.appcompat.view.ActionMode mActionMode -> m
    android.widget.PopupWindow mActionModePopup -> o
    boolean mIsDestroyed -> H
    java.lang.Runnable mShowActionModePopup -> p
    boolean mIsFloating -> B
    boolean mClosingActionMenu -> D
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    1:1:int getNightMode():0:0 -> a
    1:1:boolean applyDayNight():0 -> a
    2:2:int mapNightMode(int):0:0 -> a
    2:2:boolean applyDayNight():0 -> a
    3:3:void ensureAutoNightModeManager():0:0 -> a
    3:3:int mapNightMode(int):0 -> a
    3:3:boolean applyDayNight():0 -> a
    4:4:int mapNightMode(int):0:0 -> a
    4:4:boolean applyDayNight():0 -> a
    5:5:boolean updateForNightMode(int):0:0 -> a
    5:5:boolean applyDayNight():0 -> a
    6:6:boolean shouldRecreateOnNightModeChange():0:0 -> a
    6:6:boolean updateForNightMode(int):0 -> a
    6:6:boolean applyDayNight():0 -> a
    7:7:boolean updateForNightMode(int):0:0 -> a
    7:7:boolean applyDayNight():0 -> a
    8:8:void ensureAutoNightModeManager():0:0 -> a
    8:8:boolean applyDayNight():0 -> a
    9:9:boolean applyDayNight():0:0 -> a
    void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu) -> a
    void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean) -> a
    10:10:boolean onKeyDownPanel(int,android.view.KeyEvent):0:0 -> a
    10:10:boolean onKeyDown(int,android.view.KeyEvent):0 -> a
    10:10:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> a
    11:11:boolean onKeyDown(int,android.view.KeyEvent):0:0 -> a
    11:11:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> a
    12:12:boolean onKeyUpPanel(int,android.view.KeyEvent):0:0 -> a
    12:12:boolean onKeyUp(int,android.view.KeyEvent):0 -> a
    12:12:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> a
    13:13:boolean onKeyUp(int,android.view.KeyEvent):0:0 -> a
    13:13:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> a
    14:14:boolean onBackPressed():0:0 -> a
    14:14:boolean onKeyUp(int,android.view.KeyEvent):0 -> a
    14:14:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> a
    15:15:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> a
    15:15:boolean onBackPressed():0 -> a
    15:15:boolean onKeyUp(int,android.view.KeyEvent):0 -> a
    15:15:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> a
    16:16:boolean onBackPressed():0:0 -> a
    16:16:boolean onKeyUp(int,android.view.KeyEvent):0 -> a
    16:16:boolean dispatchKeyEvent(android.view.KeyEvent):0 -> a
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState findMenuPanel(android.view.Menu) -> a
    android.view.View findViewById(int) -> a
    17:17:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> a
    17:17:void onConfigurationChanged(android.content.res.Configuration):0 -> a
    18:18:void onConfigurationChanged(android.content.res.Configuration):0:0 -> a
    19:19:java.lang.String androidx.core.app.NavUtils.getParentActivityName(android.app.Activity):0:0 -> a
    19:19:void onCreate(android.os.Bundle):0 -> a
    20:20:androidx.appcompat.app.ActionBar peekSupportActionBar():0:0 -> a
    20:20:void onCreate(android.os.Bundle):0 -> a
    21:21:void onCreate(android.os.Bundle):0:0 -> a
    22:22:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> a
    22:22:boolean onKeyShortcut(int,android.view.KeyEvent):0 -> a
    23:23:boolean onKeyShortcut(int,android.view.KeyEvent):0:0 -> a
    boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    24:24:void reopenMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0:0 -> a
    24:24:void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder):0 -> a
    25:25:boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> a
    25:25:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> a
    26:26:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0:0 -> a
    27:27:boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> a
    27:27:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> a
    28:28:androidx.appcompat.view.menu.MenuView androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState.getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback):0:0 -> a
    28:28:boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0 -> a
    28:28:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> a
    29:29:boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> a
    29:29:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> a
    30:30:boolean androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState.hasPanelItems():0:0 -> a
    30:30:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> a
    31:31:void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0:0 -> a
    boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int) -> a
    void setContentView(android.view.View) -> a
    32:32:androidx.appcompat.app.ActionBar peekSupportActionBar():0:0 -> a
    32:32:void setTitle(java.lang.CharSequence):0 -> a
    33:33:void setTitle(java.lang.CharSequence):0:0 -> a
    34:34:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> a
    34:34:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0 -> a
    35:35:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0:0 -> a
    36:36:androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback):0:0 -> a
    36:36:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0 -> a
    37:37:androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback):0:0 -> a
    void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder) -> b
    android.view.MenuInflater getMenuInflater() -> b
    void onPostCreate(android.os.Bundle) -> b
    1:1:boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState):0:0 -> b
    1:1:boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0 -> b
    2:2:boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent):0:0 -> b
    3:3:int sanitizeWindowFeatureId(int):0:0 -> b
    3:3:boolean requestWindowFeature(int):0 -> b
    4:4:boolean requestWindowFeature(int):0:0 -> b
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    androidx.appcompat.app.ActionBar getSupportActionBar() -> c
    void onSaveInstanceState(android.os.Bundle) -> c
    void setContentView(int) -> c
    void doInvalidatePanelMenu(int) -> d
    void installViewFactory() -> d
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean) -> e
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> e
    1:1:void invalidateOptionsMenu():0 -> e
    2:2:void invalidateOptionsMenu():0:0 -> e
    void onDestroy() -> f
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> f
    1:1:void onMenuOpened(int):0 -> f
    2:2:void onMenuOpened(int):0:0 -> f
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> g
    1:1:void onPanelClosed(int):0 -> g
    2:2:void onPanelClosed(int):0:0 -> g
    3:3:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> g
    3:3:void onPostResume():0 -> g
    4:4:void onPostResume():0:0 -> g
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> h
    1:1:void onStop():0 -> h
    2:2:void onStop():0:0 -> h
    int updateStatusGuard(int) -> h
    1:1:void androidx.appcompat.view.menu.MenuBuilder.close():0:0 -> i
    1:1:void dismissPopups():0 -> i
    void invalidatePanelMenu(int) -> i
    void endOnGoingFadeAnimation() -> j
    1:1:androidx.appcompat.app.ActionBar getSupportActionBar():0:0 -> k
    1:1:android.content.Context getActionBarThemedContext():0 -> k
    2:2:android.content.Context getActionBarThemedContext():0:0 -> k
    android.view.Window$Callback getWindowCallback() -> l
    boolean isHandleNativeActionModesEnabled() -> m
    boolean shouldAnimateActionModeView() -> n
    1:1:android.view.ViewGroup createSubDecor():0:0 -> o
    1:1:void ensureSubDecor():0 -> o
    2:2:void ensureSubDecor():0:0 -> o
    3:3:java.lang.CharSequence getTitle():0:0 -> o
    3:3:void ensureSubDecor():0 -> o
    4:4:void ensureSubDecor():0:0 -> o
    5:5:androidx.appcompat.app.ActionBar peekSupportActionBar():0:0 -> o
    5:5:void ensureSubDecor():0 -> o
    6:6:void ensureSubDecor():0:0 -> o
    7:7:void applyFixedSizeWindow():0:0 -> o
    7:7:void ensureSubDecor():0 -> o
    8:8:void ensureSubDecor():0:0 -> o
    9:9:android.view.ViewGroup createSubDecor():0:0 -> o
    9:9:void ensureSubDecor():0 -> o
    1:1:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    2:2:boolean shouldInheritContext(android.view.ViewParent):0:0 -> onCreateView
    2:2:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    3:3:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    3:3:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    void initWindowDecorActionBar() -> p
    void throwFeatureRequestIfSubDecorInstalled() -> q
androidx.appcompat.app.AppCompatDelegateImpl$1 -> androidx.appcompat.app.w:
    java.lang.Thread$UncaughtExceptionHandler val$defHandler -> a
    1:1:boolean shouldWrapException(java.lang.Throwable):0:0 -> uncaughtException
    1:1:void uncaughtException(java.lang.Thread,java.lang.Throwable):0 -> uncaughtException
    2:2:void uncaughtException(java.lang.Thread,java.lang.Throwable):0:0 -> uncaughtException
androidx.appcompat.app.AppCompatDelegateImpl$2 -> androidx.appcompat.app.x:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> b
androidx.appcompat.app.AppCompatDelegateImpl$3 -> androidx.appcompat.app.y:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
    androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat) -> a
androidx.appcompat.app.AppCompatDelegateImpl$4 -> androidx.appcompat.app.z:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
    void onFitSystemWindows(android.graphics.Rect) -> a
androidx.appcompat.app.AppCompatDelegateImpl$5 -> androidx.appcompat.app.A:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
    void onAttachedFromWindow() -> a
androidx.appcompat.app.AppCompatDelegateImpl$6 -> androidx.appcompat.app.C:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> b
androidx.appcompat.app.AppCompatDelegateImpl$6$1 -> androidx.appcompat.app.B:
    androidx.appcompat.app.AppCompatDelegateImpl$6 this$1 -> a
    void onAnimationEnd(android.view.View) -> a
    void onAnimationStart(android.view.View) -> b
androidx.appcompat.app.AppCompatDelegateImpl$7 -> androidx.appcompat.app.D:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> a
    void onAnimationEnd(android.view.View) -> a
    void onAnimationStart(android.view.View) -> b
androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback -> androidx.appcompat.app.E:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> b
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9 -> androidx.appcompat.app.G:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> b
    androidx.appcompat.view.ActionMode$Callback mWrapped -> a
    boolean onActionItemClicked(androidx.appcompat.view.ActionMode,android.view.MenuItem) -> a
    void onDestroyActionMode(androidx.appcompat.view.ActionMode) -> a
    boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu) -> a
    boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu) -> b
androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9$1 -> androidx.appcompat.app.F:
    androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9 this$1 -> a
    void onAnimationEnd(android.view.View) -> a
androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback -> androidx.appcompat.app.H:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> c
    android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback) -> a
androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager -> androidx.appcompat.app.J:
    androidx.appcompat.app.TwilightManager mTwilightManager -> a
    android.content.IntentFilter mAutoTimeChangeReceiverFilter -> d
    android.content.BroadcastReceiver mAutoTimeChangeReceiver -> c
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> e
    boolean mIsNight -> b
    void cleanup() -> a
    void dispatchTimeChanged() -> b
    int getApplyableNightMode() -> c
    void setup() -> d
androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager$1 -> androidx.appcompat.app.I:
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager this$1 -> a
androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView -> androidx.appcompat.app.K:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> j
    1:1:boolean isOutOfBounds(int,int):0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    3:3:void androidx.appcompat.app.AppCompatDelegateImpl.closePanel(int):0:0 -> onInterceptTouchEvent
    3:3:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    4:4:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState -> androidx.appcompat.app.L:
    boolean isPrepared -> m
    boolean isHandled -> n
    androidx.appcompat.view.menu.ListMenuPresenter listMenuPresenter -> k
    boolean isOpen -> o
    boolean qwertyMode -> p
    int windowAnimations -> f
    int x -> d
    int y -> e
    int background -> b
    boolean refreshDecorView -> q
    int gravity -> c
    boolean refreshMenuContent -> r
    int featureId -> a
    android.view.View createdPanelView -> i
    android.view.View shownPanelView -> h
    android.os.Bundle frozenActionViewState -> s
    android.content.Context listPresenterContext -> l
    android.view.ViewGroup decorView -> g
    androidx.appcompat.view.menu.MenuBuilder menu -> j
    void setMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
    void setStyle(android.content.Context) -> a
androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback -> androidx.appcompat.app.M:
    androidx.appcompat.app.AppCompatDelegateImpl this$0 -> b
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
androidx.appcompat.app.AppCompatDialog -> androidx.appcompat.app.P:
    androidx.appcompat.app.AppCompatDelegate mDelegate -> b
    androidx.core.view.KeyEventDispatcher$Component mKeyDispatcher -> c
    1:1:int getThemeResId(android.content.Context,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,int):0 -> <init>
    2:2:void <init>(android.content.Context,int):0:0 -> <init>
    1:1:androidx.appcompat.app.AppCompatDelegate androidx.appcompat.app.AppCompatDelegate.create(android.app.Dialog,androidx.appcompat.app.AppCompatCallback):0:0 -> a
    1:1:androidx.appcompat.app.AppCompatDelegate getDelegate():0 -> a
    2:2:androidx.appcompat.app.AppCompatDelegate getDelegate():0:0 -> a
    void onSupportActionModeStarted(androidx.appcompat.view.ActionMode) -> a
    androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback) -> a
    boolean superDispatchKeyEvent(android.view.KeyEvent) -> a
    void onSupportActionModeFinished(androidx.appcompat.view.ActionMode) -> b
androidx.appcompat.app.AppCompatDialog$1 -> androidx.appcompat.app.O:
    androidx.appcompat.app.AppCompatDialog this$0 -> b
    boolean superDispatchKeyEvent(android.view.KeyEvent) -> a
androidx.appcompat.app.AppCompatViewInflater -> androidx.appcompat.app.AppCompatViewInflater:
    int[] sOnClickAttrs -> c
    java.lang.Object[] mConstructorArgs -> a
    java.lang.Class[] sConstructorSignature -> b
    java.lang.String[] sClassPrefixList -> d
    java.util.Map sConstructorMap -> e
    1:1:android.content.Context themifyContext(android.content.Context,android.util.AttributeSet,boolean,boolean):0:0 -> a
    1:1:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    2:2:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0:0 -> a
    3:3:androidx.appcompat.widget.AppCompatSeekBar createSeekBar(android.content.Context,android.util.AttributeSet):0:0 -> a
    3:3:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    4:4:androidx.appcompat.widget.AppCompatRatingBar createRatingBar(android.content.Context,android.util.AttributeSet):0:0 -> a
    4:4:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    5:5:androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView createMultiAutoCompleteTextView(android.content.Context,android.util.AttributeSet):0:0 -> a
    5:5:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    6:6:androidx.appcompat.widget.AppCompatAutoCompleteTextView createAutoCompleteTextView(android.content.Context,android.util.AttributeSet):0:0 -> a
    6:6:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    7:7:androidx.appcompat.widget.AppCompatCheckedTextView createCheckedTextView(android.content.Context,android.util.AttributeSet):0:0 -> a
    7:7:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    8:8:androidx.appcompat.widget.AppCompatRadioButton createRadioButton(android.content.Context,android.util.AttributeSet):0:0 -> a
    8:8:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    9:9:androidx.appcompat.widget.AppCompatCheckBox createCheckBox(android.content.Context,android.util.AttributeSet):0:0 -> a
    9:9:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    10:10:androidx.appcompat.widget.AppCompatImageButton createImageButton(android.content.Context,android.util.AttributeSet):0:0 -> a
    10:10:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    11:11:void androidx.appcompat.widget.AppCompatImageButton.<init>(android.content.Context,android.util.AttributeSet):0:0 -> a
    11:11:androidx.appcompat.widget.AppCompatImageButton createImageButton(android.content.Context,android.util.AttributeSet):0 -> a
    11:11:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    12:12:androidx.appcompat.widget.AppCompatSpinner createSpinner(android.content.Context,android.util.AttributeSet):0:0 -> a
    12:12:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    13:13:androidx.appcompat.widget.AppCompatEditText createEditText(android.content.Context,android.util.AttributeSet):0:0 -> a
    13:13:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    14:14:androidx.appcompat.widget.AppCompatButton createButton(android.content.Context,android.util.AttributeSet):0:0 -> a
    14:14:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    15:15:androidx.appcompat.widget.AppCompatImageView createImageView(android.content.Context,android.util.AttributeSet):0:0 -> a
    15:15:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    16:16:androidx.appcompat.widget.AppCompatTextView createTextView(android.content.Context,android.util.AttributeSet):0:0 -> a
    16:16:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    17:17:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0:0 -> a
    18:18:android.view.View createViewFromTag(android.content.Context,java.lang.String,android.util.AttributeSet):0:0 -> a
    18:18:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    19:19:void checkOnClickListener(android.view.View,android.util.AttributeSet):0:0 -> a
    19:19:android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean):0 -> a
    android.view.View createViewByPrefix(android.content.Context,java.lang.String,java.lang.String) -> a
    void verifyNotNull(android.view.View,java.lang.String) -> a
androidx.appcompat.app.AppCompatViewInflater$DeclaredOnClickListener -> androidx.appcompat.app.Q:
    java.lang.reflect.Method mResolvedMethod -> d
    android.view.View mHostView -> b
    java.lang.String mMethodName -> c
    android.content.Context mResolvedContext -> e
    1:1:void resolveMethod(android.content.Context,java.lang.String):0:0 -> onClick
    1:1:void onClick(android.view.View):0 -> onClick
    2:2:void onClick(android.view.View):0:0 -> onClick
androidx.appcompat.app.ResourcesFlusher -> androidx.appcompat.app.S:
    java.lang.reflect.Field sResourcesImplField -> g
    java.lang.reflect.Field sThemedResourceCache_mUnthemedEntriesField -> e
    boolean sThemedResourceCache_mUnthemedEntriesFieldFetched -> f
    boolean sResourcesImplFieldFetched -> h
    java.lang.reflect.Field sDrawableCacheField -> a
    boolean sDrawableCacheFieldFetched -> b
    java.lang.Class sThemedResourceCacheClazz -> c
    boolean sThemedResourceCacheClazzFetched -> d
    1:1:void flushNougats(android.content.res.Resources):0:0 -> a
    1:1:void flush(android.content.res.Resources):0 -> a
    2:2:void flushMarshmallows(android.content.res.Resources):0:0 -> a
    2:2:void flush(android.content.res.Resources):0 -> a
    3:3:void flushLollipops(android.content.res.Resources):0:0 -> a
    3:3:void flush(android.content.res.Resources):0 -> a
    void flushThemedResourcesCache(java.lang.Object) -> a
androidx.appcompat.app.TwilightCalculator -> androidx.appcompat.app.T:
    long sunrise -> b
    long sunset -> a
    androidx.appcompat.app.TwilightCalculator sInstance -> d
    int state -> c
    void calculateTwilight(long,double,double) -> a
    androidx.appcompat.app.TwilightCalculator getInstance() -> a
androidx.appcompat.app.TwilightManager -> androidx.appcompat.app.V:
    android.content.Context mContext -> a
    androidx.appcompat.app.TwilightManager sInstance -> d
    androidx.appcompat.app.TwilightManager$TwilightState mTwilightState -> c
    android.location.LocationManager mLocationManager -> b
    androidx.appcompat.app.TwilightManager getInstance(android.content.Context) -> a
    android.location.Location getLastKnownLocationForProvider(java.lang.String) -> a
    1:1:boolean isStateValid():0:0 -> a
    1:1:boolean isNight():0 -> a
    2:2:boolean isNight():0:0 -> a
    3:3:android.location.Location getLastKnownLocation():0:0 -> a
    3:3:boolean isNight():0 -> a
    4:4:void updateState(android.location.Location):0:0 -> a
    4:4:boolean isNight():0 -> a
    5:5:boolean isNight():0:0 -> a
androidx.appcompat.app.TwilightManager$TwilightState -> androidx.appcompat.app.U:
    long nextUpdate -> f
    long tomorrowSunrise -> e
    long yesterdaySunset -> b
    long todaySunset -> d
    long todaySunrise -> c
    boolean isNight -> a
androidx.appcompat.app.WindowDecorActionBar -> androidx.appcompat.app.a0:
    android.content.Context mContext -> a
    android.view.animation.Interpolator sHideInterpolator -> A
    androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl mActionMode -> i
    boolean mHideOnContentScroll -> w
    androidx.core.view.ViewPropertyAnimatorListener mHideListener -> x
    androidx.appcompat.view.ActionMode$Callback mDeferredModeDestroyCallback -> k
    boolean mHiddenByApp -> q
    boolean mShowingForMode -> s
    androidx.core.view.ViewPropertyAnimatorUpdateListener mUpdateListener -> z
    java.util.ArrayList mMenuVisibilityListeners -> m
    androidx.appcompat.widget.ActionBarContextView mContextView -> f
    androidx.appcompat.view.ActionMode mDeferredDestroyActionMode -> j
    boolean mDisplayHomeAsUpSet -> h
    android.view.View mContentView -> g
    boolean mHasEmbeddedTabs -> n
    int mCurWindowVisibility -> o
    android.content.Context mThemedContext -> b
    boolean mContentAnimations -> p
    androidx.appcompat.widget.ActionBarOverlayLayout mOverlayLayout -> c
    android.view.animation.Interpolator sShowInterpolator -> B
    boolean mLastMenuVisibility -> l
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet mCurrentShowAnim -> u
    boolean mShowHideAnimationEnabled -> v
    androidx.core.view.ViewPropertyAnimatorListener mShowListener -> y
    boolean mHiddenBySystem -> r
    boolean mNowShowing -> t
    androidx.appcompat.widget.DecorToolbar mDecorToolbar -> e
    androidx.appcompat.widget.ActionBarContainer mContainerView -> d
    boolean collapseActionView() -> a
    void dispatchMenuVisibilityChanged(boolean) -> a
    1:1:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> a
    1:1:void init(android.view.View):0 -> a
    2:2:void init(android.view.View):0:0 -> a
    3:3:void setHomeButtonEnabled(boolean):0:0 -> a
    3:3:void init(android.view.View):0 -> a
    4:4:void init(android.view.View):0:0 -> a
    5:5:void setHideOnContentScrollEnabled(boolean):0:0 -> a
    5:5:void init(android.view.View):0 -> a
    6:6:void init(android.view.View):0:0 -> a
    7:7:void setElevation(float):0:0 -> a
    7:7:void init(android.view.View):0 -> a
    8:8:void init(android.view.View):0:0 -> a
    9:9:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> a
    9:9:void init(android.view.View):0 -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    boolean onKeyShortcut(int,android.view.KeyEvent) -> a
    void onWindowVisibilityChanged(int) -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback) -> a
    int getDisplayOptions() -> b
    1:1:void setDisplayOptions(int,int):0:0 -> b
    1:1:void setDisplayHomeAsUpEnabled(boolean):0 -> b
    1:1:void setDefaultDisplayHomeAsUpEnabled(boolean):0 -> b
    android.content.Context getThemedContext() -> c
    void setShowHideAnimationEnabled(boolean) -> c
    1:1:void showForActionMode():0:0 -> d
    1:1:void animateToMode(boolean):0 -> d
    2:2:void hideForActionMode():0:0 -> d
    2:2:void animateToMode(boolean):0 -> d
    3:3:boolean shouldAnimateContextView():0:0 -> d
    3:3:void animateToMode(boolean):0 -> d
    4:4:void animateToMode(boolean):0:0 -> d
    void enableContentAnimations(boolean) -> e
    void hideForSystem() -> e
    void onContentScrollStarted() -> f
    1:1:int getNavigationMode():0:0 -> f
    1:1:void setHasEmbeddedTabs(boolean):0 -> f
    2:2:void setHasEmbeddedTabs(boolean):0:0 -> f
    void onContentScrollStopped() -> g
    1:1:void doShow(boolean):0:0 -> g
    1:1:void updateVisibility(boolean):0 -> g
    2:2:void updateVisibility(boolean):0:0 -> g
    3:3:void doHide(boolean):0:0 -> g
    3:3:void updateVisibility(boolean):0 -> g
    void showForSystem() -> h
androidx.appcompat.app.WindowDecorActionBar$1 -> androidx.appcompat.app.W:
    androidx.appcompat.app.WindowDecorActionBar this$0 -> a
    1:1:void androidx.appcompat.app.WindowDecorActionBar.completeDeferredDestroyActionMode():0:0 -> a
    1:1:void onAnimationEnd(android.view.View):0 -> a
    2:2:void onAnimationEnd(android.view.View):0:0 -> a
androidx.appcompat.app.WindowDecorActionBar$2 -> androidx.appcompat.app.X:
    androidx.appcompat.app.WindowDecorActionBar this$0 -> a
    void onAnimationEnd(android.view.View) -> a
androidx.appcompat.app.WindowDecorActionBar$3 -> androidx.appcompat.app.Y:
    androidx.appcompat.app.WindowDecorActionBar this$0 -> a
    void onAnimationUpdate(android.view.View) -> a
androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl -> androidx.appcompat.app.Z:
    androidx.appcompat.view.menu.MenuBuilder mMenu -> e
    androidx.appcompat.view.ActionMode$Callback mCallback -> f
    java.lang.ref.WeakReference mCustomView -> g
    androidx.appcompat.app.WindowDecorActionBar this$0 -> h
    android.content.Context mActionModeContext -> d
    void finish() -> a
    boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder) -> a
    void setCustomView(android.view.View) -> a
    void setSubtitle(int) -> a
    void setSubtitle(java.lang.CharSequence) -> a
    void setTitleOptionalHint(boolean) -> a
    android.view.View getCustomView() -> b
    void setTitle(int) -> b
    void setTitle(java.lang.CharSequence) -> b
    android.view.Menu getMenu() -> c
    android.view.MenuInflater getMenuInflater() -> d
    java.lang.CharSequence getSubtitle() -> e
    java.lang.CharSequence getTitle() -> g
    void invalidate() -> i
    boolean isTitleOptional() -> j
    boolean dispatchOnCreate() -> k
androidx.appcompat.content.res.AppCompatResources -> b.b.b.a.b:
    java.lang.ThreadLocal TL_TYPED_VALUE -> a
    java.lang.Object sColorStateCacheLock -> c
    java.util.WeakHashMap sColorStateCaches -> b
    void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList) -> a
    android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int) -> a
    1:1:boolean isColorInt(android.content.Context,int):0:0 -> b
    1:1:android.content.res.ColorStateList inflateColorStateList(android.content.Context,int):0 -> b
    1:1:android.content.res.ColorStateList getColorStateList(android.content.Context,int):0 -> b
    2:2:android.util.TypedValue getTypedValue():0:0 -> b
    2:2:boolean isColorInt(android.content.Context,int):0 -> b
    2:2:android.content.res.ColorStateList inflateColorStateList(android.content.Context,int):0 -> b
    2:2:android.content.res.ColorStateList getColorStateList(android.content.Context,int):0 -> b
    3:3:boolean isColorInt(android.content.Context,int):0:0 -> b
    3:3:android.content.res.ColorStateList inflateColorStateList(android.content.Context,int):0 -> b
    3:3:android.content.res.ColorStateList getColorStateList(android.content.Context,int):0 -> b
    4:4:android.content.res.ColorStateList inflateColorStateList(android.content.Context,int):0:0 -> b
    4:4:android.content.res.ColorStateList getColorStateList(android.content.Context,int):0 -> b
    5:5:android.content.res.ColorStateList androidx.core.content.res.ColorStateListInflaterCompat.createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0:0 -> b
    5:5:android.content.res.ColorStateList inflateColorStateList(android.content.Context,int):0 -> b
    5:5:android.content.res.ColorStateList getColorStateList(android.content.Context,int):0 -> b
    6:6:android.content.res.ColorStateList inflateColorStateList(android.content.Context,int):0:0 -> b
    6:6:android.content.res.ColorStateList getColorStateList(android.content.Context,int):0 -> b
    7:7:android.content.res.ColorStateList getColorStateList(android.content.Context,int):0:0 -> b
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> c
androidx.appcompat.content.res.AppCompatResources$ColorStateListCacheEntry -> b.b.b.a.a:
    android.content.res.Configuration configuration -> b
    android.content.res.ColorStateList value -> a
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat -> b.b.c.a.h:
    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState mState -> p
    int mTransitionToIndex -> r
    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition mTransition -> q
    int mTransitionFromIndex -> s
    boolean mMutated -> t
    1:1:void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState):0:0 -> <init>
    1:1:void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,android.content.res.Resources):0 -> <init>
    2:2:void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,android.content.res.Resources):0:0 -> <init>
    1:1:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState():0:0 -> a
    1:1:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState():0 -> a
    2:2:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState():0:0 -> a
    2:2:androidx.appcompat.graphics.drawable.StateListDrawable$StateListState cloneConstantState():0 -> a
    3:3:void <init>():0:0 -> a
    3:3:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    4:4:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    4:4:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    5:5:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> a
    5:5:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    5:5:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    6:6:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setVariablePadding(boolean):0:0 -> a
    6:6:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> a
    6:6:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    6:6:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    7:7:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> a
    7:7:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    7:7:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    8:8:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setConstantSize(boolean):0:0 -> a
    8:8:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> a
    8:8:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    8:8:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    9:9:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> a
    9:9:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    9:9:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    10:10:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setEnterFadeDuration(int):0:0 -> a
    10:10:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> a
    10:10:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    10:10:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    11:11:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> a
    11:11:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    11:11:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    12:12:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setExitFadeDuration(int):0:0 -> a
    12:12:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> a
    12:12:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    12:12:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    13:13:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> a
    13:13:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    13:13:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    14:14:void setDither(boolean):0:0 -> a
    14:14:void updateStateFromTypedArray(android.content.res.TypedArray):0 -> a
    14:14:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    14:14:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    15:15:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    15:15:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    16:16:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    16:16:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    16:16:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    17:17:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    17:17:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    17:17:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    17:17:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    18:18:int[] androidx.appcompat.graphics.drawable.StateListDrawable.extractStateSet(android.util.AttributeSet):0:0 -> a
    18:18:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    18:18:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    18:18:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    18:18:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    19:19:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    19:19:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    19:19:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    19:19:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    20:20:int androidx.appcompat.graphics.drawable.StateListDrawable$StateListState.addStateSet(int[],android.graphics.drawable.Drawable):0:0 -> a
    20:20:int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState.addStateSet(int[],android.graphics.drawable.Drawable,int):0 -> a
    20:20:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    20:20:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    20:20:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    20:20:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    21:21:int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState.addStateSet(int[],android.graphics.drawable.Drawable,int):0:0 -> a
    21:21:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    21:21:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    21:21:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    21:21:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    22:22:int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    22:22:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    22:22:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    22:22:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    23:23:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    23:23:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    23:23:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    24:24:int parseTransition(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    24:24:void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    24:24:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    24:24:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    25:25:void init():0:0 -> a
    25:25:void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    25:25:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    26:26:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) -> a
    1:1:boolean selectTransition(int):0:0 -> onStateChange
    1:1:boolean onStateChange(int[]):0 -> onStateChange
    2:2:android.graphics.drawable.Drawable getCurrent():0:0 -> onStateChange
    2:2:boolean selectTransition(int):0 -> onStateChange
    2:2:boolean onStateChange(int[]):0 -> onStateChange
    3:3:boolean selectTransition(int):0:0 -> onStateChange
    3:3:boolean onStateChange(int[]):0 -> onStateChange
    4:4:boolean onStateChange(int[]):0:0 -> onStateChange
    5:5:android.graphics.drawable.Drawable getCurrent():0:0 -> onStateChange
    5:5:boolean onStateChange(int[]):0 -> onStateChange
    6:6:boolean onStateChange(int[]):0:0 -> onStateChange
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1 -> b.b.c.a.a:
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition -> b.b.c.a.b:
    android.graphics.drawable.Animatable mA -> a
    void start() -> c
    void stop() -> d
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState -> b.b.c.a.c:
    androidx.collection.LongSparseArray mTransitions -> K
    androidx.collection.SparseArrayCompat mStateIds -> L
    1:1:void androidx.collection.SparseArrayCompat.<init>():0:0 -> <init>
    1:1:void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat,android.content.res.Resources):0 -> <init>
    2:2:void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat,android.content.res.Resources):0:0 -> <init>
    int addTransition(int,int,android.graphics.drawable.Drawable,boolean) -> a
    int getKeyframeIdAt(int) -> b
    int indexOfKeyframe(int[]) -> b
    int indexOfTransition(int,int) -> b
    boolean isTransitionReversed(int,int) -> c
    boolean transitionHasReversibleFlag(int,int) -> d
    long generateTransitionKey(int,int) -> e
    void mutate() -> e
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition -> b.b.c.a.d:
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat mAvd -> a
    void start() -> c
    void stop() -> d
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition -> b.b.c.a.e:
    android.animation.ObjectAnimator mAnim -> a
    boolean mHasReversibleFlag -> b
    boolean canReverse() -> a
    void reverse() -> b
    void start() -> c
    void stop() -> d
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator -> b.b.c.a.f:
    int[] mFrameTimes -> a
    int mFrames -> b
    int mTotalDuration -> c
    1:1:int updateFrames(android.graphics.drawable.AnimationDrawable,boolean):0:0 -> <init>
    1:1:void <init>(android.graphics.drawable.AnimationDrawable,boolean):0 -> <init>
    int getTotalDuration() -> a
androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition -> b.b.c.a.g:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1):0 -> <init>
    boolean canReverse() -> a
    void reverse() -> b
    void start() -> c
    void stop() -> d
androidx.appcompat.graphics.drawable.DrawableContainer -> b.b.c.a.l:
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState mDrawableContainerState -> b
    android.graphics.drawable.Drawable mCurrDrawable -> d
    android.graphics.drawable.Drawable mLastDrawable -> e
    long mExitAnimationEnd -> l
    long mEnterAnimationEnd -> k
    boolean mMutated -> i
    int mCurIndex -> h
    int mAlpha -> f
    boolean mHasAlpha -> g
    java.lang.Runnable mAnimationRunnable -> j
    android.graphics.Rect mHotspotBounds -> c
    androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback mBlockInvalidateCallback -> m
    void animate(boolean) -> a
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState() -> a
    void initializeDrawableForDisplay(android.graphics.drawable.Drawable) -> a
    int resolveDensity(android.content.res.Resources,int) -> a
    boolean selectDrawable(int) -> a
    void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) -> a
    void updateDensity(android.content.res.Resources) -> a
    int getCurrentIndex() -> b
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getIntrinsicHeight
    1:1:int getIntrinsicHeight():0 -> getIntrinsicHeight
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantHeight():0:0 -> getIntrinsicHeight
    2:2:int getIntrinsicHeight():0 -> getIntrinsicHeight
    3:3:int getIntrinsicHeight():0:0 -> getIntrinsicHeight
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getIntrinsicWidth
    1:1:int getIntrinsicWidth():0 -> getIntrinsicWidth
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantWidth():0:0 -> getIntrinsicWidth
    2:2:int getIntrinsicWidth():0 -> getIntrinsicWidth
    3:3:int getIntrinsicWidth():0:0 -> getIntrinsicWidth
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getMinimumHeight
    1:1:int getMinimumHeight():0 -> getMinimumHeight
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantMinimumHeight():0:0 -> getMinimumHeight
    2:2:int getMinimumHeight():0 -> getMinimumHeight
    3:3:int getMinimumHeight():0:0 -> getMinimumHeight
    1:1:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.isConstantSize():0:0 -> getMinimumWidth
    1:1:int getMinimumWidth():0 -> getMinimumWidth
    2:2:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getConstantMinimumWidth():0:0 -> getMinimumWidth
    2:2:int getMinimumWidth():0 -> getMinimumWidth
    3:3:int getMinimumWidth():0:0 -> getMinimumWidth
    1:1:boolean needsMirroring():0:0 -> getPadding
    1:1:boolean getPadding(android.graphics.Rect):0 -> getPadding
    2:2:boolean getPadding(android.graphics.Rect):0:0 -> getPadding
    1:1:void androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.invalidateCache():0:0 -> invalidateDrawable
    1:1:void invalidateDrawable(android.graphics.drawable.Drawable):0 -> invalidateDrawable
    2:2:void invalidateDrawable(android.graphics.drawable.Drawable):0:0 -> invalidateDrawable
    1:1:int getCurrentIndex():0:0 -> onLayoutDirectionChanged
    1:1:boolean onLayoutDirectionChanged(int):0 -> onLayoutDirectionChanged
    2:2:boolean androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.setLayoutDirection(int,int):0:0 -> onLayoutDirectionChanged
    2:2:boolean onLayoutDirectionChanged(int):0 -> onLayoutDirectionChanged
    1:1:void androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored(android.graphics.drawable.Drawable,boolean):0:0 -> setAutoMirrored
    1:1:void setAutoMirrored(boolean):0 -> setAutoMirrored
androidx.appcompat.graphics.drawable.DrawableContainer$1 -> b.b.c.a.i:
    androidx.appcompat.graphics.drawable.DrawableContainer this$0 -> b
androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback -> b.b.c.a.j:
    android.graphics.drawable.Drawable$Callback mCallback -> b
    android.graphics.drawable.Drawable$Callback unwrap() -> a
    androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback wrap(android.graphics.drawable.Drawable$Callback) -> a
androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState -> b.b.c.a.k:
    boolean mCheckedConstantSize -> m
    int mConstantWidth -> n
    boolean mVariablePadding -> i
    int mNumChildren -> h
    boolean mStateful -> u
    int mChangingConfigurations -> d
    boolean mCanConstantState -> w
    int mEnterFadeDuration -> A
    androidx.appcompat.graphics.drawable.DrawableContainer mOwner -> a
    boolean mMutated -> y
    android.content.res.ColorStateList mTintList -> F
    boolean mHasColorFilter -> E
    android.util.SparseArray mDrawableFutures -> f
    android.content.res.Resources mSourceRes -> b
    int mOpacity -> s
    boolean mAutoMirrored -> C
    int mConstantMinimumHeight -> q
    int mConstantHeight -> o
    android.graphics.ColorFilter mColorFilter -> D
    boolean mHasTintMode -> I
    boolean mCheckedPadding -> j
    boolean mConstantSize -> l
    boolean mCheckedConstantState -> v
    int mChildrenChangingConfigurations -> e
    android.graphics.drawable.Drawable[] mDrawables -> g
    boolean mDither -> x
    int mExitFadeDuration -> B
    int mDensity -> c
    boolean mCheckedOpacity -> r
    boolean mCheckedStateful -> t
    android.graphics.Rect mConstantPadding -> k
    int mLayoutDirection -> z
    android.graphics.PorterDuff$Mode mTintMode -> G
    boolean mHasTintList -> H
    int mConstantMinimumWidth -> p
    1:1:void invalidateCache():0:0 -> a
    1:1:int addChild(android.graphics.drawable.Drawable):0 -> a
    2:2:int addChild(android.graphics.drawable.Drawable):0:0 -> a
    void applyTheme(android.content.res.Resources$Theme) -> a
    boolean canConstantState() -> a
    3:3:android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable):0:0 -> a
    3:3:android.graphics.drawable.Drawable getChild(int):0 -> a
    4:4:android.graphics.drawable.Drawable getChild(int):0:0 -> a
    void growArray(int,int) -> a
    void updateDensity(android.content.res.Resources) -> a
    void computeConstantSize() -> b
    android.graphics.Rect getConstantPadding() -> c
    int getOpacity() -> d
    void mutate() -> e
    1:1:android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable):0:0 -> f
    1:1:void createAllFutures():0 -> f
    2:2:void createAllFutures():0:0 -> f
androidx.appcompat.graphics.drawable.DrawableWrapper -> b.b.c.a.m:
    android.graphics.drawable.Drawable mDrawable -> b
    1:1:void setWrappedDrawable(android.graphics.drawable.Drawable):0:0 -> <init>
    1:1:void <init>(android.graphics.drawable.Drawable):0 -> <init>
    android.graphics.drawable.Drawable getWrappedDrawable() -> a
    1:1:void androidx.core.graphics.drawable.DrawableCompat.jumpToCurrentState(android.graphics.drawable.Drawable):0:0 -> jumpToCurrentState
    1:1:void jumpToCurrentState():0 -> jumpToCurrentState
    1:1:void androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored(android.graphics.drawable.Drawable,boolean):0:0 -> setAutoMirrored
    1:1:void setAutoMirrored(boolean):0 -> setAutoMirrored
androidx.appcompat.graphics.drawable.StateListDrawable -> b.b.c.a.o:
    boolean mMutated -> o
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState mStateListState -> n
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState() -> a
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState cloneConstantState() -> a
    void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) -> a
androidx.appcompat.graphics.drawable.StateListDrawable$StateListState -> b.b.c.a.n:
    int[][] mStateSets -> J
    1:1:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getCapacity():0:0 -> <init>
    1:1:void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,androidx.appcompat.graphics.drawable.StateListDrawable,android.content.res.Resources):0 -> <init>
    2:2:void <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,androidx.appcompat.graphics.drawable.StateListDrawable,android.content.res.Resources):0:0 -> <init>
    void growArray(int,int) -> a
    1:1:int androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState.getChildCount():0:0 -> a
    1:1:int indexOfStateSet(int[]):0 -> a
    2:2:int indexOfStateSet(int[]):0:0 -> a
    void mutate() -> e
androidx.appcompat.view.ActionBarPolicy -> b.b.d.a:
    android.content.Context mContext -> a
    boolean enableHomeButtonByDefault() -> a
    androidx.appcompat.view.ActionBarPolicy get(android.content.Context) -> a
    int getEmbeddedMenuWidthLimit() -> b
    int getMaxActionButtons() -> c
    boolean hasEmbeddedTabs() -> d
androidx.appcompat.view.ActionMode -> b.b.d.c:
    java.lang.Object mTag -> b
    boolean mTitleOptionalHint -> c
    void finish() -> a
    void setCustomView(android.view.View) -> a
    void setSubtitle(int) -> a
    void setSubtitle(java.lang.CharSequence) -> a
    void setTag(java.lang.Object) -> a
    void setTitleOptionalHint(boolean) -> a
    android.view.View getCustomView() -> b
    void setTitle(int) -> b
    void setTitle(java.lang.CharSequence) -> b
    android.view.Menu getMenu() -> c
    android.view.MenuInflater getMenuInflater() -> d
    java.lang.CharSequence getSubtitle() -> e
    java.lang.Object getTag() -> f
    java.lang.CharSequence getTitle() -> g
    boolean getTitleOptionalHint() -> h
    void invalidate() -> i
    boolean isTitleOptional() -> j
androidx.appcompat.view.ActionMode$Callback -> b.b.d.b:
    boolean onActionItemClicked(androidx.appcompat.view.ActionMode,android.view.MenuItem) -> a
    void onDestroyActionMode(androidx.appcompat.view.ActionMode) -> a
    boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu) -> a
    boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu) -> b
androidx.appcompat.view.CollapsibleActionView -> b.b.d.d:
    void onActionViewExpanded() -> a
    void onActionViewCollapsed() -> b
androidx.appcompat.view.ContextThemeWrapper -> b.b.d.e:
    android.content.res.Resources$Theme mTheme -> b
    android.content.res.Configuration mOverrideConfiguration -> d
    android.content.res.Resources mResources -> e
    android.view.LayoutInflater mInflater -> c
    int mThemeResource -> a
    int getThemeResId() -> a
    1:1:void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean):0:0 -> b
    1:1:void initializeTheme():0 -> b
    1:1:android.content.res.Resources getResourcesInternal():0:0 -> getResources
    1:1:android.content.res.Resources getResources():0 -> getResources
androidx.appcompat.view.StandaloneActionMode -> b.b.d.f:
    androidx.appcompat.view.ActionMode$Callback mCallback -> f
    androidx.appcompat.widget.ActionBarContextView mContextView -> e
    java.lang.ref.WeakReference mCustomView -> g
    boolean mFinished -> h
    androidx.appcompat.view.menu.MenuBuilder mMenu -> i
    android.content.Context mContext -> d
    void finish() -> a
    boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder) -> a
    void setCustomView(android.view.View) -> a
    void setSubtitle(int) -> a
    void setSubtitle(java.lang.CharSequence) -> a
    void setTitleOptionalHint(boolean) -> a
    android.view.View getCustomView() -> b
    void setTitle(int) -> b
    void setTitle(java.lang.CharSequence) -> b
    android.view.Menu getMenu() -> c
    android.view.MenuInflater getMenuInflater() -> d
    java.lang.CharSequence getSubtitle() -> e
    java.lang.CharSequence getTitle() -> g
    void invalidate() -> i
    boolean isTitleOptional() -> j
androidx.appcompat.view.SupportActionModeWrapper -> b.b.d.h:
    android.content.Context mContext -> a
    androidx.appcompat.view.ActionMode mWrappedObject -> b
androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper -> b.b.d.g:
    android.content.Context mContext -> b
    androidx.collection.SimpleArrayMap mMenus -> d
    android.view.ActionMode$Callback mWrappedCallback -> a
    java.util.ArrayList mActionModes -> c
    1:1:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> a
    1:1:android.view.Menu getMenuWrapper(android.view.Menu):0 -> a
    2:2:android.view.Menu getMenuWrapper(android.view.Menu):0:0 -> a
    boolean onActionItemClicked(androidx.appcompat.view.ActionMode,android.view.MenuItem) -> a
    void onDestroyActionMode(androidx.appcompat.view.ActionMode) -> a
    boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu) -> a
    android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode) -> b
    boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu) -> b
androidx.appcompat.view.SupportMenuInflater -> b.b.d.k:
    java.lang.Class[] ACTION_VIEW_CONSTRUCTOR_SIGNATURE -> e
    java.lang.Object[] mActionProviderConstructorArguments -> b
    android.content.Context mContext -> c
    java.lang.Class[] ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE -> f
    java.lang.Object[] mActionViewConstructorArguments -> a
    java.lang.Object mRealOwner -> d
    java.lang.Object findRealOwner(java.lang.Object) -> a
    java.lang.Object getRealOwner() -> a
    void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.view.Menu) -> a
androidx.appcompat.view.SupportMenuInflater$InflatedOnMenuItemClickListener -> b.b.d.i:
    java.lang.Class[] PARAM_TYPES -> c
    java.lang.Object mRealOwner -> a
    java.lang.reflect.Method mMethod -> b
androidx.appcompat.view.SupportMenuInflater$MenuState -> b.b.d.j:
    int itemCategoryOrder -> j
    char itemAlphabeticShortcut -> n
    java.lang.CharSequence itemTooltipText -> C
    char itemNumericShortcut -> p
    boolean itemEnabled -> u
    int groupOrder -> d
    int groupId -> b
    boolean itemChecked -> s
    java.lang.String itemActionViewClassName -> x
    android.content.res.ColorStateList itemIconTintList -> D
    java.lang.String itemListenerMethodName -> z
    android.view.Menu menu -> a
    boolean groupVisible -> f
    int itemActionViewLayout -> w
    androidx.appcompat.view.SupportMenuInflater this$0 -> F
    boolean itemAdded -> h
    androidx.core.view.ActionProvider itemActionProvider -> A
    int itemNumericModifiers -> q
    int itemAlphabeticModifiers -> o
    int itemIconResId -> m
    java.lang.CharSequence itemContentDescription -> B
    int itemId -> i
    int groupCheckable -> e
    int groupCategory -> c
    java.lang.CharSequence itemTitle -> k
    boolean itemVisible -> t
    java.lang.CharSequence itemTitleCondensed -> l
    java.lang.String itemActionProviderClassName -> y
    android.graphics.PorterDuff$Mode itemIconTintMode -> E
    int itemShowAsAction -> v
    boolean groupEnabled -> g
    int itemCheckable -> r
    void addItem() -> a
    java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    void readGroup(android.util.AttributeSet) -> a
    1:1:android.view.MenuItem androidx.core.view.MenuItemCompat.setActionProvider(android.view.MenuItem,androidx.core.view.ActionProvider):0:0 -> a
    1:1:void setItem(android.view.MenuItem):0 -> a
    2:2:void setItem(android.view.MenuItem):0:0 -> a
    3:3:void androidx.core.view.MenuItemCompat.setContentDescription(android.view.MenuItem,java.lang.CharSequence):0:0 -> a
    3:3:void setItem(android.view.MenuItem):0 -> a
    4:4:void setItem(android.view.MenuItem):0:0 -> a
    5:5:void androidx.core.view.MenuItemCompat.setTooltipText(android.view.MenuItem,java.lang.CharSequence):0:0 -> a
    5:5:void setItem(android.view.MenuItem):0 -> a
    6:6:void setItem(android.view.MenuItem):0:0 -> a
    7:7:void androidx.core.view.MenuItemCompat.setAlphabeticShortcut(android.view.MenuItem,char,int):0:0 -> a
    7:7:void setItem(android.view.MenuItem):0 -> a
    8:8:void setItem(android.view.MenuItem):0:0 -> a
    9:9:void androidx.core.view.MenuItemCompat.setNumericShortcut(android.view.MenuItem,char,int):0:0 -> a
    9:9:void setItem(android.view.MenuItem):0 -> a
    10:10:void setItem(android.view.MenuItem):0:0 -> a
    11:11:void androidx.core.view.MenuItemCompat.setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode):0:0 -> a
    11:11:void setItem(android.view.MenuItem):0 -> a
    12:12:void setItem(android.view.MenuItem):0:0 -> a
    13:13:void androidx.core.view.MenuItemCompat.setIconTintList(android.view.MenuItem,android.content.res.ColorStateList):0:0 -> a
    13:13:void setItem(android.view.MenuItem):0 -> a
    android.view.SubMenu addSubMenuItem() -> b
    1:1:char getShortcut(java.lang.String):0:0 -> b
    1:1:void readItem(android.util.AttributeSet):0 -> b
    2:2:void readItem(android.util.AttributeSet):0:0 -> b
    3:3:char getShortcut(java.lang.String):0:0 -> b
    3:3:void readItem(android.util.AttributeSet):0 -> b
    4:4:void readItem(android.util.AttributeSet):0:0 -> b
    boolean hasAddedItem() -> c
    void resetGroup() -> d
androidx.appcompat.view.ViewPropertyAnimatorCompatSet -> b.b.d.m:
    android.view.animation.Interpolator mInterpolator -> c
    androidx.core.view.ViewPropertyAnimatorListener mListener -> d
    long mDuration -> b
    boolean mIsStarted -> e
    androidx.core.view.ViewPropertyAnimatorListenerAdapter mProxyListener -> f
    java.util.ArrayList mAnimators -> a
    void cancel() -> a
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat) -> a
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet playSequentially(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorCompat) -> a
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet setDuration(long) -> a
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator) -> a
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet setListener(androidx.core.view.ViewPropertyAnimatorListener) -> a
    void onAnimationsEnded() -> b
    void start() -> c
androidx.appcompat.view.ViewPropertyAnimatorCompatSet$1 -> b.b.d.l:
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet this$0 -> c
    boolean mProxyStarted -> a
    int mProxyEndCount -> b
    1:1:void onEnd():0:0 -> a
    1:1:void onAnimationEnd(android.view.View):0 -> a
    void onAnimationStart(android.view.View) -> b
androidx.appcompat.view.WindowCallbackWrapper -> b.b.d.n:
    android.view.Window$Callback mWrapped -> b
androidx.appcompat.view.menu.ActionMenuItem -> androidx.appcompat.view.menu.a:
    char mShortcutNumericChar -> g
    android.content.res.ColorStateList mIconTintList -> o
    char mShortcutAlphabeticChar -> i
    int mShortcutAlphabeticModifiers -> j
    int mShortcutNumericModifiers -> h
    java.lang.CharSequence mTitle -> d
    java.lang.CharSequence mTitleCondensed -> e
    int mGroup -> b
    boolean mHasIconTint -> q
    int mOrdering -> c
    boolean mHasIconTintMode -> r
    int mId -> a
    android.content.Intent mIntent -> f
    java.lang.CharSequence mContentDescription -> m
    java.lang.CharSequence mTooltipText -> n
    android.content.Context mContext -> l
    android.graphics.drawable.Drawable mIconDrawable -> k
    int mFlags -> s
    android.graphics.PorterDuff$Mode mIconTintMode -> p
    androidx.core.view.ActionProvider getSupportActionProvider() -> a
    androidx.core.internal.view.SupportMenuItem setSupportActionProvider(androidx.core.view.ActionProvider) -> a
    void applyIconTint() -> b
    1:1:androidx.core.internal.view.SupportMenuItem setActionView(int):0:0 -> setActionView
    1:1:android.view.MenuItem setActionView(int):0 -> setActionView
    2:2:androidx.core.internal.view.SupportMenuItem setActionView(android.view.View):0:0 -> setActionView
    2:2:android.view.MenuItem setActionView(android.view.View):0 -> setActionView
    1:1:androidx.core.internal.view.SupportMenuItem setContentDescription(java.lang.CharSequence):0:0 -> setContentDescription
    1:1:android.view.MenuItem setContentDescription(java.lang.CharSequence):0 -> setContentDescription
    1:1:androidx.core.internal.view.SupportMenuItem setTooltipText(java.lang.CharSequence):0:0 -> setTooltipText
    1:1:android.view.MenuItem setTooltipText(java.lang.CharSequence):0 -> setTooltipText
androidx.appcompat.view.menu.ActionMenuItemView -> androidx.appcompat.view.menu.ActionMenuItemView:
    androidx.appcompat.widget.ForwardingListener mForwardingListener -> i
    int mSavedPaddingLeft -> n
    int mMaxIconSize -> o
    int mMinWidth -> m
    android.graphics.drawable.Drawable mIcon -> g
    boolean mAllowTextWithIcon -> k
    boolean mExpandedFormat -> l
    androidx.appcompat.view.menu.MenuItemImpl mItemData -> e
    androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback mPopupCallback -> j
    java.lang.CharSequence mTitle -> f
    androidx.appcompat.view.menu.MenuBuilder$ItemInvoker mItemInvoker -> h
    void initialize(androidx.appcompat.view.menu.MenuItemImpl,int) -> a
    void setIcon(android.graphics.drawable.Drawable) -> a
    void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder$ItemInvoker) -> a
    void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback) -> a
    void setTitle(java.lang.CharSequence) -> a
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
    boolean prefersCondensedTitle() -> e
    androidx.appcompat.view.menu.MenuItemImpl getItemData() -> f
    boolean hasText() -> g
    boolean shouldAllowTextWithIcon() -> h
    void updateTextButtonVisibility() -> i
androidx.appcompat.view.menu.ActionMenuItemView$ActionMenuItemForwardingListener -> androidx.appcompat.view.menu.b:
    androidx.appcompat.view.menu.ActionMenuItemView this$0 -> k
    androidx.appcompat.view.menu.ShowableListMenu getPopup() -> a
    boolean onForwardingStarted() -> b
androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback -> androidx.appcompat.view.menu.c:
    androidx.appcompat.view.menu.ShowableListMenu getPopup() -> a
androidx.appcompat.view.menu.BaseMenuPresenter -> androidx.appcompat.view.menu.d:
    androidx.appcompat.view.menu.MenuView mMenuView -> i
    android.content.Context mContext -> c
    android.content.Context mSystemContext -> b
    androidx.appcompat.view.menu.MenuBuilder mMenu -> d
    android.view.LayoutInflater mSystemInflater -> e
    androidx.appcompat.view.menu.MenuPresenter$Callback mCallback -> f
    int mItemLayoutRes -> h
    int mMenuLayoutRes -> g
    void bindItemView(androidx.appcompat.view.menu.MenuItemImpl,androidx.appcompat.view.menu.MenuView$ItemView) -> a
    boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> a
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    1:1:androidx.appcompat.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup):0:0 -> a
    1:1:android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup):0 -> a
    2:2:android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup):0:0 -> a
    androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder) -> a
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder) -> a
    void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    void setId(int) -> a
    boolean shouldIncludeItem(int,androidx.appcompat.view.menu.MenuItemImpl) -> a
    3:3:void addItemView(android.view.View,int):0:0 -> a
    3:3:void updateMenuView(boolean):0 -> a
    4:4:void updateMenuView(boolean):0:0 -> a
    boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> b
    androidx.appcompat.view.menu.MenuPresenter$Callback getCallback() -> b
androidx.appcompat.view.menu.BaseMenuWrapper -> androidx.appcompat.view.menu.e:
    java.util.Map mMenuItems -> c
    android.content.Context mContext -> b
    java.util.Map mSubMenus -> d
    android.view.MenuItem getMenuItemWrapper(android.view.MenuItem) -> a
    1:1:android.view.SubMenu androidx.appcompat.view.menu.MenuWrapperFactory.wrapSupportSubMenu(android.content.Context,androidx.core.internal.view.SupportSubMenu):0:0 -> a
    1:1:android.view.SubMenu getSubMenuWrapper(android.view.SubMenu):0 -> a
    2:2:android.view.SubMenu getSubMenuWrapper(android.view.SubMenu):0:0 -> a
    void internalRemoveGroup(int) -> a
    void internalClear() -> b
    void internalRemoveItem(int) -> b
androidx.appcompat.view.menu.BaseWrapper -> androidx.appcompat.view.menu.f:
    java.lang.Object mWrappedObject -> a
androidx.appcompat.view.menu.CascadingMenuPopup -> androidx.appcompat.view.menu.l:
    int mRawDropDownGravity -> n
    android.content.Context mContext -> c
    int mPopupStyleRes -> f
    android.view.View mAnchorView -> p
    int mMenuMaxWidth -> d
    boolean mForceShowIcon -> w
    boolean mHasXOffset -> s
    androidx.appcompat.widget.MenuItemHoverListener mMenuItemHoverListener -> m
    android.view.View$OnAttachStateChangeListener mAttachStateChangeListener -> l
    java.util.List mShowingMenus -> j
    android.view.ViewTreeObserver$OnGlobalLayoutListener mGlobalLayoutListener -> k
    int mXOffset -> u
    androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback -> y
    int mDropDownGravity -> o
    android.view.View mShownAnchorView -> q
    int mPopupStyleAttr -> e
    boolean mShowTitle -> x
    boolean mHasYOffset -> t
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> A
    android.view.ViewTreeObserver mTreeObserver -> z
    int mYOffset -> v
    java.util.List mPendingMenus -> i
    boolean mOverflowOnly -> g
    int mLastPosition -> r
    boolean mShouldCloseImmediately -> B
    android.os.Handler mSubMenuHoverHandler -> h
    1:1:int getInitialMenuPosition():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.view.View,int,int,boolean):0 -> <init>
    2:2:void <init>(android.content.Context,android.view.View,int,int,boolean):0:0 -> <init>
    void addMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
    boolean flagActionItems() -> a
    1:1:int findIndexOfAddedMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    1:1:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0 -> a
    2:2:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0:0 -> a
    3:3:int getInitialMenuPosition():0:0 -> a
    3:3:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0 -> a
    4:4:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0:0 -> a
    boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder) -> a
    void setAnchorView(android.view.View) -> a
    void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    void setGravity(int) -> a
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    5:5:androidx.appcompat.view.menu.MenuAdapter androidx.appcompat.view.menu.MenuPopup.toMenuAdapter(android.widget.ListAdapter):0:0 -> a
    5:5:void updateMenuView(boolean):0 -> a
    6:6:void updateMenuView(boolean):0:0 -> a
    boolean isShowing() -> b
    void setForceShowIcon(boolean) -> b
    void setHorizontalOffset(int) -> b
    android.widget.ListView getListView() -> c
    void setShowTitle(boolean) -> c
    void setVerticalOffset(int) -> c
    1:1:androidx.appcompat.widget.MenuPopupWindow createPopupWindow():0:0 -> c
    1:1:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> c
    2:2:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    3:3:android.view.View findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo,androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    3:3:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> c
    4:4:android.view.MenuItem findMenuItemForSubmenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    4:4:android.view.View findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo,androidx.appcompat.view.menu.MenuBuilder):0 -> c
    4:4:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> c
    5:5:android.view.View findParentViewForSubmenu(androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo,androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    5:5:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> c
    6:6:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    7:7:int getNextMenuPosition(int):0:0 -> c
    7:7:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> c
    8:8:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    9:9:java.lang.CharSequence androidx.appcompat.view.menu.MenuBuilder.getHeaderTitle():0:0 -> c
    9:9:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> c
    10:10:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    11:11:java.lang.CharSequence androidx.appcompat.view.menu.MenuBuilder.getHeaderTitle():0:0 -> c
    11:11:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0 -> c
    12:12:void showMenu(androidx.appcompat.view.menu.MenuBuilder):0:0 -> c
    void show() -> d
    boolean closeMenuOnSubMenuOpened() -> e
androidx.appcompat.view.menu.CascadingMenuPopup$1 -> androidx.appcompat.view.menu.g:
    androidx.appcompat.view.menu.CascadingMenuPopup this$0 -> b
androidx.appcompat.view.menu.CascadingMenuPopup$2 -> androidx.appcompat.view.menu.h:
    androidx.appcompat.view.menu.CascadingMenuPopup this$0 -> b
androidx.appcompat.view.menu.CascadingMenuPopup$3 -> androidx.appcompat.view.menu.j:
    androidx.appcompat.view.menu.CascadingMenuPopup this$0 -> b
    void onItemHoverEnter(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onItemHoverExit(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> b
androidx.appcompat.view.menu.CascadingMenuPopup$3$1 -> androidx.appcompat.view.menu.i:
    androidx.appcompat.view.menu.MenuBuilder val$menu -> d
    androidx.appcompat.view.menu.CascadingMenuPopup$3 this$1 -> e
    android.view.MenuItem val$item -> c
    androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo val$nextInfo -> b
androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo -> androidx.appcompat.view.menu.k:
    androidx.appcompat.view.menu.MenuBuilder menu -> b
    int position -> c
    androidx.appcompat.widget.MenuPopupWindow window -> a
    android.widget.ListView getListView() -> a
androidx.appcompat.view.menu.ExpandedMenuView -> androidx.appcompat.view.menu.ExpandedMenuView:
    int[] TINT_ATTRS -> c
    androidx.appcompat.view.menu.MenuBuilder mMenu -> b
    void initialize(androidx.appcompat.view.menu.MenuBuilder) -> a
    1:1:boolean androidx.appcompat.view.menu.MenuBuilder.performItemAction(android.view.MenuItem,int):0:0 -> a
    1:1:boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl):0 -> a
androidx.appcompat.view.menu.ListMenuItemView -> androidx.appcompat.view.menu.ListMenuItemView:
    boolean mPreserveIconSpacing -> n
    int mTextAppearance -> l
    boolean mHasListDivider -> p
    android.widget.LinearLayout mContent -> j
    androidx.appcompat.view.menu.MenuItemImpl mItemData -> b
    boolean mForceShowIcon -> r
    android.widget.ImageView mIconView -> c
    android.widget.ImageView mSubMenuArrowView -> h
    android.widget.ImageView mGroupDivider -> i
    android.widget.CheckBox mCheckBox -> f
    android.widget.RadioButton mRadioButton -> d
    android.content.Context mTextAppearanceContext -> m
    android.widget.TextView mTitleView -> e
    android.view.LayoutInflater mInflater -> q
    android.widget.TextView mShortcutView -> g
    android.graphics.drawable.Drawable mBackground -> k
    android.graphics.drawable.Drawable mSubMenuArrow -> o
    1:1:void addContentView(android.view.View,int):0:0 -> a
    1:1:void addContentView(android.view.View):0 -> a
    void addContentView(android.view.View,int) -> a
    android.view.LayoutInflater getInflater() -> a
    2:2:void setSubMenuArrowVisible(boolean):0:0 -> a
    2:2:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0 -> a
    3:3:void initialize(androidx.appcompat.view.menu.MenuItemImpl,int):0:0 -> a
    4:4:void insertRadioButton():0:0 -> a
    4:4:void setCheckable(boolean):0 -> a
    5:5:void setCheckable(boolean):0:0 -> a
    6:6:void insertCheckBox():0:0 -> a
    6:6:void setCheckable(boolean):0 -> a
    7:7:void setCheckable(boolean):0:0 -> a
    8:8:boolean androidx.appcompat.view.menu.MenuItemImpl.shouldShowIcon():0:0 -> a
    8:8:void setIcon(android.graphics.drawable.Drawable):0 -> a
    9:9:void setIcon(android.graphics.drawable.Drawable):0:0 -> a
    10:10:void insertIconView():0:0 -> a
    10:10:void setIcon(android.graphics.drawable.Drawable):0 -> a
    11:11:void setIcon(android.graphics.drawable.Drawable):0:0 -> a
    void setTitle(java.lang.CharSequence) -> a
    void setForceShowIcon(boolean) -> b
    void setGroupDividerEnabled(boolean) -> c
    void setShortcut(boolean,char) -> d
    boolean prefersCondensedTitle() -> e
    androidx.appcompat.view.menu.MenuItemImpl getItemData() -> f
androidx.appcompat.view.menu.ListMenuPresenter -> androidx.appcompat.view.menu.n:
    androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter mAdapter -> j
    android.content.Context mContext -> b
    androidx.appcompat.view.menu.MenuBuilder mMenu -> d
    android.view.LayoutInflater mInflater -> c
    int mItemLayoutRes -> h
    int mItemIndexOffset -> f
    int mThemeRes -> g
    androidx.appcompat.view.menu.MenuPresenter$Callback mCallback -> i
    androidx.appcompat.view.menu.ExpandedMenuView mMenuView -> e
    1:1:void <init>(int,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,int):0 -> <init>
    2:2:void <init>(android.content.Context,int):0:0 -> <init>
    boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> a
    boolean flagActionItems() -> a
    androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder) -> a
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder) -> a
    void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    void updateMenuView(boolean) -> a
    boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> b
    android.widget.ListAdapter getAdapter() -> b
androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter -> androidx.appcompat.view.menu.m:
    androidx.appcompat.view.menu.ListMenuPresenter this$0 -> b
    int mExpandedIndex -> a
    void findExpandedIndex() -> a
androidx.appcompat.view.menu.MenuAdapter -> androidx.appcompat.view.menu.o:
    android.view.LayoutInflater mInflater -> e
    androidx.appcompat.view.menu.MenuBuilder mAdapterMenu -> a
    int mItemLayoutRes -> f
    int mExpandedIndex -> b
    boolean mForceShowIcon -> c
    boolean mOverflowOnly -> d
    void findExpandedIndex() -> a
    void setForceShowIcon(boolean) -> a
    androidx.appcompat.view.menu.MenuBuilder getAdapterMenu() -> b
androidx.appcompat.view.menu.MenuBuilder -> androidx.appcompat.view.menu.r:
    android.content.Context mContext -> a
    int mDefaultShowAsAction -> l
    boolean mIsActionItemsStale -> k
    java.util.ArrayList mVisibleItems -> g
    boolean mIsClosing -> u
    android.view.View mHeaderView -> p
    int[] sCategoryToOrder -> A
    boolean mPreventDispatchingItemsChanged -> q
    boolean mStructureChangedWhileDispatchPrevented -> s
    java.util.concurrent.CopyOnWriteArrayList mPresenters -> w
    boolean mGroupDividerEnabled -> y
    java.util.ArrayList mActionItems -> i
    boolean mIsVisibleItemsStale -> h
    androidx.appcompat.view.menu.MenuItemImpl mExpandedItem -> x
    android.content.res.Resources mResources -> b
    boolean mShortcutsVisible -> d
    androidx.appcompat.view.menu.MenuBuilder$Callback mCallback -> e
    java.util.ArrayList mItems -> f
    android.view.ContextMenu$ContextMenuInfo mCurrentMenuInfo -> m
    boolean mItemsChangedWhileDispatchPrevented -> r
    boolean mOptionalIconsVisible -> t
    java.lang.CharSequence mHeaderTitle -> n
    java.util.ArrayList mNonActionItems -> j
    boolean mOverrideVisibleItems -> z
    java.util.ArrayList mTempShortcutItemList -> v
    android.graphics.drawable.Drawable mHeaderIcon -> o
    boolean mQwertyMode -> c
    1:1:void setShortcutsVisibleInner(boolean):0:0 -> <init>
    1:1:void <init>(android.content.Context):0 -> <init>
    1:1:int getOrdering(int):0:0 -> a
    1:1:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> a
    2:2:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0:0 -> a
    3:3:androidx.appcompat.view.menu.MenuItemImpl createNewMenuItem(int,int,int,int,java.lang.CharSequence,int):0:0 -> a
    3:3:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> a
    4:4:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0:0 -> a
    5:5:int findInsertIndex(java.util.ArrayList,int):0:0 -> a
    5:5:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> a
    6:6:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0:0 -> a
    7:7:int getOrdering(int):0:0 -> a
    7:7:android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence):0 -> a
    void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter) -> a
    void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context) -> a
    void changeMenuMode() -> a
    void close(boolean) -> a
    boolean collapseItemActionView(androidx.appcompat.view.menu.MenuItemImpl) -> a
    boolean dispatchMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    androidx.appcompat.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent) -> a
    void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent) -> a
    boolean performItemAction(android.view.MenuItem,int) -> a
    8:8:android.content.Context getContext():0:0 -> a
    8:8:boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int):0 -> a
    9:9:boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int):0:0 -> a
    10:10:void androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper.onPrepareSubMenu(android.view.SubMenu):0:0 -> a
    10:10:boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int):0 -> a
    11:11:boolean dispatchSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder,androidx.appcompat.view.menu.MenuPresenter):0:0 -> a
    11:11:boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int):0 -> a
    void removeItemAtInt(int,boolean) -> a
    void restoreActionViewStates(android.os.Bundle) -> a
    void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback) -> a
    androidx.appcompat.view.menu.MenuBuilder setDefaultShowAsAction(int) -> a
    void setExclusiveItemChecked(android.view.MenuItem) -> a
    androidx.appcompat.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable) -> a
    12:12:android.content.res.Resources getResources():0:0 -> a
    12:12:void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View):0 -> a
    13:13:void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View):0:0 -> a
    14:14:android.content.Context getContext():0:0 -> a
    14:14:void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View):0 -> a
    15:15:void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View):0:0 -> a
    androidx.appcompat.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence) -> a
    androidx.appcompat.view.menu.MenuBuilder setHeaderViewInt(android.view.View) -> a
    1:1:android.view.MenuItem add(int,int,int,java.lang.CharSequence):0:0 -> addIntentOptions
    1:1:int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]):0 -> addIntentOptions
    2:2:int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]):0:0 -> addIntentOptions
    boolean expandItemActionView(androidx.appcompat.view.menu.MenuItemImpl) -> b
    void flagActionItems() -> b
    1:1:void dispatchPresenterUpdate(boolean):0:0 -> b
    1:1:void onItemsChanged(boolean):0 -> b
    2:2:void onItemsChanged(boolean):0:0 -> b
    void removeMenuPresenter(androidx.appcompat.view.menu.MenuPresenter) -> b
    void saveActionViewStates(android.os.Bundle) -> b
    androidx.appcompat.view.menu.MenuBuilder setHeaderIconInt(int) -> b
    java.util.ArrayList getActionItems() -> c
    androidx.appcompat.view.menu.MenuBuilder setHeaderTitleInt(int) -> c
    void setOverrideVisibleItems(boolean) -> c
    java.lang.String getActionViewStatesKey() -> d
    android.content.Context getContext() -> e
    androidx.appcompat.view.menu.MenuItemImpl getExpandedItem() -> f
    java.util.ArrayList getNonActionItems() -> g
    boolean getOptionalIconsVisible() -> h
    androidx.appcompat.view.menu.MenuBuilder getRootMenu() -> i
    java.util.ArrayList getVisibleItems() -> j
    boolean isGroupDividerEnabled() -> k
    boolean isQwertyMode() -> l
    boolean isShortcutsVisible() -> m
    void onItemActionRequestChanged(androidx.appcompat.view.menu.MenuItemImpl) -> n
    void onItemVisibleChanged(androidx.appcompat.view.menu.MenuItemImpl) -> o
    void startDispatchingItemsChanged() -> p
    1:1:boolean performItemAction(android.view.MenuItem,int):0:0 -> performShortcut
    1:1:boolean performShortcut(int,android.view.KeyEvent,int):0 -> performShortcut
    2:2:boolean performShortcut(int,android.view.KeyEvent,int):0:0 -> performShortcut
    void stopDispatchingItemsChanged() -> q
    1:1:int findGroupIndex(int,int):0:0 -> removeGroup
    1:1:int findGroupIndex(int):0 -> removeGroup
    1:1:void removeGroup(int):0 -> removeGroup
    2:2:void removeGroup(int):0:0 -> removeGroup
    1:1:int findItemIndex(int):0:0 -> removeItem
    1:1:void removeItem(int):0 -> removeItem
    2:2:void removeItem(int):0:0 -> removeItem
androidx.appcompat.view.menu.MenuBuilder$Callback -> androidx.appcompat.view.menu.p:
    boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder) -> a
androidx.appcompat.view.menu.MenuBuilder$ItemInvoker -> androidx.appcompat.view.menu.q:
    boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl) -> a
androidx.appcompat.view.menu.MenuDialogHelper -> androidx.appcompat.view.menu.s:
    androidx.appcompat.app.AlertDialog mDialog -> c
    androidx.appcompat.view.menu.MenuBuilder mMenu -> b
    androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback -> e
    androidx.appcompat.view.menu.ListMenuPresenter mPresenter -> d
    1:1:void dismiss():0:0 -> a
    1:1:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0 -> a
    2:2:void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean):0:0 -> a
    boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
    3:3:android.view.View androidx.appcompat.view.menu.MenuBuilder.getHeaderView():0:0 -> a
    3:3:void show(android.os.IBinder):0 -> a
    4:4:void show(android.os.IBinder):0:0 -> a
    5:5:android.graphics.drawable.Drawable androidx.appcompat.view.menu.MenuBuilder.getHeaderIcon():0:0 -> a
    5:5:void show(android.os.IBinder):0 -> a
    6:6:void show(android.os.IBinder):0:0 -> a
    7:7:java.lang.CharSequence androidx.appcompat.view.menu.MenuBuilder.getHeaderTitle():0:0 -> a
    7:7:void show(android.os.IBinder):0 -> a
    8:8:void show(android.os.IBinder):0:0 -> a
androidx.appcompat.view.menu.MenuItemImpl -> androidx.appcompat.view.menu.u:
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> j
    android.content.res.ColorStateList mIconTintList -> t
    android.graphics.PorterDuff$Mode mIconTintMode -> u
    int mOrdering -> d
    java.lang.CharSequence mTitleCondensed -> f
    boolean mHasIconTintMode -> w
    int mGroup -> b
    androidx.appcompat.view.menu.SubMenuBuilder mSubMenu -> o
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> q
    android.content.Intent mIntent -> g
    android.view.ContextMenu$ContextMenuInfo mMenuInfo -> E
    java.lang.CharSequence mTooltipText -> s
    int mFlags -> y
    android.graphics.drawable.Drawable mIconDrawable -> l
    int mIconResId -> m
    int mShortcutAlphabeticModifiers -> k
    int mShortcutNumericModifiers -> i
    java.lang.CharSequence mTitle -> e
    boolean mHasIconTint -> v
    boolean mNeedToApplyIconTint -> x
    int mCategoryOrder -> c
    android.view.MenuItem$OnActionExpandListener mOnActionExpandListener -> C
    int mId -> a
    int mShowAsAction -> z
    java.lang.CharSequence mContentDescription -> r
    android.view.View mActionView -> A
    androidx.appcompat.view.menu.MenuBuilder mMenu -> n
    androidx.core.view.ActionProvider mActionProvider -> B
    java.lang.Runnable mItemCallback -> p
    boolean mIsActionViewExpanded -> D
    void appendModifier(java.lang.StringBuilder,int,int,java.lang.String) -> a
    android.graphics.drawable.Drawable applyIconTintIfNecessary(android.graphics.drawable.Drawable) -> a
    androidx.core.view.ActionProvider getSupportActionProvider() -> a
    1:1:java.lang.CharSequence getTitle():0:0 -> a
    1:1:java.lang.CharSequence getTitleForItemView(androidx.appcompat.view.menu.MenuView$ItemView):0 -> a
    void setActionViewExpanded(boolean) -> a
    void setMenuInfo(android.view.ContextMenu$ContextMenuInfo) -> a
    2:2:java.lang.CharSequence getTitle():0:0 -> a
    2:2:void setSubMenu(androidx.appcompat.view.menu.SubMenuBuilder):0 -> a
    3:3:void setSubMenu(androidx.appcompat.view.menu.SubMenuBuilder):0:0 -> a
    androidx.core.internal.view.SupportMenuItem setSupportActionProvider(androidx.core.view.ActionProvider) -> a
    int getOrdering() -> b
    void setCheckedInt(boolean) -> b
    char getShortcut() -> c
    void setExclusiveCheckable(boolean) -> c
    java.lang.String getShortcutLabel() -> d
    void setIsActionButton(boolean) -> d
    boolean hasCollapsibleActionView() -> e
    boolean setVisibleInt(boolean) -> e
    1:1:boolean androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper.onPerformDefaultAction():0:0 -> f
    1:1:boolean invoke():0 -> f
    boolean isActionButton() -> g
    boolean isExclusiveCheckable() -> h
    boolean requestsActionButton() -> i
    boolean requiresActionButton() -> j
    boolean shouldShowShortcut() -> k
    boolean showsTextAsAction() -> l
    1:1:androidx.core.internal.view.SupportMenuItem setActionView(int):0:0 -> setActionView
    1:1:android.view.MenuItem setActionView(int):0 -> setActionView
    1:1:androidx.core.internal.view.SupportMenuItem setContentDescription(java.lang.CharSequence):0:0 -> setContentDescription
    1:1:android.view.MenuItem setContentDescription(java.lang.CharSequence):0 -> setContentDescription
    1:1:androidx.core.internal.view.SupportMenuItem setShowAsActionFlags(int):0:0 -> setShowAsActionFlags
    1:1:android.view.MenuItem setShowAsActionFlags(int):0 -> setShowAsActionFlags
    1:1:androidx.core.internal.view.SupportMenuItem setTooltipText(java.lang.CharSequence):0:0 -> setTooltipText
    1:1:android.view.MenuItem setTooltipText(java.lang.CharSequence):0 -> setTooltipText
androidx.appcompat.view.menu.MenuItemImpl$1 -> androidx.appcompat.view.menu.t:
    androidx.appcompat.view.menu.MenuItemImpl this$0 -> a
androidx.appcompat.view.menu.MenuItemWrapperICS -> androidx.appcompat.view.menu.z:
    java.lang.reflect.Method mSetExclusiveCheckableMethod -> e
    androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.view.ActionProvider) -> a
    void setExclusiveCheckable(boolean) -> a
    1:1:android.view.View androidx.appcompat.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper.getWrappedView():0:0 -> getActionView
    1:1:android.view.View getActionView():0 -> getActionView
androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper -> androidx.appcompat.view.menu.v:
    android.view.ActionProvider mInner -> b
    androidx.appcompat.view.menu.MenuItemWrapperICS this$0 -> c
    boolean hasSubMenu() -> a
    android.view.View onCreateActionView() -> c
androidx.appcompat.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper -> androidx.appcompat.view.menu.w:
    android.view.CollapsibleActionView mWrappedView -> b
    void onActionViewExpanded() -> a
    void onActionViewCollapsed() -> b
androidx.appcompat.view.menu.MenuItemWrapperICS$OnActionExpandListenerWrapper -> androidx.appcompat.view.menu.x:
    androidx.appcompat.view.menu.MenuItemWrapperICS this$0 -> b
androidx.appcompat.view.menu.MenuItemWrapperICS$OnMenuItemClickListenerWrapper -> androidx.appcompat.view.menu.y:
    androidx.appcompat.view.menu.MenuItemWrapperICS this$0 -> b
androidx.appcompat.view.menu.MenuItemWrapperJB -> androidx.appcompat.view.menu.B:
    androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.view.ActionProvider) -> a
androidx.appcompat.view.menu.MenuItemWrapperJB$ActionProviderWrapperJB -> androidx.appcompat.view.menu.A:
    androidx.core.view.ActionProvider$VisibilityListener mListener -> d
    android.view.View onCreateActionView(android.view.MenuItem) -> a
    void setVisibilityListener(androidx.core.view.ActionProvider$VisibilityListener) -> a
    boolean isVisible() -> b
    boolean overridesItemVisibility() -> d
    1:1:void androidx.appcompat.view.menu.MenuItemImpl$1.onActionProviderVisibilityChanged(boolean):0:0 -> onActionProviderVisibilityChanged
    1:1:void onActionProviderVisibilityChanged(boolean):0 -> onActionProviderVisibilityChanged
androidx.appcompat.view.menu.MenuPopup -> androidx.appcompat.view.menu.C:
    android.graphics.Rect mEpicenterBounds -> b
    void addMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
    boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> a
    void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder) -> a
    int measureIndividualMenuWidth(android.widget.ListAdapter,android.view.ViewGroup,android.content.Context,int) -> a
    void setAnchorView(android.view.View) -> a
    void setEpicenterBounds(android.graphics.Rect) -> a
    void setGravity(int) -> a
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> b
    void setForceShowIcon(boolean) -> b
    void setHorizontalOffset(int) -> b
    boolean shouldPreserveIconSpacing(androidx.appcompat.view.menu.MenuBuilder) -> b
    void setShowTitle(boolean) -> c
    void setVerticalOffset(int) -> c
    boolean closeMenuOnSubMenuOpened() -> e
    android.graphics.Rect getEpicenterBounds() -> f
    1:1:androidx.appcompat.view.menu.MenuAdapter toMenuAdapter(android.widget.ListAdapter):0:0 -> onItemClick
    1:1:void onItemClick(android.widget.AdapterView,android.view.View,int,long):0 -> onItemClick
    2:2:void onItemClick(android.widget.AdapterView,android.view.View,int,long):0:0 -> onItemClick
androidx.appcompat.view.menu.MenuPopupHelper -> androidx.appcompat.view.menu.E:
    android.content.Context mContext -> a
    androidx.appcompat.view.menu.MenuBuilder mMenu -> b
    int mDropDownGravity -> g
    int mPopupStyleAttr -> d
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> k
    int mPopupStyleRes -> e
    boolean mForceShowIcon -> h
    androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback -> i
    android.widget.PopupWindow$OnDismissListener mInternalOnDismissListener -> l
    boolean mOverflowOnly -> c
    android.view.View mAnchorView -> f
    androidx.appcompat.view.menu.MenuPopup mPopup -> j
    void dismiss() -> a
    void setAnchorView(android.view.View) -> a
    void setForceShowIcon(boolean) -> a
    void setGravity(int) -> a
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    void setPresenterCallback(androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    void showPopup(int,int,boolean,boolean) -> a
    boolean tryShow(int,int) -> a
    1:1:androidx.appcompat.view.menu.MenuPopup createPopup():0:0 -> b
    1:1:androidx.appcompat.view.menu.MenuPopup getPopup():0 -> b
    2:2:androidx.appcompat.view.menu.MenuPopup getPopup():0:0 -> b
    boolean isShowing() -> c
    void onDismiss() -> d
    boolean tryShow() -> e
androidx.appcompat.view.menu.MenuPopupHelper$1 -> androidx.appcompat.view.menu.D:
    androidx.appcompat.view.menu.MenuPopupHelper this$0 -> b
androidx.appcompat.view.menu.MenuPresenter -> androidx.appcompat.view.menu.G:
    boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> a
    boolean flagActionItems() -> a
    void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder) -> a
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder) -> a
    void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    void updateMenuView(boolean) -> a
    boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> b
androidx.appcompat.view.menu.MenuPresenter$Callback -> androidx.appcompat.view.menu.F:
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
androidx.appcompat.view.menu.MenuView -> androidx.appcompat.view.menu.I:
    void initialize(androidx.appcompat.view.menu.MenuBuilder) -> a
androidx.appcompat.view.menu.MenuView$ItemView -> androidx.appcompat.view.menu.H:
    void initialize(androidx.appcompat.view.menu.MenuItemImpl,int) -> a
    boolean prefersCondensedTitle() -> e
    androidx.appcompat.view.menu.MenuItemImpl getItemData() -> f
androidx.appcompat.view.menu.MenuWrapperFactory -> androidx.appcompat.view.menu.J:
    android.view.Menu wrapSupportMenu(android.content.Context,androidx.core.internal.view.SupportMenu) -> a
    android.view.MenuItem wrapSupportMenuItem(android.content.Context,androidx.core.internal.view.SupportMenuItem) -> a
androidx.appcompat.view.menu.MenuWrapperICS -> androidx.appcompat.view.menu.K:
androidx.appcompat.view.menu.ShowableListMenu -> androidx.appcompat.view.menu.L:
    boolean isShowing() -> b
    android.widget.ListView getListView() -> c
    void show() -> d
androidx.appcompat.view.menu.StandardMenuPopup -> androidx.appcompat.view.menu.O:
    androidx.appcompat.view.menu.MenuPresenter$Callback mPresenterCallback -> p
    android.content.Context mContext -> c
    androidx.appcompat.view.menu.MenuBuilder mMenu -> d
    android.widget.PopupWindow$OnDismissListener mOnDismissListener -> m
    int mPopupStyleAttr -> h
    int mPopupStyleRes -> i
    android.view.ViewTreeObserver mTreeObserver -> q
    int mPopupMaxWidth -> g
    boolean mShowTitle -> v
    boolean mWasDismissed -> r
    boolean mHasContentWidth -> s
    androidx.appcompat.widget.MenuPopupWindow mPopup -> j
    android.view.View$OnAttachStateChangeListener mAttachStateChangeListener -> l
    android.view.View mShownAnchorView -> o
    android.view.View mAnchorView -> n
    android.view.ViewTreeObserver$OnGlobalLayoutListener mGlobalLayoutListener -> k
    boolean mOverflowOnly -> f
    int mContentWidth -> t
    int mDropDownGravity -> u
    androidx.appcompat.view.menu.MenuAdapter mAdapter -> e
    void addMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
    boolean flagActionItems() -> a
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder) -> a
    void setAnchorView(android.view.View) -> a
    void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    void setGravity(int) -> a
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    void updateMenuView(boolean) -> a
    boolean isShowing() -> b
    void setForceShowIcon(boolean) -> b
    void setHorizontalOffset(int) -> b
    android.widget.ListView getListView() -> c
    void setShowTitle(boolean) -> c
    void setVerticalOffset(int) -> c
    1:1:boolean tryShow():0:0 -> d
    1:1:void show():0 -> d
    2:2:java.lang.CharSequence androidx.appcompat.view.menu.MenuBuilder.getHeaderTitle():0:0 -> d
    2:2:boolean tryShow():0 -> d
    2:2:void show():0 -> d
    3:3:boolean tryShow():0:0 -> d
    3:3:void show():0 -> d
    4:4:java.lang.CharSequence androidx.appcompat.view.menu.MenuBuilder.getHeaderTitle():0:0 -> d
    4:4:boolean tryShow():0 -> d
    4:4:void show():0 -> d
    5:5:boolean tryShow():0:0 -> d
    5:5:void show():0 -> d
    6:6:void show():0:0 -> d
    1:1:void androidx.appcompat.view.menu.MenuBuilder.close():0:0 -> onDismiss
    1:1:void onDismiss():0 -> onDismiss
    2:2:void onDismiss():0:0 -> onDismiss
androidx.appcompat.view.menu.StandardMenuPopup$1 -> androidx.appcompat.view.menu.M:
    androidx.appcompat.view.menu.StandardMenuPopup this$0 -> b
androidx.appcompat.view.menu.StandardMenuPopup$2 -> androidx.appcompat.view.menu.N:
    androidx.appcompat.view.menu.StandardMenuPopup this$0 -> b
androidx.appcompat.view.menu.SubMenuBuilder -> androidx.appcompat.view.menu.P:
    androidx.appcompat.view.menu.MenuBuilder mParentMenu -> B
    androidx.appcompat.view.menu.MenuItemImpl mItem -> C
    boolean collapseItemActionView(androidx.appcompat.view.menu.MenuItemImpl) -> a
    boolean dispatchMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback) -> a
    boolean expandItemActionView(androidx.appcompat.view.menu.MenuItemImpl) -> b
    java.lang.String getActionViewStatesKey() -> d
    androidx.appcompat.view.menu.MenuBuilder getRootMenu() -> i
    boolean isGroupDividerEnabled() -> k
    boolean isQwertyMode() -> l
    boolean isShortcutsVisible() -> m
    android.view.Menu getParentMenu() -> r
androidx.appcompat.view.menu.SubMenuWrapperICS -> androidx.appcompat.view.menu.Q:
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> clearHeader
    1:1:void clearHeader():0 -> clearHeader
    2:2:void clearHeader():0:0 -> clearHeader
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> getItem
    1:1:android.view.MenuItem getItem():0 -> getItem
    2:2:android.view.MenuItem getItem():0:0 -> getItem
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderIcon
    1:1:android.view.SubMenu setHeaderIcon(int):0 -> setHeaderIcon
    2:2:android.view.SubMenu setHeaderIcon(int):0:0 -> setHeaderIcon
    3:3:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderIcon
    3:3:android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable):0 -> setHeaderIcon
    4:4:android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable):0:0 -> setHeaderIcon
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderTitle
    1:1:android.view.SubMenu setHeaderTitle(int):0 -> setHeaderTitle
    2:2:android.view.SubMenu setHeaderTitle(int):0:0 -> setHeaderTitle
    3:3:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderTitle
    3:3:android.view.SubMenu setHeaderTitle(java.lang.CharSequence):0 -> setHeaderTitle
    4:4:android.view.SubMenu setHeaderTitle(java.lang.CharSequence):0:0 -> setHeaderTitle
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setHeaderView
    1:1:android.view.SubMenu setHeaderView(android.view.View):0 -> setHeaderView
    2:2:android.view.SubMenu setHeaderView(android.view.View):0:0 -> setHeaderView
    1:1:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setIcon
    1:1:android.view.SubMenu setIcon(int):0 -> setIcon
    2:2:android.view.SubMenu setIcon(int):0:0 -> setIcon
    3:3:androidx.core.internal.view.SupportSubMenu getWrappedObject():0:0 -> setIcon
    3:3:android.view.SubMenu setIcon(android.graphics.drawable.Drawable):0 -> setIcon
    4:4:android.view.SubMenu setIcon(android.graphics.drawable.Drawable):0:0 -> setIcon
androidx.appcompat.widget.AbsActionBarView -> androidx.appcompat.widget.b:
    androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener mVisAnimListener -> b
    android.content.Context mPopupContext -> c
    androidx.appcompat.widget.ActionMenuView mMenuView -> d
    boolean mEatingHover -> i
    androidx.appcompat.widget.ActionMenuPresenter mActionMenuPresenter -> e
    int mContentHeight -> f
    androidx.core.view.ViewPropertyAnimatorCompat mVisibilityAnim -> g
    boolean mEatingTouch -> h
    void access$001(androidx.appcompat.widget.AbsActionBarView,int) -> a
    int measureChildView(android.view.View,int,int,int) -> a
    int positionChild(android.view.View,int,int,int,boolean) -> a
    void setContentHeight(int) -> a
    void access$101(androidx.appcompat.widget.AbsActionBarView,int) -> b
androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener -> androidx.appcompat.widget.a:
    boolean mCanceled -> a
    int mFinalVisibility -> b
    androidx.appcompat.widget.AbsActionBarView this$0 -> c
    void onAnimationEnd(android.view.View) -> a
    androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(androidx.core.view.ViewPropertyAnimatorCompat,int) -> a
    void onAnimationStart(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
androidx.appcompat.widget.ActionBarBackgroundDrawable -> androidx.appcompat.widget.c:
    androidx.appcompat.widget.ActionBarContainer mContainer -> a
androidx.appcompat.widget.ActionBarContainer -> androidx.appcompat.widget.ActionBarContainer:
    android.graphics.drawable.Drawable mBackground -> f
    android.graphics.drawable.Drawable mStackedBackground -> g
    boolean mIsSplit -> i
    android.graphics.drawable.Drawable mSplitBackground -> h
    boolean mIsStacked -> j
    int mHeight -> k
    android.view.View mTabContainer -> c
    android.view.View mContextView -> e
    boolean mIsTransitioning -> b
    android.view.View mActionBarView -> d
    int getMeasuredHeightWithMargins(android.view.View) -> a
    android.view.View getTabContainer() -> a
    void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView) -> a
    void setTransitioning(boolean) -> a
    boolean isCollapsed(android.view.View) -> b
androidx.appcompat.widget.ActionBarContextView -> androidx.appcompat.widget.ActionBarContextView:
    android.widget.TextView mTitleView -> o
    android.widget.TextView mSubtitleView -> p
    android.view.View mCustomView -> m
    android.widget.LinearLayout mTitleLayout -> n
    android.view.View mClose -> l
    int mCloseItemLayout -> t
    int mSubtitleStyleRes -> r
    java.lang.CharSequence mTitle -> j
    boolean mTitleOptional -> s
    java.lang.CharSequence mSubtitle -> k
    int mTitleStyleRes -> q
    void closeMode() -> a
    void initForMode(androidx.appcompat.view.ActionMode) -> a
    void setContentHeight(int) -> a
    void setCustomView(android.view.View) -> a
    void setSubtitle(java.lang.CharSequence) -> a
    void setTitleOptional(boolean) -> a
    1:1:androidx.core.view.ViewPropertyAnimatorCompat androidx.appcompat.widget.AbsActionBarView.setupAnimatorToVisibility(int,long):0:0 -> a
    1:1:androidx.core.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long):0 -> a
    java.lang.CharSequence getSubtitle() -> b
    void setTitle(java.lang.CharSequence) -> b
    java.lang.CharSequence getTitle() -> c
    boolean isTitleOptional() -> d
    void killMode() -> e
    boolean showOverflowMenu() -> f
    void initTitle() -> g
    1:1:boolean androidx.appcompat.widget.ActionMenuPresenter.hideSubMenus():0:0 -> onDetachedFromWindow
    1:1:void onDetachedFromWindow():0 -> onDetachedFromWindow
androidx.appcompat.widget.ActionBarContextView$1 -> androidx.appcompat.widget.d:
    androidx.appcompat.view.ActionMode val$mode -> b
androidx.appcompat.widget.ActionBarOverlayLayout -> androidx.appcompat.widget.ActionBarOverlayLayout:
    int mLastSystemUiVisibility -> n
    androidx.core.view.NestedScrollingParentHelper mParentHelper -> B
    android.graphics.drawable.Drawable mWindowContentOverlay -> g
    boolean mOverlayMode -> i
    boolean mHideOnContentScroll -> k
    androidx.appcompat.widget.ContentFrameLayout mContent -> d
    java.lang.Runnable mRemoveActionBarHideOffset -> z
    int mActionBarHeight -> b
    android.graphics.Rect mLastBaseContentInsets -> p
    int[] ATTRS -> C
    android.animation.AnimatorListenerAdapter mTopAnimatorListener -> y
    androidx.appcompat.widget.DecorToolbar mDecorToolbar -> f
    boolean mIgnoreWindowContentOverlay -> h
    android.graphics.Rect mInnerInsets -> t
    androidx.appcompat.widget.ActionBarContainer mActionBarTop -> e
    android.graphics.Rect mBaseInnerInsets -> r
    int mHideOnContentScrollReference -> m
    android.view.ViewPropertyAnimator mCurrentActionBarTopAnimator -> x
    boolean mHasNonEmbeddedTabs -> j
    boolean mAnimatingForFling -> l
    java.lang.Runnable mAddActionBarHideOffset -> A
    int mWindowVisibility -> c
    android.graphics.Rect mBaseContentInsets -> o
    androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback mActionBarVisibilityCallback -> v
    android.graphics.Rect mLastInnerInsets -> u
    android.widget.OverScroller mFlingEstimator -> w
    android.graphics.Rect mLastBaseInnerInsets -> s
    android.graphics.Rect mContentInsets -> q
    boolean applyInsets(android.view.View,android.graphics.Rect,boolean,boolean,boolean,boolean) -> a
    void init(android.content.Context) -> a
    void initFeature(int) -> a
    void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback) -> a
    void setHasNonEmbeddedTabs(boolean) -> a
    void setMenu(android.view.Menu,androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    1:1:void androidx.appcompat.widget.ToolbarWidgetWrapper.setWindowCallback(android.view.Window$Callback):0:0 -> a
    1:1:void setWindowCallback(android.view.Window$Callback):0 -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    2:2:boolean androidx.appcompat.widget.ToolbarWidgetWrapper.showOverflowMenu():0:0 -> a
    2:2:boolean showOverflowMenu():0 -> a
    1:1:void androidx.appcompat.widget.ToolbarWidgetWrapper.dismissPopupMenus():0:0 -> b
    1:1:void dismissPopups():0 -> b
    void setActionBarHideOffset(int) -> b
    void setHideOnContentScrollEnabled(boolean) -> b
    1:1:boolean androidx.appcompat.widget.ToolbarWidgetWrapper.isOverflowMenuShowPending():0:0 -> c
    1:1:boolean isOverflowMenuShowPending():0 -> c
    void setOverlayMode(boolean) -> c
    1:1:void androidx.appcompat.widget.ToolbarWidgetWrapper.setMenuPrepared():0:0 -> d
    1:1:void setMenuPrepared():0 -> d
    1:1:boolean androidx.appcompat.widget.ToolbarWidgetWrapper.isOverflowMenuShowing():0:0 -> e
    1:1:boolean isOverflowMenuShowing():0 -> e
    1:1:boolean androidx.appcompat.widget.ToolbarWidgetWrapper.canShowOverflowMenu():0:0 -> f
    1:1:boolean canShowOverflowMenu():0 -> f
    1:1:boolean androidx.appcompat.widget.ToolbarWidgetWrapper.hideOverflowMenu():0:0 -> g
    1:1:boolean hideOverflowMenu():0 -> g
    int getActionBarHideOffset() -> h
    void haltActionBarHideOffsetAnimations() -> i
    boolean isInOverlayMode() -> j
    1:1:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> k
    1:1:void pullChildren():0 -> k
    2:2:void pullChildren():0:0 -> k
    3:3:androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View):0:0 -> k
    3:3:void pullChildren():0 -> k
    void setShowingForActionMode(boolean) -> l
    1:1:boolean shouldHideActionBarOnFling(float,float):0:0 -> onNestedFling
    1:1:boolean onNestedFling(android.view.View,float,float,boolean):0 -> onNestedFling
    2:2:void addActionBarHideOffset():0:0 -> onNestedFling
    2:2:boolean onNestedFling(android.view.View,float,float,boolean):0 -> onNestedFling
    3:3:void removeActionBarHideOffset():0:0 -> onNestedFling
    3:3:boolean onNestedFling(android.view.View,float,float,boolean):0 -> onNestedFling
    4:4:boolean onNestedFling(android.view.View,float,float,boolean):0:0 -> onNestedFling
    1:1:void androidx.core.view.NestedScrollingParentHelper.onNestedScrollAccepted(android.view.View,android.view.View,int):0:0 -> onNestedScrollAccepted
    1:1:void onNestedScrollAccepted(android.view.View,android.view.View,int):0 -> onNestedScrollAccepted
    2:2:void onNestedScrollAccepted(android.view.View,android.view.View,int):0:0 -> onNestedScrollAccepted
    1:1:void postRemoveActionBarHideOffset():0:0 -> onStopNestedScroll
    1:1:void onStopNestedScroll(android.view.View):0 -> onStopNestedScroll
    2:2:void postAddActionBarHideOffset():0:0 -> onStopNestedScroll
    2:2:void onStopNestedScroll(android.view.View):0 -> onStopNestedScroll
    3:3:void onStopNestedScroll(android.view.View):0:0 -> onStopNestedScroll
androidx.appcompat.widget.ActionBarOverlayLayout$1 -> androidx.appcompat.widget.e:
    androidx.appcompat.widget.ActionBarOverlayLayout this$0 -> a
androidx.appcompat.widget.ActionBarOverlayLayout$2 -> androidx.appcompat.widget.f:
    androidx.appcompat.widget.ActionBarOverlayLayout this$0 -> b
androidx.appcompat.widget.ActionBarOverlayLayout$3 -> androidx.appcompat.widget.g:
    androidx.appcompat.widget.ActionBarOverlayLayout this$0 -> b
androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback -> androidx.appcompat.widget.h:
androidx.appcompat.widget.ActionBarOverlayLayout$LayoutParams -> androidx.appcompat.widget.i:
androidx.appcompat.widget.ActionMenuPresenter -> androidx.appcompat.widget.q:
    boolean mReserveOverflow -> m
    boolean mReserveOverflowSet -> n
    int mWidthLimit -> o
    android.view.View mScrapActionButtonView -> x
    boolean mPendingOverflowIconSet -> l
    boolean mExpandedActionViewsExclusive -> u
    androidx.appcompat.widget.ActionMenuPresenter$ActionButtonSubmenu mActionButtonPopup -> z
    android.util.SparseBooleanArray mActionButtonGroups -> w
    int mOpenSubMenuId -> D
    androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback mPopupPresenterCallback -> C
    boolean mMaxItemsSet -> r
    androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback mPopupCallback -> B
    boolean mStrictWidthLimit -> s
    androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton mOverflowButton -> j
    boolean mWidthLimitSet -> t
    androidx.appcompat.widget.ActionMenuPresenter$OverflowPopup mOverflowPopup -> y
    android.graphics.drawable.Drawable mPendingOverflowIcon -> k
    int mMinCellSize -> v
    androidx.appcompat.widget.ActionMenuPresenter$OpenOverflowRunnable mPostedOpenRunnable -> A
    int mActionItemWidthLimit -> p
    int mMaxItems -> q
    androidx.appcompat.view.menu.MenuBuilder access$000(androidx.appcompat.widget.ActionMenuPresenter) -> a
    void bindItemView(androidx.appcompat.view.menu.MenuItemImpl,androidx.appcompat.view.menu.MenuView$ItemView) -> a
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    boolean flagActionItems() -> a
    android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    1:1:boolean androidx.appcompat.view.ActionBarPolicy.showsOverflowMenuButton():0:0 -> a
    1:1:void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder):0 -> a
    2:2:void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder):0:0 -> a
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    3:3:android.view.View findViewForItem(android.view.MenuItem):0:0 -> a
    3:3:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0 -> a
    4:4:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0:0 -> a
    5:5:void androidx.appcompat.view.menu.MenuPopupHelper.show():0:0 -> a
    5:5:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0 -> a
    6:6:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0:0 -> a
    7:7:void androidx.appcompat.view.menu.MenuPopupHelper.show():0:0 -> a
    7:7:boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder):0 -> a
    void setMenuView(androidx.appcompat.widget.ActionMenuView) -> a
    boolean shouldIncludeItem(int,androidx.appcompat.view.menu.MenuItemImpl) -> a
    void updateMenuView(boolean) -> a
    androidx.appcompat.view.menu.MenuBuilder access$100(androidx.appcompat.widget.ActionMenuPresenter) -> b
    void setExpandedActionViewsExclusive(boolean) -> b
    androidx.appcompat.view.menu.MenuView access$200(androidx.appcompat.widget.ActionMenuPresenter) -> c
    1:1:boolean hideSubMenus():0:0 -> c
    1:1:boolean dismissPopupMenus():0 -> c
    void setReserveOverflow(boolean) -> c
    androidx.appcompat.view.menu.MenuBuilder access$300(androidx.appcompat.widget.ActionMenuPresenter) -> d
    boolean hideOverflowMenu() -> d
    androidx.appcompat.view.menu.MenuBuilder access$400(androidx.appcompat.widget.ActionMenuPresenter) -> e
    boolean isOverflowMenuShowing() -> e
    androidx.appcompat.view.menu.MenuView access$500(androidx.appcompat.widget.ActionMenuPresenter) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> f
    boolean showOverflowMenu() -> g
androidx.appcompat.widget.ActionMenuPresenter$ActionButtonSubmenu -> androidx.appcompat.widget.j:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> m
    1:1:void androidx.appcompat.view.menu.MenuPopupHelper.<init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder,android.view.View,boolean,int):0:0 -> <init>
    1:1:void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context,androidx.appcompat.view.menu.SubMenuBuilder,android.view.View):0 -> <init>
    2:2:void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context,androidx.appcompat.view.menu.SubMenuBuilder,android.view.View):0:0 -> <init>
    void onDismiss() -> d
androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback -> androidx.appcompat.widget.k:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> a
    androidx.appcompat.view.menu.ShowableListMenu getPopup() -> a
androidx.appcompat.widget.ActionMenuPresenter$OpenOverflowRunnable -> androidx.appcompat.widget.l:
    androidx.appcompat.widget.ActionMenuPresenter$OverflowPopup mPopup -> b
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> c
androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton -> androidx.appcompat.widget.n:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> d
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton$1 -> androidx.appcompat.widget.m:
    androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton this$1 -> k
    androidx.appcompat.view.menu.ShowableListMenu getPopup() -> a
    boolean onForwardingStarted() -> b
    boolean onForwardingStopped() -> c
androidx.appcompat.widget.ActionMenuPresenter$OverflowPopup -> androidx.appcompat.widget.o:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> m
    1:1:void androidx.appcompat.view.menu.MenuPopupHelper.<init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder,android.view.View,boolean,int):0:0 -> <init>
    1:1:void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context,androidx.appcompat.view.menu.MenuBuilder,android.view.View,boolean):0 -> <init>
    2:2:void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context,androidx.appcompat.view.menu.MenuBuilder,android.view.View,boolean):0:0 -> <init>
    1:1:void androidx.appcompat.view.menu.MenuBuilder.close():0:0 -> d
    1:1:void onDismiss():0 -> d
    2:2:void onDismiss():0:0 -> d
androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback -> androidx.appcompat.widget.p:
    androidx.appcompat.widget.ActionMenuPresenter this$0 -> b
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder) -> a
androidx.appcompat.widget.ActionMenuView -> androidx.appcompat.widget.ActionMenuView:
    androidx.appcompat.view.menu.MenuBuilder mMenu -> q
    int mGeneratedItemPadding -> x
    androidx.appcompat.widget.ActionMenuPresenter mPresenter -> t
    boolean mFormatItems -> u
    int mFormatItemsWidth -> v
    int mMinCellSize -> w
    int mPopupTheme -> r
    boolean mReserveOverflow -> s
    void initialize(androidx.appcompat.view.menu.MenuBuilder) -> a
    1:1:boolean androidx.appcompat.view.menu.MenuBuilder.performItemAction(android.view.MenuItem,int):0:0 -> a
    1:1:boolean invokeItem(androidx.appcompat.view.menu.MenuItemImpl):0 -> a
    void setMenuCallbacks(androidx.appcompat.view.menu.MenuPresenter$Callback,androidx.appcompat.view.menu.MenuBuilder$Callback) -> a
    void setOnMenuItemClickListener(androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener) -> a
    void setPresenter(androidx.appcompat.widget.ActionMenuPresenter) -> a
    int measureChildForCells(android.view.View,int,int,int,int) -> b
    void setOverflowReserved(boolean) -> b
    boolean hasSupportDividerBeforeChildAt(int) -> e
    void setPopupTheme(int) -> f
    void dismissPopupMenus() -> k
    androidx.appcompat.widget.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams() -> l
    boolean hideOverflowMenu() -> m
    1:1:boolean androidx.appcompat.widget.ActionMenuPresenter.isOverflowMenuShowPending():0:0 -> n
    1:1:boolean isOverflowMenuShowPending():0 -> n
    boolean isOverflowMenuShowing() -> o
    1:1:void onMeasureExactFormat(int,int):0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    boolean isOverflowReserved() -> p
    androidx.appcompat.view.menu.MenuBuilder peekMenu() -> q
    boolean showOverflowMenu() -> r
androidx.appcompat.widget.ActionMenuView$ActionMenuChildView -> androidx.appcompat.widget.r:
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
androidx.appcompat.widget.ActionMenuView$LayoutParams -> androidx.appcompat.widget.s:
    boolean expandable -> f
    int cellsUsed -> d
    boolean preventEdgeOffset -> g
    int extraPixels -> e
    boolean expanded -> h
    boolean isOverflowButton -> c
androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener -> androidx.appcompat.widget.t:
androidx.appcompat.widget.ActivityChooserView$InnerLayout -> androidx.appcompat.widget.ActivityChooserView$InnerLayout:
    int[] TINT_ATTRS -> b
androidx.appcompat.widget.AlertDialogLayout -> androidx.appcompat.widget.AlertDialogLayout:
    int resolveMinimumHeight(android.view.View) -> a
    void forceUniformWidth(int,int) -> c
    1:1:void setChildFrame(android.view.View,int,int,int,int):0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:boolean tryOnMeasure(int,int):0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
androidx.appcompat.widget.AppCompatAutoCompleteTextView -> androidx.appcompat.widget.u:
    int[] TINT_ATTRS -> d
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> c
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
androidx.appcompat.widget.AppCompatBackgroundHelper -> androidx.appcompat.widget.v:
    androidx.appcompat.widget.TintInfo mTmpInfo -> f
    androidx.appcompat.widget.TintInfo mInternalBackgroundTint -> d
    androidx.appcompat.widget.TintInfo mBackgroundTint -> e
    android.view.View mView -> a
    androidx.appcompat.widget.AppCompatDrawableManager mDrawableManager -> b
    int mBackgroundResId -> c
    1:1:boolean shouldApplyFrameworkTintUsingColorFilter():0:0 -> a
    1:1:void applySupportBackgroundTint():0 -> a
    2:2:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0:0 -> a
    2:2:void applySupportBackgroundTint():0 -> a
    3:3:android.graphics.PorterDuff$Mode androidx.core.view.ViewCompat.getBackgroundTintMode(android.view.View):0:0 -> a
    3:3:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0 -> a
    3:3:void applySupportBackgroundTint():0 -> a
    4:4:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0:0 -> a
    4:4:void applySupportBackgroundTint():0 -> a
    5:5:void applySupportBackgroundTint():0:0 -> a
    void loadFromAttributes(android.util.AttributeSet,int) -> a
    void onSetBackgroundResource(int) -> a
    void setInternalBackgroundTint(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> b
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> c
    void onSetBackgroundDrawable(android.graphics.drawable.Drawable) -> d
androidx.appcompat.widget.AppCompatButton -> androidx.appcompat.widget.w:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> c
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
androidx.appcompat.widget.AppCompatCheckBox -> androidx.appcompat.widget.x:
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> c
    androidx.appcompat.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper -> b
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    void setSupportButtonTintList(android.content.res.ColorStateList) -> a
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> a
    1:1:int androidx.appcompat.widget.AppCompatCompoundButtonHelper.getCompoundPaddingLeft(int):0:0 -> getCompoundPaddingLeft
    1:1:int getCompoundPaddingLeft():0 -> getCompoundPaddingLeft
androidx.appcompat.widget.AppCompatCheckedTextView -> androidx.appcompat.widget.y:
    int[] TINT_ATTRS -> c
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> b
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
androidx.appcompat.widget.AppCompatCompoundButtonHelper -> androidx.appcompat.widget.z:
    android.content.res.ColorStateList mButtonTintList -> b
    boolean mHasButtonTintMode -> e
    boolean mSkipNextApply -> f
    android.widget.CompoundButton mView -> a
    android.graphics.PorterDuff$Mode mButtonTintMode -> c
    boolean mHasButtonTint -> d
    void applyButtonTint() -> a
    1:1:void androidx.core.widget.CompoundButtonCompat.setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList):0:0 -> a
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    3:3:void androidx.core.widget.CompoundButtonCompat.setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode):0:0 -> a
    3:3:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    4:4:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    void setSupportButtonTintList(android.content.res.ColorStateList) -> a
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> a
    void onSetButtonDrawable() -> b
androidx.appcompat.widget.AppCompatDrawableManager -> androidx.appcompat.widget.F:
    androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache COLOR_FILTER_CACHE -> i
    androidx.collection.SparseArrayCompat mKnownDrawableIdTags -> c
    android.util.TypedValue mTypedValue -> e
    androidx.appcompat.widget.AppCompatDrawableManager INSTANCE -> h
    android.graphics.PorterDuff$Mode DEFAULT_MODE -> g
    int[] TINT_COLOR_CONTROL_STATE_LIST -> n
    int[] TINT_CHECKABLE_BUTTON_LIST -> o
    boolean mHasCheckedVectorDrawableSetup -> f
    java.util.WeakHashMap mDrawableCaches -> d
    int[] COLORFILTER_TINT_COLOR_CONTROL_NORMAL -> j
    int[] TINT_COLOR_CONTROL_NORMAL -> k
    java.util.WeakHashMap mTintLists -> a
    androidx.collection.ArrayMap mDelegates -> b
    int[] COLORFILTER_COLOR_CONTROL_ACTIVATED -> l
    int[] COLORFILTER_COLOR_BACKGROUND_MULTIPLY -> m
    void addDelegate(java.lang.String,androidx.appcompat.widget.AppCompatDrawableManager$InflateDelegate) -> a
    boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable) -> a
    boolean arrayContains(int[],int) -> a
    1:1:void installDefaultInflateDelegates(androidx.appcompat.widget.AppCompatDrawableManager):0:0 -> a
    1:1:androidx.appcompat.widget.AppCompatDrawableManager get():0 -> a
    2:2:androidx.appcompat.widget.AppCompatDrawableManager get():0:0 -> a
    3:3:java.lang.Object androidx.collection.LongSparseArray.get(long):0:0 -> a
    3:3:android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long):0 -> a
    4:4:android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long):0:0 -> a
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> a
    5:5:void checkVectorDrawableSetup(android.content.Context):0:0 -> a
    5:5:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0 -> a
    6:6:boolean isVectorDrawable(android.graphics.drawable.Drawable):0:0 -> a
    6:6:void checkVectorDrawableSetup(android.content.Context):0 -> a
    6:6:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0 -> a
    7:7:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0:0 -> a
    8:8:void checkVectorDrawableSetup(android.content.Context):0:0 -> a
    8:8:android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean):0 -> a
    android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode) -> a
    void onConfigurationChanged(android.content.Context) -> a
    void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode) -> a
    9:9:android.graphics.PorterDuff$Mode getTintMode(int):0:0 -> a
    9:9:android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable):0 -> a
    10:10:android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable):0:0 -> a
    11:11:android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[]):0:0 -> a
    11:11:void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[]):0 -> a
    12:12:void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[]):0:0 -> a
    boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable) -> a
    android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context) -> b
    1:1:android.content.res.ColorStateList getTintListFromCache(android.content.Context,int):0:0 -> b
    1:1:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    2:2:java.lang.Object androidx.collection.SparseArrayCompat.get(int):0:0 -> b
    2:2:android.content.res.ColorStateList getTintListFromCache(android.content.Context,int):0 -> b
    2:2:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    3:3:android.content.res.ColorStateList getTintListFromCache(android.content.Context,int):0:0 -> b
    3:3:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    4:4:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> b
    5:5:android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context):0:0 -> b
    5:5:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    6:6:android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context):0:0 -> b
    6:6:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    7:7:android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context):0:0 -> b
    7:7:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    8:8:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> b
    9:9:void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList):0:0 -> b
    9:9:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    10:10:void androidx.collection.SparseArrayCompat.<init>():0:0 -> b
    10:10:void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList):0 -> b
    10:10:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    11:11:void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList):0:0 -> b
    11:11:android.content.res.ColorStateList getTintList(android.content.Context,int):0 -> b
    12:12:android.content.res.ColorStateList getTintList(android.content.Context,int):0:0 -> b
    android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int) -> c
    1:1:long createCacheKey(android.util.TypedValue):0:0 -> d
    1:1:android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int):0 -> d
    2:2:android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int):0:0 -> d
    1:1:java.lang.Object androidx.collection.SparseArrayCompat.get(int):0:0 -> e
    1:1:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0 -> e
    2:2:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0:0 -> e
    3:3:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> e
    3:3:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0 -> e
    4:4:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0:0 -> e
    5:5:void androidx.collection.SparseArrayCompat.<init>():0:0 -> e
    5:5:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0 -> e
    6:6:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0:0 -> e
    7:7:long createCacheKey(android.util.TypedValue):0:0 -> e
    7:7:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0 -> e
    8:8:android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int):0:0 -> e
androidx.appcompat.widget.AppCompatDrawableManager$AsldcInflateDelegate -> androidx.appcompat.widget.A:
    android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme) -> a
androidx.appcompat.widget.AppCompatDrawableManager$AvdcInflateDelegate -> androidx.appcompat.widget.B:
    android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme) -> a
androidx.appcompat.widget.AppCompatDrawableManager$ColorFilterLruCache -> androidx.appcompat.widget.C:
    1:1:int generateCacheKey(int,android.graphics.PorterDuff$Mode):0:0 -> a
    1:1:android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode):0 -> a
    2:2:android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode):0:0 -> a
    3:3:int generateCacheKey(int,android.graphics.PorterDuff$Mode):0:0 -> a
    3:3:android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter):0 -> a
    4:4:android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter):0:0 -> a
androidx.appcompat.widget.AppCompatDrawableManager$InflateDelegate -> androidx.appcompat.widget.D:
    android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme) -> a
androidx.appcompat.widget.AppCompatDrawableManager$VdcInflateDelegate -> androidx.appcompat.widget.E:
    android.graphics.drawable.Drawable createFromXmlInner(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme) -> a
androidx.appcompat.widget.AppCompatEditText -> androidx.appcompat.widget.G:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> c
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
androidx.appcompat.widget.AppCompatImageButton -> androidx.appcompat.widget.H:
    androidx.appcompat.widget.AppCompatImageHelper mImageHelper -> c
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
    void setSupportImageTintList(android.content.res.ColorStateList) -> b
    void setSupportImageTintMode(android.graphics.PorterDuff$Mode) -> b
    android.graphics.PorterDuff$Mode getSupportImageTintMode() -> e
    android.content.res.ColorStateList getSupportImageTintList() -> f
androidx.appcompat.widget.AppCompatImageHelper -> androidx.appcompat.widget.I:
    androidx.appcompat.widget.TintInfo mTmpInfo -> d
    android.widget.ImageView mView -> a
    androidx.appcompat.widget.TintInfo mInternalImageTint -> b
    androidx.appcompat.widget.TintInfo mImageTint -> c
    1:1:boolean shouldApplyFrameworkTintUsingColorFilter():0:0 -> a
    1:1:void applySupportImageTint():0 -> a
    2:2:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0:0 -> a
    2:2:void applySupportImageTint():0 -> a
    3:3:android.content.res.ColorStateList androidx.core.widget.ImageViewCompat.getImageTintList(android.widget.ImageView):0:0 -> a
    3:3:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0 -> a
    3:3:void applySupportImageTint():0 -> a
    4:4:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0:0 -> a
    4:4:void applySupportImageTint():0 -> a
    5:5:android.graphics.PorterDuff$Mode androidx.core.widget.ImageViewCompat.getImageTintMode(android.widget.ImageView):0:0 -> a
    5:5:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0 -> a
    5:5:void applySupportImageTint():0 -> a
    6:6:boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable):0:0 -> a
    6:6:void applySupportImageTint():0 -> a
    7:7:void applySupportImageTint():0:0 -> a
    8:8:void androidx.core.widget.ImageViewCompat.setImageTintList(android.widget.ImageView,android.content.res.ColorStateList):0:0 -> a
    8:8:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    9:9:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    10:10:void androidx.core.widget.ImageViewCompat.setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode):0:0 -> a
    10:10:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    11:11:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    void setImageResource(int) -> a
    void setSupportImageTintList(android.content.res.ColorStateList) -> a
    void setSupportImageTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportImageTintList() -> b
    android.graphics.PorterDuff$Mode getSupportImageTintMode() -> c
    boolean hasOverlappingRendering() -> d
androidx.appcompat.widget.AppCompatImageView -> androidx.appcompat.widget.J:
    androidx.appcompat.widget.AppCompatImageHelper mImageHelper -> c
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
    void setSupportImageTintList(android.content.res.ColorStateList) -> b
    void setSupportImageTintMode(android.graphics.PorterDuff$Mode) -> b
    android.graphics.PorterDuff$Mode getSupportImageTintMode() -> e
    android.content.res.ColorStateList getSupportImageTintList() -> f
androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView -> androidx.appcompat.widget.K:
    int[] TINT_ATTRS -> d
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> c
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
androidx.appcompat.widget.AppCompatPopupWindow -> androidx.appcompat.widget.L:
    boolean mOverlapAnchor -> a
    boolean COMPAT_OVERLAP_ANCHOR -> b
    1:1:void init(android.content.Context,android.util.AttributeSet,int,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int,int):0 -> <init>
    2:2:void setSupportOverlapAnchor(boolean):0:0 -> <init>
    2:2:void init(android.content.Context,android.util.AttributeSet,int,int):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int,int):0 -> <init>
    3:3:void init(android.content.Context,android.util.AttributeSet,int,int):0:0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet,int,int):0 -> <init>
androidx.appcompat.widget.AppCompatProgressBarHelper -> androidx.appcompat.widget.M:
    android.widget.ProgressBar mView -> a
    android.graphics.Bitmap mSampleTile -> b
    int[] TINT_ATTRS -> c
    android.graphics.Bitmap getSampleTime() -> a
    1:1:android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable):0:0 -> a
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    3:3:android.graphics.drawable.shapes.Shape getDrawableShape():0:0 -> a
    3:3:android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean):0 -> a
    4:4:android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean):0:0 -> a
androidx.appcompat.widget.AppCompatRadioButton -> androidx.appcompat.widget.N:
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> c
    androidx.appcompat.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper -> b
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    void setSupportButtonTintList(android.content.res.ColorStateList) -> a
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> a
    1:1:int androidx.appcompat.widget.AppCompatCompoundButtonHelper.getCompoundPaddingLeft(int):0:0 -> getCompoundPaddingLeft
    1:1:int getCompoundPaddingLeft():0 -> getCompoundPaddingLeft
androidx.appcompat.widget.AppCompatRatingBar -> androidx.appcompat.widget.O:
    androidx.appcompat.widget.AppCompatProgressBarHelper mAppCompatProgressBarHelper -> b
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
androidx.appcompat.widget.AppCompatSeekBar -> androidx.appcompat.widget.P:
    androidx.appcompat.widget.AppCompatSeekBarHelper mAppCompatSeekBarHelper -> b
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
androidx.appcompat.widget.AppCompatSeekBarHelper -> androidx.appcompat.widget.Q:
    android.graphics.drawable.Drawable mTickMark -> e
    boolean mHasTickMarkTintMode -> i
    android.content.res.ColorStateList mTickMarkTintList -> f
    android.graphics.PorterDuff$Mode mTickMarkTintMode -> g
    boolean mHasTickMarkTint -> h
    android.widget.SeekBar mView -> d
    void drawTickMarks(android.graphics.Canvas) -> a
    1:1:void setTickMark(android.graphics.drawable.Drawable):0:0 -> a
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    void drawableStateChanged() -> b
    void jumpDrawablesToCurrentState() -> c
    void applyTickMarkTint() -> d
androidx.appcompat.widget.AppCompatSpinner -> androidx.appcompat.widget.Y:
    android.content.Context mPopupContext -> c
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup mPopup -> g
    androidx.appcompat.widget.ForwardingListener mForwardingListener -> d
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    int mDropDownWidth -> h
    android.graphics.Rect mTempRect -> i
    boolean mPopupSet -> f
    int[] ATTRS_ANDROID_SPINNERMODE -> j
    android.widget.SpinnerAdapter mTempAdapter -> e
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int,int):0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet):0 -> <init>
    int compatMeasureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable) -> a
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
    1:1:void androidx.appcompat.widget.ListPopupWindow.setBackgroundDrawable(android.graphics.drawable.Drawable):0:0 -> setPopupBackgroundDrawable
    1:1:void setPopupBackgroundDrawable(android.graphics.drawable.Drawable):0 -> setPopupBackgroundDrawable
    2:2:void setPopupBackgroundDrawable(android.graphics.drawable.Drawable):0:0 -> setPopupBackgroundDrawable
androidx.appcompat.widget.AppCompatSpinner$1 -> androidx.appcompat.widget.S:
    androidx.appcompat.widget.AppCompatSpinner this$0 -> l
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup val$popup -> k
    androidx.appcompat.view.menu.ShowableListMenu getPopup() -> a
    boolean onForwardingStarted() -> b
androidx.appcompat.widget.AppCompatSpinner$DropDownAdapter -> androidx.appcompat.widget.T:
    android.widget.SpinnerAdapter mAdapter -> a
    android.widget.ListAdapter mListAdapter -> b
    1:1:android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup):0:0 -> getView
    1:1:android.view.View getView(int,android.view.View,android.view.ViewGroup):0 -> getView
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup -> androidx.appcompat.widget.X:
    androidx.appcompat.widget.AppCompatSpinner this$0 -> M
    android.graphics.Rect mVisibleRect -> L
    android.widget.ListAdapter mAdapter -> K
    java.lang.CharSequence mHintText -> J
    1:1:void androidx.appcompat.widget.ListPopupWindow.<init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:void <init>(androidx.appcompat.widget.AppCompatSpinner,android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:void <init>(androidx.appcompat.widget.AppCompatSpinner,android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    void access$001(androidx.appcompat.widget.AppCompatSpinner$DropdownPopup) -> a
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptText(java.lang.CharSequence) -> a
    boolean isVisibleToUser(android.view.View) -> b
    1:1:void androidx.appcompat.widget.ListPopupWindow.setInputMethodMode(int):0:0 -> d
    1:1:void show():0 -> d
    2:2:void show():0:0 -> d
    3:3:android.widget.ListView androidx.appcompat.widget.ListPopupWindow.getListView():0:0 -> d
    3:3:void show():0 -> d
    4:4:void show():0:0 -> d
    5:5:void androidx.appcompat.widget.ListPopupWindow.setSelection(int):0:0 -> d
    5:5:void show():0 -> d
    6:6:void show():0:0 -> d
    7:7:void androidx.appcompat.widget.ListPopupWindow.setOnDismissListener(android.widget.PopupWindow$OnDismissListener):0:0 -> d
    7:7:void show():0 -> d
    void computeContentWidth() -> j
    java.lang.CharSequence getHintText() -> k
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$1 -> androidx.appcompat.widget.U:
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1 -> b
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$2 -> androidx.appcompat.widget.V:
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1 -> b
androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$3 -> androidx.appcompat.widget.W:
    android.view.ViewTreeObserver$OnGlobalLayoutListener val$layoutListener -> b
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1 -> c
androidx.appcompat.widget.AppCompatTextHelper -> androidx.appcompat.widget.a0:
    androidx.appcompat.widget.TintInfo mDrawableStartTint -> f
    androidx.appcompat.widget.TintInfo mDrawableEndTint -> g
    androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper mAutoSizeTextHelper -> h
    android.widget.TextView mView -> a
    androidx.appcompat.widget.TintInfo mDrawableRightTint -> d
    androidx.appcompat.widget.TintInfo mDrawableBottomTint -> e
    boolean mAsyncFontPending -> k
    int mStyle -> i
    android.graphics.Typeface mFontTypeface -> j
    androidx.appcompat.widget.TintInfo mDrawableLeftTint -> b
    androidx.appcompat.widget.TintInfo mDrawableTopTint -> c
    void applyCompoundDrawableTint(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo) -> a
    void applyCompoundDrawablesTints() -> a
    androidx.appcompat.widget.TintInfo createTintInfo(android.content.Context,androidx.appcompat.widget.AppCompatDrawableManager,int) -> a
    1:1:void setAllCaps(boolean):0:0 -> a
    1:1:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    2:2:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    void onAsyncTypefaceReceived(java.lang.ref.WeakReference,android.graphics.Typeface) -> a
    3:3:void setAllCaps(boolean):0:0 -> a
    3:3:void onSetTextAppearance(android.content.Context,int):0 -> a
    4:4:void onSetTextAppearance(android.content.Context,int):0:0 -> a
    void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int) -> a
    void setAutoSizeTextTypeUniformWithPresetSizes(int[],int) -> a
    void setAutoSizeTextTypeWithDefaults(int) -> a
    5:5:void setTextSizeInternal(int,float):0:0 -> a
    5:5:void setTextSize(int,float):0 -> a
    void updateTypefaceAndStyle(android.content.Context,androidx.appcompat.widget.TintTypedArray) -> a
    void autoSizeText() -> b
    int getAutoSizeMaxTextSize() -> c
    int getAutoSizeMinTextSize() -> d
    int getAutoSizeStepGranularity() -> e
    int[] getAutoSizeTextAvailableSizes() -> f
    int getAutoSizeTextType() -> g
    boolean isAutoSizeEnabled() -> h
    1:1:void autoSizeText():0:0 -> i
    1:1:void onLayout(boolean,int,int,int,int):0 -> i
androidx.appcompat.widget.AppCompatTextHelper$1 -> androidx.appcompat.widget.Z:
    androidx.appcompat.widget.AppCompatTextHelper this$0 -> b
    java.lang.ref.WeakReference val$textViewWeak -> a
    void onFontRetrievalFailed(int) -> a
    void onFontRetrieved(android.graphics.Typeface) -> a
androidx.appcompat.widget.AppCompatTextView -> androidx.appcompat.widget.b0:
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper -> b
    androidx.appcompat.widget.AppCompatTextHelper mTextHelper -> c
    java.util.concurrent.Future mPrecomputedTextFuture -> d
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
    1:1:int androidx.core.widget.TextViewCompat.getFirstBaselineToTopHeight(android.widget.TextView):0:0 -> getFirstBaselineToTopHeight
    1:1:int getFirstBaselineToTopHeight():0 -> getFirstBaselineToTopHeight
    1:1:int androidx.core.widget.TextViewCompat.getLastBaselineToBottomHeight(android.widget.TextView):0:0 -> getLastBaselineToBottomHeight
    1:1:int getLastBaselineToBottomHeight():0 -> getLastBaselineToBottomHeight
    1:1:void consumeTextFutureAndSetBlocking():0:0 -> getText
    1:1:java.lang.CharSequence getText():0 -> getText
    2:2:java.lang.CharSequence getText():0:0 -> getText
    1:1:void consumeTextFutureAndSetBlocking():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper -> androidx.appcompat.widget.c0:
    int[] mAutoSizeTextSizesInPx -> f
    float mAutoSizeMaxTextSizeInPx -> e
    float mAutoSizeMinTextSizeInPx -> d
    float mAutoSizeStepGranularityInPx -> c
    boolean mHasPresetAutoSizeValues -> g
    android.widget.TextView mTextView -> i
    android.content.Context mContext -> j
    java.util.concurrent.ConcurrentHashMap sTextViewMethodByNameCache -> l
    android.graphics.RectF TEMP_RECTF -> k
    boolean mNeedsAutoSizeText -> b
    android.text.TextPaint mTempTextPaint -> h
    int mAutoSizeTextType -> a
    void autoSizeText() -> a
    int[] cleanupAutoSizePresetSizes(int[]) -> a
    1:1:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0:0 -> a
    1:1:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> a
    2:2:android.text.StaticLayout createStaticLayoutForMeasuring(java.lang.CharSequence,android.text.Layout$Alignment,int,int):0:0 -> a
    2:2:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0 -> a
    2:2:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> a
    3:3:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0:0 -> a
    3:3:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> a
    4:4:android.text.StaticLayout createStaticLayoutForMeasuringPre23(java.lang.CharSequence,android.text.Layout$Alignment,int):0:0 -> a
    4:4:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0 -> a
    4:4:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> a
    5:5:boolean suggestedSizeFitsInSpace(int,android.graphics.RectF):0:0 -> a
    5:5:int findLargestTextSizeWhichFits(android.graphics.RectF):0 -> a
    6:6:int findLargestTextSizeWhichFits(android.graphics.RectF):0:0 -> a
    java.lang.reflect.Method getTextViewMethod(java.lang.String) -> a
    java.lang.Object invokeAndReturnWithDefault(java.lang.Object,java.lang.String,java.lang.Object) -> a
    7:7:void setupAutoSizeUniformPresetSizes(android.content.res.TypedArray):0:0 -> a
    7:7:void loadFromAttributes(android.util.AttributeSet,int):0 -> a
    8:8:void loadFromAttributes(android.util.AttributeSet,int):0:0 -> a
    void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int) -> a
    void setAutoSizeTextTypeUniformWithPresetSizes(int[],int) -> a
    9:9:void clearAutoSizeConfiguration():0:0 -> a
    9:9:void setAutoSizeTextTypeWithDefaults(int):0 -> a
    10:10:void setRawTextSize(float):0:0 -> a
    10:10:void setTextSizeInternal(int,float):0 -> a
    void validateAndSetAutoSizeTextTypeUniformConfiguration(float,float,float) -> a
    int getAutoSizeMaxTextSize() -> b
    int getAutoSizeMinTextSize() -> c
    int getAutoSizeStepGranularity() -> d
    int[] getAutoSizeTextAvailableSizes() -> e
    int getAutoSizeTextType() -> f
    boolean isAutoSizeEnabled() -> g
    boolean setupAutoSizeText() -> h
    boolean setupAutoSizeUniformPresetSizesConfiguration() -> i
    boolean supportsAutoSizeText() -> j
androidx.appcompat.widget.ButtonBarLayout -> androidx.appcompat.widget.ButtonBarLayout:
    int mMinimumHeight -> d
    boolean mAllowStacking -> b
    int mLastWidthSize -> c
    int getNextVisibleChildIndex(int) -> a
    boolean isStacked() -> a
    void setStacked(boolean) -> a
androidx.appcompat.widget.ContentFrameLayout -> androidx.appcompat.widget.ContentFrameLayout:
    android.util.TypedValue mFixedWidthMajor -> d
    android.util.TypedValue mMinWidthMinor -> c
    android.util.TypedValue mMinWidthMajor -> b
    android.graphics.Rect mDecorPadding -> h
    androidx.appcompat.widget.ContentFrameLayout$OnAttachListener mAttachListener -> i
    android.util.TypedValue mFixedHeightMinor -> g
    android.util.TypedValue mFixedHeightMajor -> f
    android.util.TypedValue mFixedWidthMinor -> e
    void dispatchFitSystemWindows(android.graphics.Rect) -> a
    android.util.TypedValue getFixedHeightMajor() -> a
    void setAttachListener(androidx.appcompat.widget.ContentFrameLayout$OnAttachListener) -> a
    void setDecorPadding(int,int,int,int) -> a
    android.util.TypedValue getFixedHeightMinor() -> b
    android.util.TypedValue getFixedWidthMajor() -> c
    android.util.TypedValue getFixedWidthMinor() -> d
    android.util.TypedValue getMinWidthMajor() -> e
    android.util.TypedValue getMinWidthMinor() -> f
androidx.appcompat.widget.ContentFrameLayout$OnAttachListener -> androidx.appcompat.widget.d0:
    void onAttachedFromWindow() -> a
androidx.appcompat.widget.DecorContentParent -> androidx.appcompat.widget.e0:
    void initFeature(int) -> a
    void setMenu(android.view.Menu,androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    void setWindowCallback(android.view.Window$Callback) -> a
    void setWindowTitle(java.lang.CharSequence) -> a
    boolean showOverflowMenu() -> a
    void dismissPopups() -> b
    boolean isOverflowMenuShowPending() -> c
    void setMenuPrepared() -> d
    boolean isOverflowMenuShowing() -> e
    boolean canShowOverflowMenu() -> f
    boolean hideOverflowMenu() -> g
androidx.appcompat.widget.DecorToolbar -> androidx.appcompat.widget.f0:
androidx.appcompat.widget.DrawableUtils -> androidx.appcompat.widget.g0:
    boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable) -> a
    android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode) -> a
    1:1:void fixVectorDrawableTinting(android.graphics.drawable.Drawable):0:0 -> b
    1:1:void fixDrawable(android.graphics.drawable.Drawable):0 -> b
androidx.appcompat.widget.DropDownListView -> androidx.appcompat.widget.j0:
    boolean mListSelectionHidden -> j
    androidx.core.view.ViewPropertyAnimatorCompat mClickAnimation -> m
    boolean mHijackFocus -> k
    boolean mDrawsInPressedState -> l
    int mSelectionBottomPadding -> f
    int mMotionPosition -> g
    int mSelectionTopPadding -> d
    int mSelectionRightPadding -> e
    int mSelectionLeftPadding -> c
    android.graphics.Rect mSelectorRect -> b
    androidx.core.widget.ListViewAutoScrollHelper mScrollHelper -> n
    androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable mResolveHoverRunnable -> o
    java.lang.reflect.Field mIsChildViewEnabled -> h
    androidx.appcompat.widget.DropDownListView$GateKeeperDrawable mSelector -> i
    int measureHeightOfChildrenCompat(int,int,int,int,int) -> a
    1:1:void setPressedItem(android.view.View,int,float,float):0:0 -> a
    1:1:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    2:2:void positionSelectorLikeFocusCompat(int,android.view.View):0:0 -> a
    2:2:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0 -> a
    2:2:void setPressedItem(android.view.View,int,float,float):0 -> a
    2:2:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    3:3:void positionSelectorCompat(int,android.view.View):0:0 -> a
    3:3:void positionSelectorLikeFocusCompat(int,android.view.View):0 -> a
    3:3:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0 -> a
    3:3:void setPressedItem(android.view.View,int,float,float):0 -> a
    3:3:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    4:4:void positionSelectorLikeFocusCompat(int,android.view.View):0:0 -> a
    4:4:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0 -> a
    4:4:void setPressedItem(android.view.View,int,float,float):0 -> a
    4:4:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    5:5:void positionSelectorLikeTouchCompat(int,android.view.View,float,float):0:0 -> a
    5:5:void setPressedItem(android.view.View,int,float,float):0 -> a
    5:5:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    6:6:void setPressedItem(android.view.View,int,float,float):0:0 -> a
    6:6:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    7:7:void clickPressedItem(android.view.View,int):0:0 -> a
    7:7:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    8:8:void clearPressedItem():0:0 -> a
    8:8:boolean onForwardedEvent(android.view.MotionEvent,int):0 -> a
    9:9:boolean onForwardedEvent(android.view.MotionEvent,int):0:0 -> a
    void setListSelectionHidden(boolean) -> a
    10:10:boolean touchModeDrawsInPressedStateCompat():0:0 -> a
    10:10:void updateSelectorStateCompat():0 -> a
    11:11:void updateSelectorStateCompat():0:0 -> a
    void setSelectorEnabled(boolean) -> b
    1:1:void drawSelectorCompat(android.graphics.Canvas):0:0 -> dispatchDraw
    1:1:void dispatchDraw(android.graphics.Canvas):0 -> dispatchDraw
    2:2:void dispatchDraw(android.graphics.Canvas):0:0 -> dispatchDraw
    1:1:void setSelectorEnabled(boolean):0:0 -> drawableStateChanged
    1:1:void drawableStateChanged():0 -> drawableStateChanged
    2:2:void drawableStateChanged():0:0 -> drawableStateChanged
    1:1:void androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable.post():0:0 -> onHoverEvent
    1:1:boolean onHoverEvent(android.view.MotionEvent):0 -> onHoverEvent
    2:2:boolean onHoverEvent(android.view.MotionEvent):0:0 -> onHoverEvent
    1:1:void androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable.cancel():0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
androidx.appcompat.widget.DropDownListView$GateKeeperDrawable -> androidx.appcompat.widget.h0:
    boolean mEnabled -> c
    void setEnabled(boolean) -> a
androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable -> androidx.appcompat.widget.i0:
    androidx.appcompat.widget.DropDownListView this$0 -> b
androidx.appcompat.widget.FitWindowsFrameLayout -> androidx.appcompat.widget.FitWindowsFrameLayout:
    androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener mListener -> b
    void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener) -> a
androidx.appcompat.widget.FitWindowsLinearLayout -> androidx.appcompat.widget.FitWindowsLinearLayout:
    androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener mListener -> b
    void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener) -> a
androidx.appcompat.widget.FitWindowsViewGroup -> androidx.appcompat.widget.l0:
    void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener) -> a
androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener -> androidx.appcompat.widget.k0:
    void onFitSystemWindows(android.graphics.Rect) -> a
androidx.appcompat.widget.ForwardingListener -> androidx.appcompat.widget.o0:
    java.lang.Runnable mTriggerLongPress -> g
    java.lang.Runnable mDisallowIntercept -> f
    int mActivePointerId -> i
    float mScaledTouchSlop -> b
    int mLongPressTimeout -> d
    boolean mForwarding -> h
    android.view.View mSrc -> e
    int[] mTmpLocation -> j
    int mTapTimeout -> c
    androidx.appcompat.view.menu.ShowableListMenu getPopup() -> a
    boolean onForwardingStarted() -> b
    boolean onForwardingStopped() -> c
    void onLongPress() -> d
    void clearCallbacks() -> e
    1:1:boolean onTouchForwarded(android.view.MotionEvent):0:0 -> onTouch
    1:1:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    2:2:boolean toGlobalMotionEvent(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    2:2:boolean onTouchForwarded(android.view.MotionEvent):0 -> onTouch
    2:2:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    3:3:boolean toLocalMotionEvent(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    3:3:boolean onTouchForwarded(android.view.MotionEvent):0 -> onTouch
    3:3:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    4:4:boolean onTouchForwarded(android.view.MotionEvent):0:0 -> onTouch
    4:4:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    5:5:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    6:6:boolean onTouchObserved(android.view.MotionEvent):0:0 -> onTouch
    6:6:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    7:7:boolean pointInView(android.view.View,float,float,float):0:0 -> onTouch
    7:7:boolean onTouchObserved(android.view.MotionEvent):0 -> onTouch
    7:7:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    8:8:boolean onTouchObserved(android.view.MotionEvent):0:0 -> onTouch
    8:8:boolean onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
    9:9:boolean onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
androidx.appcompat.widget.ForwardingListener$DisallowIntercept -> androidx.appcompat.widget.m0:
    androidx.appcompat.widget.ForwardingListener this$0 -> b
androidx.appcompat.widget.ForwardingListener$TriggerLongPress -> androidx.appcompat.widget.n0:
    androidx.appcompat.widget.ForwardingListener this$0 -> b
androidx.appcompat.widget.LinearLayoutCompat -> androidx.appcompat.widget.q0:
    int mDividerHeight -> n
    int mShowDividers -> o
    int mDividerWidth -> m
    float mWeightSum -> h
    boolean mUseLargestChild -> i
    int mGravity -> f
    int mTotalLength -> g
    int mBaselineChildTop -> d
    int mOrientation -> e
    int mBaselineAlignedChildIndex -> c
    android.graphics.drawable.Drawable mDivider -> l
    int[] mMaxAscent -> j
    boolean mBaselineAligned -> b
    int[] mMaxDescent -> k
    int mDividerPadding -> p
    void drawDividersHorizontal(android.graphics.Canvas) -> a
    void drawHorizontalDivider(android.graphics.Canvas,int) -> a
    android.view.View getVirtualChildAt(int) -> a
    1:1:void setChildFrame(android.view.View,int,int,int,int):0:0 -> a
    1:1:void layoutHorizontal(int,int,int,int):0 -> a
    2:2:void layoutHorizontal(int,int,int,int):0:0 -> a
    void measureChildBeforeLayout(android.view.View,int,int,int,int,int) -> a
    void measureHorizontal(int,int) -> a
    void setBaselineAligned(boolean) -> a
    void setDividerDrawable(android.graphics.drawable.Drawable) -> a
    void drawDividersVertical(android.graphics.Canvas) -> b
    void drawVerticalDivider(android.graphics.Canvas,int) -> b
    boolean hasDividerBeforeChildAt(int) -> b
    1:1:void setChildFrame(android.view.View,int,int,int,int):0:0 -> b
    1:1:void layoutVertical(int,int,int,int):0 -> b
    2:2:void layoutVertical(int,int,int,int):0:0 -> b
    void measureVertical(int,int) -> b
    void forceUniformHeight(int,int) -> c
    int getChildrenSkipCount(android.view.View,int) -> c
    void setGravity(int) -> c
    void forceUniformWidth(int,int) -> d
    android.graphics.drawable.Drawable getDividerDrawable() -> d
    void setOrientation(int) -> d
    int getDividerWidth() -> e
    int getGravity() -> f
    int getLocationOffset(android.view.View) -> g
    int getNextLocationOffset(android.view.View) -> h
    int getVirtualChildCount() -> i
    int measureNullChild(int) -> j
androidx.appcompat.widget.LinearLayoutCompat$LayoutParams -> androidx.appcompat.widget.p0:
    float weight -> a
    int gravity -> b
androidx.appcompat.widget.ListPopupWindow -> androidx.appcompat.widget.y0:
    android.database.DataSetObserver mObserver -> s
    boolean mForceIgnoreOutsideTouch -> o
    java.lang.reflect.Method sClipToWindowEnabledMethod -> G
    androidx.appcompat.widget.DropDownListView mDropDownList -> d
    java.lang.reflect.Method sSetEpicenterBoundsMethod -> I
    int mDropDownVerticalOffset -> h
    boolean mOverlapAnchor -> k
    int mDropDownWidth -> f
    android.view.View mDropDownAnchorView -> t
    android.widget.AdapterView$OnItemClickListener mItemClickListener -> v
    android.graphics.Rect mEpicenterBounds -> D
    android.os.Handler mHandler -> B
    boolean mModal -> E
    boolean mDropDownAlwaysVisible -> n
    android.content.Context mContext -> b
    int mDropDownGravity -> m
    androidx.appcompat.widget.ListPopupWindow$ListSelectorHider mHideSelector -> A
    androidx.appcompat.widget.ListPopupWindow$PopupScrollListener mScrollListener -> z
    java.lang.reflect.Method sGetMaxAvailableHeightMethod -> H
    boolean mDropDownVerticalOffsetSet -> j
    int mDropDownWindowLayoutType -> i
    boolean mOverlapAnchorSet -> l
    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener -> w
    androidx.appcompat.widget.ListPopupWindow$ResizePopupRunnable mResizePopupRunnable -> x
    android.view.View mPromptView -> q
    int mDropDownHorizontalOffset -> g
    int mDropDownHeight -> e
    android.graphics.Rect mTempRect -> C
    android.widget.ListAdapter mAdapter -> c
    android.graphics.drawable.Drawable mDropDownListHighlight -> u
    android.widget.PopupWindow mPopup -> F
    int mPromptPosition -> r
    int mListItemExpandMaximum -> p
    androidx.appcompat.widget.ListPopupWindow$PopupTouchInterceptor mTouchInterceptor -> y
    androidx.appcompat.widget.DropDownListView createDropDownListView(android.content.Context,boolean) -> a
    android.view.View getAnchorView() -> a
    void setAdapter(android.widget.ListAdapter) -> a
    void setAnchorView(android.view.View) -> a
    void setAnimationStyle(int) -> a
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> a
    void setEpicenterBounds(android.graphics.Rect) -> a
    void setModal(boolean) -> a
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> a
    boolean isShowing() -> b
    1:1:void setWidth(int):0:0 -> b
    1:1:void setContentWidth(int):0 -> b
    void setOverlapAnchor(boolean) -> b
    android.widget.ListView getListView() -> c
    void setDropDownGravity(int) -> c
    void setHorizontalOffset(int) -> d
    1:1:int buildDropDown():0:0 -> d
    1:1:void show():0 -> d
    2:2:android.view.View getAnchorView():0:0 -> d
    2:2:int buildDropDown():0 -> d
    2:2:void show():0 -> d
    3:3:int buildDropDown():0:0 -> d
    3:3:void show():0 -> d
    4:4:int getMaxAvailableHeight(android.view.View,int,boolean):0:0 -> d
    4:4:int buildDropDown():0 -> d
    4:4:void show():0 -> d
    5:5:int buildDropDown():0:0 -> d
    5:5:void show():0 -> d
    6:6:boolean isInputMethodNotNeeded():0:0 -> d
    6:6:void show():0 -> d
    7:7:void show():0:0 -> d
    8:8:android.view.View getAnchorView():0:0 -> d
    8:8:void show():0 -> d
    9:9:void show():0:0 -> d
    10:10:android.view.View getAnchorView():0:0 -> d
    10:10:void show():0 -> d
    11:11:void show():0:0 -> d
    12:12:android.view.View getAnchorView():0:0 -> d
    12:12:void show():0 -> d
    13:13:void show():0:0 -> d
    14:14:android.view.View getAnchorView():0:0 -> d
    14:14:void show():0 -> d
    15:15:void show():0:0 -> d
    16:16:void setPopupClipToScreenEnabled(boolean):0:0 -> d
    16:16:void show():0 -> d
    17:17:void show():0:0 -> d
    18:18:android.view.View getAnchorView():0:0 -> d
    18:18:void show():0 -> d
    19:19:void show():0:0 -> d
    20:20:void androidx.core.widget.PopupWindowCompat.showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int):0:0 -> d
    20:20:void show():0 -> d
    21:21:void show():0:0 -> d
    22:22:void clearListSelection():0:0 -> d
    22:22:void show():0 -> d
    23:23:void show():0:0 -> d
    1:1:void removePromptView():0:0 -> dismiss
    1:1:void dismiss():0 -> dismiss
    2:2:void dismiss():0:0 -> dismiss
    android.graphics.drawable.Drawable getBackground() -> e
    void setInputMethodMode(int) -> e
    int getHorizontalOffset() -> f
    void setPromptPosition(int) -> f
    int getVerticalOffset() -> g
    void setVerticalOffset(int) -> g
    int getWidth() -> h
    boolean isModal() -> i
androidx.appcompat.widget.ListPopupWindow$2 -> androidx.appcompat.widget.r0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> b
androidx.appcompat.widget.ListPopupWindow$3 -> androidx.appcompat.widget.s0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> b
androidx.appcompat.widget.ListPopupWindow$ListSelectorHider -> androidx.appcompat.widget.t0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> b
    1:1:void androidx.appcompat.widget.ListPopupWindow.clearListSelection():0:0 -> run
    1:1:void run():0 -> run
androidx.appcompat.widget.ListPopupWindow$PopupDataSetObserver -> androidx.appcompat.widget.u0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
androidx.appcompat.widget.ListPopupWindow$PopupScrollListener -> androidx.appcompat.widget.v0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> a
    1:1:boolean androidx.appcompat.widget.ListPopupWindow.isInputMethodNotNeeded():0:0 -> onScrollStateChanged
    1:1:void onScrollStateChanged(android.widget.AbsListView,int):0 -> onScrollStateChanged
    2:2:void onScrollStateChanged(android.widget.AbsListView,int):0:0 -> onScrollStateChanged
androidx.appcompat.widget.ListPopupWindow$PopupTouchInterceptor -> androidx.appcompat.widget.w0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> b
androidx.appcompat.widget.ListPopupWindow$ResizePopupRunnable -> androidx.appcompat.widget.x0:
    androidx.appcompat.widget.ListPopupWindow this$0 -> b
androidx.appcompat.widget.MenuItemHoverListener -> androidx.appcompat.widget.z0:
    void onItemHoverEnter(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onItemHoverExit(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> b
androidx.appcompat.widget.MenuPopupWindow -> androidx.appcompat.widget.B0:
    java.lang.reflect.Method sSetTouchModalMethod -> K
    androidx.appcompat.widget.MenuItemHoverListener mHoverListener -> J
    androidx.appcompat.widget.DropDownListView createDropDownListView(android.content.Context,boolean) -> a
    void onItemHoverEnter(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void setEnterTransition(java.lang.Object) -> a
    void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener) -> a
    void onItemHoverExit(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem) -> b
    void setExitTransition(java.lang.Object) -> b
    void setTouchModal(boolean) -> c
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView -> androidx.appcompat.widget.A0:
    androidx.appcompat.widget.MenuItemHoverListener mHoverListener -> r
    android.view.MenuItem mHoveredMenuItem -> s
    int mAdvanceKey -> p
    int mRetreatKey -> q
    int measureHeightOfChildrenCompat(int,int,int,int,int) -> a
    boolean onForwardedEvent(android.view.MotionEvent,int) -> a
    void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener) -> a
androidx.appcompat.widget.RtlSpacingHelper -> androidx.appcompat.widget.C0:
    int mExplicitRight -> f
    int mEnd -> d
    boolean mIsRtl -> g
    int mExplicitLeft -> e
    boolean mIsRelative -> h
    int mRight -> b
    int mStart -> c
    int mLeft -> a
    int getEnd() -> a
    void setAbsolute(int,int) -> a
    void setDirection(boolean) -> a
    int getStart() -> b
    void setRelative(int,int) -> b
androidx.appcompat.widget.ScrollingTabContainerView -> androidx.appcompat.widget.D0:
androidx.appcompat.widget.SearchView -> androidx.appcompat.widget.SearchView:
    android.widget.ImageView mVoiceButton -> x
    androidx.appcompat.widget.SearchView$SearchAutoComplete mSearchSrcTextView -> q
    android.widget.ImageView mGoButton -> v
    android.graphics.drawable.Drawable mSearchHintIcon -> F
    boolean mIconifiedByDefault -> L
    boolean mExpandedInActionView -> V
    android.view.View mSearchEditFrame -> r
    android.view.View mSubmitArea -> t
    java.lang.CharSequence mDefaultQueryHint -> I
    android.view.View$OnFocusChangeListener mOnQueryTextFocusChangeListener -> J
    android.graphics.Rect mSearchSrtTextViewBoundsExpanded -> B
    android.widget.AdapterView$OnItemClickListener mOnItemClickListener -> h0
    android.content.Intent mVoiceAppSearchIntent -> H
    android.view.View$OnClickListener mOnSearchClickListener -> K
    java.lang.CharSequence mQueryHint -> P
    int[] mTemp -> C
    java.lang.CharSequence mOldQueryText -> T
    java.lang.Runnable mReleaseCursorRunnable -> d0
    java.lang.Runnable mUpdateDrawableStateRunnable -> c0
    int mMaxWidth -> R
    android.widget.ImageView mSearchButton -> u
    android.view.View mDropDownAnchor -> y
    boolean mIconified -> M
    boolean mSubmitButtonEnabled -> O
    android.widget.ImageView mCloseButton -> w
    android.view.View mSearchPlate -> s
    android.view.View$OnKeyListener mTextKeyListener -> f0
    androidx.appcompat.widget.SearchView$UpdatableTouchDelegate mTouchDelegate -> z
    boolean mClearingFocus -> Q
    android.widget.ImageView mCollapsedIcon -> E
    android.view.View$OnClickListener mOnClickListener -> e0
    android.graphics.Rect mSearchSrcTextViewBounds -> A
    androidx.cursoradapter.widget.CursorAdapter mSuggestionsAdapter -> N
    boolean mVoiceButtonEnabled -> S
    android.os.Bundle mAppSearchData -> b0
    android.content.Intent mVoiceWebSearchIntent -> G
    android.text.TextWatcher mTextWatcher -> j0
    android.app.SearchableInfo mSearchable -> a0
    android.widget.TextView$OnEditorActionListener mOnEditorActionListener -> g0
    int[] mTemp2 -> D
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener -> i0
    androidx.appcompat.widget.SearchView$AutoCompleteTextViewReflector HIDDEN_METHOD_INVOKER -> k0
    java.lang.CharSequence mUserQuery -> U
    int mCollapsedImeOptions -> W
    1:1:void androidx.core.view.ViewCompat.setBackground(android.view.View,android.graphics.drawable.Drawable):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,int,java.lang.String) -> a
    android.content.Intent createVoiceAppSearchIntent(android.content.Intent,android.app.SearchableInfo) -> a
    boolean isLandscapeMode(android.content.Context) -> a
    void launchQuerySearch(int,java.lang.String,java.lang.String) -> a
    void onActionViewExpanded() -> a
    boolean onSuggestionsKey(android.view.View,int,android.view.KeyEvent) -> a
    void onTextChanged(java.lang.CharSequence) -> a
    void setQuery(java.lang.CharSequence,boolean) -> a
    void onActionViewCollapsed() -> b
    void setIconified(boolean) -> b
    void setIconifiedByDefault(boolean) -> c
    void updateSubmitButton(boolean) -> d
    1:1:boolean launchSuggestion(int,int,java.lang.String):0:0 -> e
    1:1:boolean onItemClicked(int,int,java.lang.String):0 -> e
    void updateViewsVisibility(boolean) -> e
    1:1:void rewriteQueryFromSuggestion(int):0:0 -> f
    1:1:boolean onItemSelected(int):0 -> f
    void updateVoiceButton(boolean) -> f
    void setImeOptions(int) -> g
    void setInputType(int) -> h
    void setMaxWidth(int) -> i
    void adjustDropDownSizeAndPosition() -> k
    void forceSuggestionQuery() -> l
    java.lang.CharSequence getQueryHint() -> m
    boolean isIconified() -> n
    void onCloseClicked() -> o
    1:1:void getChildBoundsWithinSearchView(android.view.View,android.graphics.Rect):0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:int getPreferredWidth():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    3:3:int getPreferredWidth():0:0 -> onMeasure
    3:3:void onMeasure(int,int):0 -> onMeasure
    4:4:void onMeasure(int,int):0:0 -> onMeasure
    5:5:int getPreferredHeight():0:0 -> onMeasure
    5:5:void onMeasure(int,int):0 -> onMeasure
    6:6:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void postUpdateFocusedState():0:0 -> onWindowFocusChanged
    1:1:void onWindowFocusChanged(boolean):0 -> onWindowFocusChanged
    void onSearchClicked() -> p
    void onSubmitQuery() -> q
    1:1:void postUpdateFocusedState():0:0 -> r
    1:1:void onTextFocusChanged():0 -> r
    2:2:void onTextFocusChanged():0:0 -> r
    1:1:android.content.Intent createVoiceWebSearchIntent(android.content.Intent,android.app.SearchableInfo):0:0 -> s
    1:1:void onVoiceClicked():0 -> s
    2:2:void onVoiceClicked():0:0 -> s
    void updateFocusedState() -> t
    void dismissSuggestions() -> u
    boolean isSubmitAreaEnabled() -> v
    void updateCloseButton() -> w
    1:1:java.lang.CharSequence getDecoratedHint(java.lang.CharSequence):0:0 -> x
    1:1:void updateQueryHint():0 -> x
    2:2:void updateQueryHint():0:0 -> x
    void updateSubmitArea() -> y
androidx.appcompat.widget.SearchView$1 -> androidx.appcompat.widget.F0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$10 -> androidx.appcompat.widget.E0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$2 -> androidx.appcompat.widget.G0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$3 -> androidx.appcompat.widget.H0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$4 -> androidx.appcompat.widget.I0:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$5 -> androidx.appcompat.widget.J0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$6 -> androidx.appcompat.widget.K0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$7 -> androidx.appcompat.widget.L0:
    androidx.appcompat.widget.SearchView this$0 -> a
androidx.appcompat.widget.SearchView$8 -> androidx.appcompat.widget.M0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$9 -> androidx.appcompat.widget.N0:
    androidx.appcompat.widget.SearchView this$0 -> b
androidx.appcompat.widget.SearchView$AutoCompleteTextViewReflector -> androidx.appcompat.widget.O0:
    java.lang.reflect.Method ensureImeVisible -> c
    java.lang.reflect.Method doBeforeTextChanged -> a
    java.lang.reflect.Method doAfterTextChanged -> b
    void doAfterTextChanged(android.widget.AutoCompleteTextView) -> a
    void ensureImeVisible(android.widget.AutoCompleteTextView,boolean) -> a
    void doBeforeTextChanged(android.widget.AutoCompleteTextView) -> b
androidx.appcompat.widget.SearchView$SavedState -> androidx.appcompat.widget.Q0:
    boolean isIconified -> d
androidx.appcompat.widget.SearchView$SavedState$1 -> androidx.appcompat.widget.P0:
    1:1:androidx.appcompat.widget.SearchView$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.appcompat.widget.SearchView$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.appcompat.widget.SearchView$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.appcompat.widget.SearchView$SearchAutoComplete -> androidx.appcompat.widget.SearchView$SearchAutoComplete:
    java.lang.Runnable mRunShowSoftInputIfNecessary -> h
    boolean mHasPendingShowSoftInputRequest -> g
    int mThreshold -> e
    androidx.appcompat.widget.SearchView mSearchView -> f
    void setImeVisibility(boolean) -> a
    void setSearchView(androidx.appcompat.widget.SearchView) -> a
    boolean isEmpty() -> c
    void showSoftInputIfNecessary() -> d
    1:1:int getSearchViewTextMinWidthDp():0:0 -> onFinishInflate
    1:1:void onFinishInflate():0 -> onFinishInflate
    2:2:void onFinishInflate():0:0 -> onFinishInflate
androidx.appcompat.widget.SearchView$SearchAutoComplete$1 -> androidx.appcompat.widget.R0:
    androidx.appcompat.widget.SearchView$SearchAutoComplete this$0 -> b
androidx.appcompat.widget.SearchView$UpdatableTouchDelegate -> androidx.appcompat.widget.S0:
    android.view.View mDelegateView -> a
    boolean mDelegateTargeted -> f
    int mSlop -> e
    android.graphics.Rect mActualBounds -> c
    android.graphics.Rect mSlopBounds -> d
    android.graphics.Rect mTargetBounds -> b
    void setBounds(android.graphics.Rect,android.graphics.Rect) -> a
androidx.appcompat.widget.ThemeUtils -> androidx.appcompat.widget.T0:
    int[] EMPTY_STATE_SET -> f
    int[] TEMP_ARRAY -> g
    java.lang.ThreadLocal TL_TYPED_VALUE -> a
    int[] DISABLED_STATE_SET -> b
    int[] FOCUSED_STATE_SET -> c
    int[] PRESSED_STATE_SET -> d
    int[] CHECKED_STATE_SET -> e
    1:1:android.util.TypedValue getTypedValue():0:0 -> a
    1:1:int getDisabledThemeAttrColor(android.content.Context,int):0 -> a
    2:2:int getDisabledThemeAttrColor(android.content.Context,int):0:0 -> a
    3:3:int getThemeAttrColor(android.content.Context,int,float):0:0 -> a
    3:3:int getDisabledThemeAttrColor(android.content.Context,int):0 -> a
    int getThemeAttrColor(android.content.Context,int) -> b
    android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int) -> c
androidx.appcompat.widget.ThemedSpinnerAdapter -> androidx.appcompat.widget.U0:
androidx.appcompat.widget.TintContextWrapper -> androidx.appcompat.widget.V0:
    android.content.res.Resources$Theme mTheme -> b
    java.lang.Object CACHE_LOCK -> c
    java.util.ArrayList sCache -> d
    android.content.res.Resources mResources -> a
    1:1:boolean shouldWrap(android.content.Context):0:0 -> a
    1:1:android.content.Context wrap(android.content.Context):0 -> a
    2:2:android.content.Context wrap(android.content.Context):0:0 -> a
androidx.appcompat.widget.TintInfo -> androidx.appcompat.widget.W0:
    android.content.res.ColorStateList mTintList -> a
    android.graphics.PorterDuff$Mode mTintMode -> b
    boolean mHasTintMode -> c
    boolean mHasTintList -> d
    void clear() -> a
androidx.appcompat.widget.TintResources -> androidx.appcompat.widget.X0:
    java.lang.ref.WeakReference mContextRef -> b
    android.content.res.Resources androidx.appcompat.widget.ResourcesWrapper.mResources -> a
    1:1:void androidx.appcompat.widget.ResourcesWrapper.<init>(android.content.res.Resources):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.content.res.Resources):0 -> <init>
    2:2:void <init>(android.content.Context,android.content.res.Resources):0:0 -> <init>
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getAnimation(int):0:0 -> getAnimation
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getAnimation(int):0 -> getAnimation
    1:1:boolean androidx.appcompat.widget.ResourcesWrapper.getBoolean(int):0:0 -> getBoolean
    1:1:boolean androidx.appcompat.widget.ResourcesWrapper.getBoolean(int):0 -> getBoolean
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getColor(int):0:0 -> getColor
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getColor(int):0 -> getColor
    1:1:android.content.res.ColorStateList androidx.appcompat.widget.ResourcesWrapper.getColorStateList(int):0:0 -> getColorStateList
    1:1:android.content.res.ColorStateList androidx.appcompat.widget.ResourcesWrapper.getColorStateList(int):0 -> getColorStateList
    1:1:android.content.res.Configuration androidx.appcompat.widget.ResourcesWrapper.getConfiguration():0:0 -> getConfiguration
    1:1:android.content.res.Configuration androidx.appcompat.widget.ResourcesWrapper.getConfiguration():0 -> getConfiguration
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getDimension(int):0:0 -> getDimension
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getDimension(int):0 -> getDimension
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelOffset(int):0:0 -> getDimensionPixelOffset
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelOffset(int):0 -> getDimensionPixelOffset
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelSize(int):0:0 -> getDimensionPixelSize
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getDimensionPixelSize(int):0 -> getDimensionPixelSize
    1:1:android.util.DisplayMetrics androidx.appcompat.widget.ResourcesWrapper.getDisplayMetrics():0:0 -> getDisplayMetrics
    1:1:android.util.DisplayMetrics androidx.appcompat.widget.ResourcesWrapper.getDisplayMetrics():0 -> getDisplayMetrics
    1:1:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawable(int):0:0 -> getDrawable
    1:1:android.graphics.drawable.Drawable getDrawable(int):0 -> getDrawable
    2:2:android.graphics.drawable.Drawable getDrawable(int):0:0 -> getDrawable
    3:3:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawable(int,android.content.res.Resources$Theme):0:0 -> getDrawable
    3:3:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawable(int,android.content.res.Resources$Theme):0 -> getDrawable
    1:1:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int):0:0 -> getDrawableForDensity
    1:1:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int):0 -> getDrawableForDensity
    2:2:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int,android.content.res.Resources$Theme):0:0 -> getDrawableForDensity
    2:2:android.graphics.drawable.Drawable androidx.appcompat.widget.ResourcesWrapper.getDrawableForDensity(int,int,android.content.res.Resources$Theme):0 -> getDrawableForDensity
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getFraction(int,int,int):0:0 -> getFraction
    1:1:float androidx.appcompat.widget.ResourcesWrapper.getFraction(int,int,int):0 -> getFraction
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getIdentifier(java.lang.String,java.lang.String,java.lang.String):0:0 -> getIdentifier
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getIdentifier(java.lang.String,java.lang.String,java.lang.String):0 -> getIdentifier
    1:1:int[] androidx.appcompat.widget.ResourcesWrapper.getIntArray(int):0:0 -> getIntArray
    1:1:int[] androidx.appcompat.widget.ResourcesWrapper.getIntArray(int):0 -> getIntArray
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getInteger(int):0:0 -> getInteger
    1:1:int androidx.appcompat.widget.ResourcesWrapper.getInteger(int):0 -> getInteger
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getLayout(int):0:0 -> getLayout
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getLayout(int):0 -> getLayout
    1:1:android.graphics.Movie androidx.appcompat.widget.ResourcesWrapper.getMovie(int):0:0 -> getMovie
    1:1:android.graphics.Movie androidx.appcompat.widget.ResourcesWrapper.getMovie(int):0 -> getMovie
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int):0:0 -> getQuantityString
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int):0 -> getQuantityString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int,java.lang.Object[]):0:0 -> getQuantityString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getQuantityString(int,int,java.lang.Object[]):0 -> getQuantityString
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getQuantityText(int,int):0:0 -> getQuantityText
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getQuantityText(int,int):0 -> getQuantityText
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceEntryName(int):0:0 -> getResourceEntryName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceEntryName(int):0 -> getResourceEntryName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceName(int):0:0 -> getResourceName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceName(int):0 -> getResourceName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourcePackageName(int):0:0 -> getResourcePackageName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourcePackageName(int):0 -> getResourcePackageName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceTypeName(int):0:0 -> getResourceTypeName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getResourceTypeName(int):0 -> getResourceTypeName
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int):0:0 -> getString
    1:1:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int):0 -> getString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int,java.lang.Object[]):0:0 -> getString
    2:2:java.lang.String androidx.appcompat.widget.ResourcesWrapper.getString(int,java.lang.Object[]):0 -> getString
    1:1:java.lang.String[] androidx.appcompat.widget.ResourcesWrapper.getStringArray(int):0:0 -> getStringArray
    1:1:java.lang.String[] androidx.appcompat.widget.ResourcesWrapper.getStringArray(int):0 -> getStringArray
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int):0:0 -> getText
    1:1:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int):0 -> getText
    2:2:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int,java.lang.CharSequence):0:0 -> getText
    2:2:java.lang.CharSequence androidx.appcompat.widget.ResourcesWrapper.getText(int,java.lang.CharSequence):0 -> getText
    1:1:java.lang.CharSequence[] androidx.appcompat.widget.ResourcesWrapper.getTextArray(int):0:0 -> getTextArray
    1:1:java.lang.CharSequence[] androidx.appcompat.widget.ResourcesWrapper.getTextArray(int):0 -> getTextArray
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValue(int,android.util.TypedValue,boolean):0:0 -> getValue
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValue(int,android.util.TypedValue,boolean):0 -> getValue
    2:2:void androidx.appcompat.widget.ResourcesWrapper.getValue(java.lang.String,android.util.TypedValue,boolean):0:0 -> getValue
    2:2:void androidx.appcompat.widget.ResourcesWrapper.getValue(java.lang.String,android.util.TypedValue,boolean):0 -> getValue
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValueForDensity(int,int,android.util.TypedValue,boolean):0:0 -> getValueForDensity
    1:1:void androidx.appcompat.widget.ResourcesWrapper.getValueForDensity(int,int,android.util.TypedValue,boolean):0 -> getValueForDensity
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getXml(int):0:0 -> getXml
    1:1:android.content.res.XmlResourceParser androidx.appcompat.widget.ResourcesWrapper.getXml(int):0 -> getXml
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainAttributes(android.util.AttributeSet,int[]):0:0 -> obtainAttributes
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainAttributes(android.util.AttributeSet,int[]):0 -> obtainAttributes
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainTypedArray(int):0:0 -> obtainTypedArray
    1:1:android.content.res.TypedArray androidx.appcompat.widget.ResourcesWrapper.obtainTypedArray(int):0 -> obtainTypedArray
    1:1:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int):0:0 -> openRawResource
    1:1:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int):0 -> openRawResource
    2:2:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int,android.util.TypedValue):0:0 -> openRawResource
    2:2:java.io.InputStream androidx.appcompat.widget.ResourcesWrapper.openRawResource(int,android.util.TypedValue):0 -> openRawResource
    1:1:android.content.res.AssetFileDescriptor androidx.appcompat.widget.ResourcesWrapper.openRawResourceFd(int):0:0 -> openRawResourceFd
    1:1:android.content.res.AssetFileDescriptor androidx.appcompat.widget.ResourcesWrapper.openRawResourceFd(int):0 -> openRawResourceFd
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle):0:0 -> parseBundleExtra
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle):0 -> parseBundleExtra
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle):0:0 -> parseBundleExtras
    1:1:void androidx.appcompat.widget.ResourcesWrapper.parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle):0 -> parseBundleExtras
    1:1:void androidx.appcompat.widget.ResourcesWrapper.updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics):0:0 -> updateConfiguration
    1:1:void androidx.appcompat.widget.ResourcesWrapper.updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics):0 -> updateConfiguration
androidx.appcompat.widget.TintTypedArray -> androidx.appcompat.widget.Y0:
    android.content.Context mContext -> a
    android.content.res.TypedArray mWrapped -> b
    android.util.TypedValue mTypedValue -> c
    boolean getBoolean(int,boolean) -> a
    int getColor(int,int) -> a
    android.content.res.ColorStateList getColorStateList(int) -> a
    float getFloat(int,float) -> a
    1:1:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.getFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback):0:0 -> a
    1:1:android.graphics.Typeface getFont(int,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    2:2:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0:0 -> a
    2:2:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.getFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    2:2:android.graphics.Typeface getFont(int,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    3:3:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0:0 -> a
    3:3:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0 -> a
    3:3:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.getFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    3:3:android.graphics.Typeface getFont(int,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    4:4:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0:0 -> a
    4:4:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.getFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    4:4:android.graphics.Typeface getFont(int,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    5:5:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0:0 -> a
    5:5:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean):0 -> a
    5:5:android.graphics.Typeface androidx.core.content.res.ResourcesCompat.getFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    5:5:android.graphics.Typeface getFont(int,int,androidx.core.content.res.ResourcesCompat$FontCallback):0 -> a
    androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,int,int[]) -> a
    androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[]) -> a
    androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int) -> a
    void recycle() -> a
    int getDimensionPixelOffset(int,int) -> b
    android.graphics.drawable.Drawable getDrawable(int) -> b
    int getDimensionPixelSize(int,int) -> c
    android.graphics.drawable.Drawable getDrawableIfKnown(int) -> c
    int getInt(int,int) -> d
    java.lang.String getString(int) -> d
    int getInteger(int,int) -> e
    java.lang.CharSequence getText(int) -> e
    int getLayoutDimension(int,int) -> f
    java.lang.CharSequence[] getTextArray(int) -> f
    int getResourceId(int,int) -> g
    boolean hasValue(int) -> g
androidx.appcompat.widget.Toolbar -> androidx.appcompat.widget.Toolbar:
    int mSubtitleTextAppearance -> n
    boolean mCollapsible -> N
    int mPopupTheme -> l
    android.graphics.drawable.Drawable mCollapseIcon -> g
    androidx.appcompat.view.menu.MenuBuilder$Callback mMenuBuilderCallback -> M
    java.util.ArrayList mHiddenViews -> F
    android.content.Context mPopupContext -> k
    java.lang.CharSequence mCollapseDescription -> h
    androidx.appcompat.widget.ActionMenuPresenter mOuterActionMenuPresenter -> J
    int mTitleTextColor -> A
    int[] mTempMargins -> G
    androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener mMenuViewItemClickListener -> H
    android.widget.TextView mSubtitleTextView -> d
    androidx.appcompat.widget.RtlSpacingHelper mContentInsets -> u
    int mContentInsetEndWithActions -> w
    int mTitleMarginTop -> s
    java.lang.CharSequence mTitleText -> y
    boolean mEatingTouch -> C
    int mTitleMarginStart -> q
    int mButtonGravity -> o
    int mTitleTextAppearance -> m
    androidx.appcompat.widget.ToolbarWidgetWrapper mWrapper -> I
    java.util.ArrayList mTempViews -> E
    int mSubtitleTextColor -> B
    androidx.appcompat.view.menu.MenuPresenter$Callback mActionMenuPresenterCallback -> L
    android.widget.ImageView mLogoView -> f
    android.view.View mExpandedActionView -> j
    android.widget.TextView mTitleTextView -> c
    androidx.appcompat.widget.ActionMenuView mMenuView -> b
    int mGravity -> x
    androidx.appcompat.widget.Toolbar$ExpandedActionViewMenuPresenter mExpandedMenuPresenter -> K
    int mContentInsetStartWithNavigation -> v
    android.widget.ImageButton mCollapseButtonView -> i
    int mTitleMarginBottom -> t
    int mTitleMarginEnd -> r
    android.widget.ImageButton mNavButtonView -> e
    int mMaxButtonHeight -> p
    java.lang.CharSequence mSubtitleText -> z
    java.lang.Runnable mShowOverflowMenuRunnable -> O
    boolean mEatingHover -> D
    void addChildrenForExpandedActionView() -> a
    void addCustomViewsWithGravity(java.util.List,int) -> a
    void addSystemView(android.view.View,boolean) -> a
    1:1:int getChildVerticalGravity(int):0:0 -> a
    1:1:int getChildTop(android.view.View,int):0 -> a
    2:2:int getChildTop(android.view.View,int):0:0 -> a
    3:3:int androidx.core.view.MarginLayoutParamsCompat.getMarginStart(android.view.ViewGroup$MarginLayoutParams):0:0 -> a
    3:3:int getHorizontalMargins(android.view.View):0 -> a
    4:4:int androidx.core.view.MarginLayoutParamsCompat.getMarginEnd(android.view.ViewGroup$MarginLayoutParams):0:0 -> a
    4:4:int getHorizontalMargins(android.view.View):0 -> a
    int layoutChildLeft(android.view.View,int,int[],int) -> a
    int measureChildCollapseMargins(android.view.View,int,int,int,int,int[]) -> a
    void measureChildConstrained(android.view.View,int,int,int,int,int) -> a
    void setCollapsible(boolean) -> a
    void setContentInsetsRelative(int,int) -> a
    5:5:void ensureLogoView():0:0 -> a
    5:5:void setLogo(android.graphics.drawable.Drawable):0 -> a
    6:6:void androidx.appcompat.widget.AppCompatImageView.<init>(android.content.Context):0:0 -> a
    6:6:void ensureLogoView():0 -> a
    6:6:void setLogo(android.graphics.drawable.Drawable):0 -> a
    7:7:void ensureLogoView():0:0 -> a
    7:7:void setLogo(android.graphics.drawable.Drawable):0 -> a
    8:8:void setLogo(android.graphics.drawable.Drawable):0:0 -> a
    9:9:void ensureLogoView():0:0 -> a
    9:9:void setLogoDescription(java.lang.CharSequence):0 -> a
    10:10:void androidx.appcompat.widget.AppCompatImageView.<init>(android.content.Context):0:0 -> a
    10:10:void ensureLogoView():0 -> a
    10:10:void setLogoDescription(java.lang.CharSequence):0 -> a
    11:11:void ensureLogoView():0:0 -> a
    11:11:void setLogoDescription(java.lang.CharSequence):0 -> a
    12:12:void setLogoDescription(java.lang.CharSequence):0:0 -> a
    13:13:void ensureMenuView():0:0 -> a
    13:13:void setMenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.widget.ActionMenuPresenter):0 -> a
    14:14:void setMenu(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.widget.ActionMenuPresenter):0:0 -> a
    void setNavigationContentDescription(int) -> a
    void setNavigationOnClickListener(android.view.View$OnClickListener) -> a
    void setSubtitleTextAppearance(android.content.Context,int) -> a
    boolean canShowOverflowMenu() -> b
    int getVerticalMargins(android.view.View) -> b
    int layoutChildRight(android.view.View,int,int[],int) -> b
    void setNavigationContentDescription(java.lang.CharSequence) -> b
    void setNavigationIcon(android.graphics.drawable.Drawable) -> b
    void setPopupTheme(int) -> b
    void setTitleTextAppearance(android.content.Context,int) -> b
    void collapseActionView() -> c
    boolean isChildOrHidden(android.view.View) -> c
    void setSubtitle(java.lang.CharSequence) -> c
    void setSubtitleTextColor(int) -> c
    void dismissPopupMenus() -> d
    void setTitle(java.lang.CharSequence) -> d
    void setTitleTextColor(int) -> d
    boolean shouldLayout(android.view.View) -> d
    void ensureCollapseButtonView() -> e
    int getChildHorizontalGravity(int) -> e
    int getContentInsetEnd() -> f
    int getContentInsetStart() -> g
    int getCurrentContentInsetEnd() -> h
    int getCurrentContentInsetLeft() -> i
    int getCurrentContentInsetRight() -> j
    int getCurrentContentInsetStart() -> k
    java.lang.CharSequence getNavigationContentDescription() -> l
    android.graphics.drawable.Drawable getNavigationIcon() -> m
    java.lang.CharSequence getSubtitle() -> n
    java.lang.CharSequence getTitle() -> o
    1:1:int getViewListMeasuredWidth(java.util.List,int[]):0:0 -> onLayout
    1:1:void onLayout(boolean,int,int,int,int):0 -> onLayout
    2:2:void onLayout(boolean,int,int,int,int):0:0 -> onLayout
    1:1:boolean shouldCollapse():0:0 -> onMeasure
    1:1:void onMeasure(int,int):0 -> onMeasure
    2:2:void onMeasure(int,int):0:0 -> onMeasure
    1:1:void postShowOverflowMenu():0:0 -> onRestoreInstanceState
    1:1:void onRestoreInstanceState(android.os.Parcelable):0 -> onRestoreInstanceState
    androidx.appcompat.widget.DecorToolbar getWrapper() -> p
    boolean hasExpandedActionView() -> q
    boolean hideOverflowMenu() -> r
    boolean isOverflowMenuShowPending() -> s
    boolean isOverflowMenuShowing() -> t
    void removeChildrenForExpandedActionView() -> u
    boolean showOverflowMenu() -> v
    void ensureContentInsets() -> w
    void ensureNavButtonView() -> x
androidx.appcompat.widget.Toolbar$1 -> androidx.appcompat.widget.Z0:
androidx.appcompat.widget.Toolbar$2 -> androidx.appcompat.widget.a1:
    androidx.appcompat.widget.Toolbar this$0 -> b
androidx.appcompat.widget.Toolbar$3 -> androidx.appcompat.widget.b1:
    androidx.appcompat.widget.Toolbar this$0 -> b
androidx.appcompat.widget.Toolbar$ExpandedActionViewMenuPresenter -> androidx.appcompat.widget.c1:
    androidx.appcompat.view.menu.MenuBuilder mMenu -> b
    androidx.appcompat.widget.Toolbar this$0 -> d
    androidx.appcompat.view.menu.MenuItemImpl mCurrentExpandedItem -> c
    boolean expandItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> a
    boolean flagActionItems() -> a
    void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder) -> a
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder) -> a
    void updateMenuView(boolean) -> a
    boolean collapseItemActionView(androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl) -> b
androidx.appcompat.widget.Toolbar$LayoutParams -> androidx.appcompat.widget.d1:
    int mViewType -> b
    1:1:void copyMarginsFromCompat(android.view.ViewGroup$MarginLayoutParams):0:0 -> <init>
    1:1:void <init>(android.view.ViewGroup$MarginLayoutParams):0 -> <init>
androidx.appcompat.widget.Toolbar$SavedState -> androidx.appcompat.widget.f1:
    boolean isOverflowOpen -> e
    int expandedMenuItemId -> d
androidx.appcompat.widget.Toolbar$SavedState$1 -> androidx.appcompat.widget.e1:
    1:1:androidx.appcompat.widget.Toolbar$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.appcompat.widget.Toolbar$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.appcompat.widget.Toolbar$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.appcompat.widget.ToolbarWidgetWrapper -> androidx.appcompat.widget.i1:
    boolean mMenuPrepared -> m
    int mNavigationMode -> o
    android.graphics.drawable.Drawable mIcon -> e
    android.graphics.drawable.Drawable mLogo -> f
    android.view.Window$Callback mWindowCallback -> l
    android.graphics.drawable.Drawable mNavIcon -> g
    androidx.appcompat.widget.ActionMenuPresenter mActionMenuPresenter -> n
    int mDisplayOpts -> b
    java.lang.CharSequence mTitle -> i
    java.lang.CharSequence mSubtitle -> j
    java.lang.CharSequence mHomeDescription -> k
    androidx.appcompat.widget.Toolbar mToolbar -> a
    android.view.View mTabView -> c
    boolean mTitleSet -> h
    android.view.View mCustomView -> d
    int mDefaultNavigationContentDescription -> p
    android.graphics.drawable.Drawable mDefaultNavigationIcon -> q
    1:1:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    1:1:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    2:2:void setTitle(java.lang.CharSequence):0:0 -> <init>
    2:2:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    2:2:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    3:3:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    3:3:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    4:4:void setSubtitle(java.lang.CharSequence):0:0 -> <init>
    4:4:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    4:4:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    5:5:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    5:5:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    6:6:void setLogo(android.graphics.drawable.Drawable):0:0 -> <init>
    6:6:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    6:6:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    7:7:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    7:7:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    8:8:void setIcon(android.graphics.drawable.Drawable):0:0 -> <init>
    8:8:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    8:8:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    9:9:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    9:9:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    10:10:void setNavigationIcon(android.graphics.drawable.Drawable):0:0 -> <init>
    10:10:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    10:10:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    11:11:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    11:11:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    12:12:void setCustomView(android.view.View):0:0 -> <init>
    12:12:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    12:12:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    13:13:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    13:13:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    14:14:int detectDisplayOptions():0:0 -> <init>
    14:14:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    14:14:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    15:15:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    15:15:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    16:16:void setDefaultNavigationContentDescription(int):0:0 -> <init>
    16:16:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    16:16:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    17:17:void setNavigationContentDescription(int):0:0 -> <init>
    17:17:void setDefaultNavigationContentDescription(int):0 -> <init>
    17:17:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    17:17:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    18:18:void setNavigationContentDescription(java.lang.CharSequence):0:0 -> <init>
    18:18:void setNavigationContentDescription(int):0 -> <init>
    18:18:void setDefaultNavigationContentDescription(int):0 -> <init>
    18:18:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0 -> <init>
    18:18:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    19:19:void <init>(androidx.appcompat.widget.Toolbar,boolean,int,int):0:0 -> <init>
    19:19:void <init>(androidx.appcompat.widget.Toolbar,boolean):0 -> <init>
    void collapseActionView() -> a
    void setCollapsible(boolean) -> a
    void setDisplayOptions(int) -> a
    void setEmbeddedTabView(androidx.appcompat.widget.ScrollingTabContainerView) -> a
    void setMenu(android.view.Menu,androidx.appcompat.view.menu.MenuPresenter$Callback) -> a
    1:1:void setTitleInt(java.lang.CharSequence):0:0 -> a
    1:1:void setWindowTitle(java.lang.CharSequence):0 -> a
    androidx.core.view.ViewPropertyAnimatorCompat setupAnimatorToVisibility(int,long) -> a
    android.content.Context getContext() -> b
    void setHomeButtonEnabled(boolean) -> b
    void setTitleInt(java.lang.CharSequence) -> b
    void setVisibility(int) -> b
    int getDisplayOptions() -> c
    int getNavigationMode() -> d
    android.view.ViewGroup getViewGroup() -> e
    boolean hasExpandedActionView() -> f
    void initIndeterminateProgress() -> g
    void initProgress() -> h
    void updateHomeAccessibility() -> i
    void updateNavigationIcon() -> j
    void updateToolbarLogo() -> k
androidx.appcompat.widget.ToolbarWidgetWrapper$1 -> androidx.appcompat.widget.g1:
    androidx.appcompat.widget.ToolbarWidgetWrapper this$0 -> c
    androidx.appcompat.view.menu.ActionMenuItem mNavItem -> b
androidx.appcompat.widget.ToolbarWidgetWrapper$2 -> androidx.appcompat.widget.h1:
    androidx.appcompat.widget.ToolbarWidgetWrapper this$0 -> c
    boolean mCanceled -> a
    int val$visibility -> b
    void onAnimationEnd(android.view.View) -> a
    void onAnimationStart(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
androidx.appcompat.widget.TooltipCompat -> androidx.appcompat.widget.j1:
    android.view.inputmethod.InputConnection androidx.appcompat.widget.AppCompatHintHelper.onCreateInputConnection(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,android.view.View) -> a
    void setTooltipText(android.view.View,java.lang.CharSequence) -> a
androidx.appcompat.widget.TooltipCompatHandler -> androidx.appcompat.widget.m1:
    java.lang.Runnable mShowRunnable -> e
    androidx.appcompat.widget.TooltipCompatHandler sActiveHandler -> l
    androidx.appcompat.widget.TooltipCompatHandler sPendingHandler -> k
    boolean mFromTouch -> j
    int mAnchorY -> h
    java.lang.CharSequence mTooltipText -> c
    java.lang.Runnable mHideRunnable -> f
    int mAnchorX -> g
    int mHoverSlop -> d
    android.view.View mAnchor -> b
    androidx.appcompat.widget.TooltipPopup mPopup -> i
    void hide() -> a
    1:1:void cancelPendingShow():0:0 -> a
    1:1:void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler):0 -> a
    2:2:void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler):0:0 -> a
    3:3:void scheduleShow():0:0 -> a
    3:3:void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler):0 -> a
    void setTooltipText(android.view.View,java.lang.CharSequence) -> a
    void show(boolean) -> a
    void clearAnchorPos() -> b
    1:1:boolean updateAnchorPos(android.view.MotionEvent):0:0 -> onHover
    1:1:boolean onHover(android.view.View,android.view.MotionEvent):0 -> onHover
    2:2:boolean onHover(android.view.View,android.view.MotionEvent):0:0 -> onHover
androidx.appcompat.widget.TooltipCompatHandler$1 -> androidx.appcompat.widget.k1:
    androidx.appcompat.widget.TooltipCompatHandler this$0 -> b
androidx.appcompat.widget.TooltipCompatHandler$2 -> androidx.appcompat.widget.l1:
    androidx.appcompat.widget.TooltipCompatHandler this$0 -> b
androidx.appcompat.widget.TooltipPopup -> androidx.appcompat.widget.n1:
    android.content.Context mContext -> a
    int[] mTmpAnchorPos -> f
    int[] mTmpAppPos -> g
    android.widget.TextView mMessageView -> c
    android.graphics.Rect mTmpDisplayFrame -> e
    android.view.View mContentView -> b
    android.view.WindowManager$LayoutParams mLayoutParams -> d
    1:1:boolean isShowing():0:0 -> a
    1:1:void hide():0 -> a
    2:2:void hide():0:0 -> a
    3:3:boolean isShowing():0:0 -> a
    3:3:void show(android.view.View,int,int,boolean,java.lang.CharSequence):0 -> a
    4:4:void show(android.view.View,int,int,boolean,java.lang.CharSequence):0:0 -> a
    5:5:void computePosition(android.view.View,int,int,boolean,android.view.WindowManager$LayoutParams):0:0 -> a
    5:5:void show(android.view.View,int,int,boolean,java.lang.CharSequence):0 -> a
    6:6:android.view.View getAppRootView(android.view.View):0:0 -> a
    6:6:void computePosition(android.view.View,int,int,boolean,android.view.WindowManager$LayoutParams):0 -> a
    6:6:void show(android.view.View,int,int,boolean,java.lang.CharSequence):0 -> a
    7:7:void computePosition(android.view.View,int,int,boolean,android.view.WindowManager$LayoutParams):0:0 -> a
    7:7:void show(android.view.View,int,int,boolean,java.lang.CharSequence):0 -> a
    8:8:void show(android.view.View,int,int,boolean,java.lang.CharSequence):0:0 -> a
androidx.appcompat.widget.VectorEnabledTintResources -> androidx.appcompat.widget.o1:
    boolean shouldBeUsed() -> a
androidx.appcompat.widget.ViewStubCompat -> androidx.appcompat.widget.ViewStubCompat:
    android.view.LayoutInflater mInflater -> e
    java.lang.ref.WeakReference mInflatedViewRef -> d
    int mLayoutResource -> b
    int mInflatedId -> c
    android.view.View inflate() -> a
    void setLayoutInflater(android.view.LayoutInflater) -> a
androidx.appcompat.widget.ViewUtils -> androidx.appcompat.widget.p1:
    java.lang.reflect.Method sComputeFitSystemWindowsMethod -> a
    void computeFitSystemWindows(android.view.View,android.graphics.Rect,android.graphics.Rect) -> a
    boolean isLayoutRtl(android.view.View) -> a
    void makeOptionalFitsSystemWindows(android.view.View) -> b
androidx.appcompat.widget.WithHint -> androidx.appcompat.widget.q1:
    java.lang.CharSequence getHint() -> a
androidx.arch.core.executor.ArchTaskExecutor -> b.c.a.a.c:
    androidx.arch.core.executor.ArchTaskExecutor sInstance -> c
    androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor -> b
    androidx.arch.core.executor.TaskExecutor mDelegate -> a
    void executeOnDiskIO(java.lang.Runnable) -> a
    boolean isMainThread() -> a
    androidx.arch.core.executor.ArchTaskExecutor getInstance() -> b
    void postToMainThread(java.lang.Runnable) -> b
androidx.arch.core.executor.ArchTaskExecutor$1 -> b.c.a.a.a:
androidx.arch.core.executor.ArchTaskExecutor$2 -> b.c.a.a.b:
androidx.arch.core.executor.DefaultTaskExecutor -> b.c.a.a.e:
    android.os.Handler mMainHandler -> c
    java.lang.Object mLock -> a
    java.util.concurrent.ExecutorService mDiskIO -> b
    void executeOnDiskIO(java.lang.Runnable) -> a
    boolean isMainThread() -> a
    void postToMainThread(java.lang.Runnable) -> b
androidx.arch.core.executor.DefaultTaskExecutor$1 -> b.c.a.a.d:
    java.util.concurrent.atomic.AtomicInteger mThreadId -> a
androidx.arch.core.executor.TaskExecutor -> b.c.a.a.f:
    void executeOnDiskIO(java.lang.Runnable) -> a
    boolean isMainThread() -> a
    void postToMainThread(java.lang.Runnable) -> b
androidx.arch.core.internal.FastSafeIterableMap -> b.c.a.b.a:
    java.util.HashMap mHashMap -> f
    androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object) -> a
androidx.arch.core.internal.SafeIterableMap -> b.c.a.b.h:
    androidx.arch.core.internal.SafeIterableMap$Entry mStart -> b
    androidx.arch.core.internal.SafeIterableMap$Entry mEnd -> c
    java.util.WeakHashMap mIterators -> d
    int mSize -> e
    java.util.Iterator descendingIterator() -> a
    androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object) -> a
    java.util.Map$Entry eldest() -> b
    androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions() -> c
    java.util.Map$Entry newest() -> d
    1:1:int size():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
androidx.arch.core.internal.SafeIterableMap$AscendingIterator -> b.c.a.b.b:
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> c
androidx.arch.core.internal.SafeIterableMap$DescendingIterator -> b.c.a.b.c:
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> c
androidx.arch.core.internal.SafeIterableMap$Entry -> b.c.a.b.d:
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> d
    androidx.arch.core.internal.SafeIterableMap$Entry mPrevious -> e
    java.lang.Object mKey -> b
    java.lang.Object mValue -> c
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions -> b.c.a.b.e:
    androidx.arch.core.internal.SafeIterableMap$Entry mCurrent -> b
    androidx.arch.core.internal.SafeIterableMap this$0 -> d
    boolean mBeforeStart -> c
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
androidx.arch.core.internal.SafeIterableMap$ListIterator -> b.c.a.b.f:
    androidx.arch.core.internal.SafeIterableMap$Entry mExpectedEnd -> b
    androidx.arch.core.internal.SafeIterableMap$Entry mNext -> c
    androidx.arch.core.internal.SafeIterableMap$Entry nextNode() -> a
    1:1:androidx.arch.core.internal.SafeIterableMap$Entry nextNode():0:0 -> a
    1:1:void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry):0 -> a
    2:2:void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry):0:0 -> a
    androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry) -> b
    androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry) -> c
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
androidx.arch.core.internal.SafeIterableMap$SupportRemove -> b.c.a.b.g:
    void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry) -> a
androidx.browser.browseractions.BrowserActionsFallbackMenuView -> androidx.browser.browseractions.BrowserActionsFallbackMenuView:
    int mBrowserActionsMenuMinPaddingPx -> b
    int mBrowserActionsMenuMaxWidthPx -> c
androidx.browser.customtabs.CustomTabColorSchemeParams -> b.d.a.b:
    java.lang.Integer navigationBarColor -> c
    java.lang.Integer toolbarColor -> a
    java.lang.Integer secondaryToolbarColor -> b
    androidx.browser.customtabs.CustomTabColorSchemeParams fromBundle(android.os.Bundle) -> a
    android.os.Bundle toBundle() -> a
androidx.browser.customtabs.CustomTabColorSchemeParams$Builder -> b.d.a.a:
    java.lang.Integer mNavigationBarColor -> c
    java.lang.Integer mToolbarColor -> a
    java.lang.Integer mSecondaryToolbarColor -> b
    androidx.browser.customtabs.CustomTabColorSchemeParams build() -> a
    androidx.browser.customtabs.CustomTabColorSchemeParams$Builder setNavigationBarColor(int) -> a
    androidx.browser.customtabs.CustomTabColorSchemeParams$Builder setToolbarColor(int) -> b
androidx.browser.customtabs.CustomTabsCallback -> b.d.a.c:
androidx.browser.customtabs.CustomTabsClient -> b.d.a.e:
    android.content.ComponentName mServiceComponentName -> b
    android.content.Context mApplicationContext -> c
    android.support.customtabs.ICustomTabsService mService -> a
    boolean bindCustomTabsService(android.content.Context,java.lang.String,androidx.browser.customtabs.CustomTabsServiceConnection) -> a
    1:1:android.app.PendingIntent createSessionId(android.content.Context,int):0:0 -> a
    1:1:androidx.browser.customtabs.CustomTabsSession newSession(androidx.browser.customtabs.CustomTabsCallback,int):0 -> a
    2:2:android.support.customtabs.ICustomTabsCallback$Stub createCallbackWrapper(androidx.browser.customtabs.CustomTabsCallback):0:0 -> a
    2:2:androidx.browser.customtabs.CustomTabsSession newSessionInternal(androidx.browser.customtabs.CustomTabsCallback,android.app.PendingIntent):0 -> a
    2:2:androidx.browser.customtabs.CustomTabsSession newSession(androidx.browser.customtabs.CustomTabsCallback,int):0 -> a
    3:3:androidx.browser.customtabs.CustomTabsSession newSessionInternal(androidx.browser.customtabs.CustomTabsCallback,android.app.PendingIntent):0:0 -> a
    3:3:androidx.browser.customtabs.CustomTabsSession newSession(androidx.browser.customtabs.CustomTabsCallback,int):0 -> a
    boolean warmup(long) -> a
androidx.browser.customtabs.CustomTabsClient$2 -> b.d.a.d:
    android.os.Handler mHandler -> a
    void onMessageChannelReady(android.os.Bundle) -> a
    void onNavigationEvent(int,android.os.Bundle) -> a
    void onPostMessage(java.lang.String,android.os.Bundle) -> a
    void onRelationshipValidationResult(int,android.net.Uri,boolean,android.os.Bundle) -> a
    void extraCallback(java.lang.String,android.os.Bundle) -> b
    android.os.Bundle extraCallbackWithResult(java.lang.String,android.os.Bundle) -> c
androidx.browser.customtabs.CustomTabsIntent -> b.d.a.g:
    android.content.Intent intent -> a
    android.os.Bundle startAnimationBundle -> b
    1:1:androidx.browser.customtabs.CustomTabColorSchemeParams androidx.browser.customtabs.CustomTabColorSchemeParams.withDefaults(androidx.browser.customtabs.CustomTabColorSchemeParams):0:0 -> a
    1:1:androidx.browser.customtabs.CustomTabColorSchemeParams getColorSchemeParams(android.content.Intent,int):0 -> a
    2:2:androidx.browser.customtabs.CustomTabColorSchemeParams getColorSchemeParams(android.content.Intent,int):0:0 -> a
androidx.browser.customtabs.CustomTabsIntent$Builder -> b.d.a.f:
    androidx.browser.customtabs.CustomTabColorSchemeParams$Builder mDefaultColorSchemeBuilder -> b
    android.content.Intent mIntent -> a
    android.os.Bundle mStartAnimationBundle -> d
    android.util.SparseArray mColorSchemeParamBundles -> g
    boolean mInstantAppsEnabled -> f
    java.util.ArrayList mActionButtons -> e
    java.util.ArrayList mMenuItems -> c
    androidx.browser.customtabs.CustomTabsIntent build() -> a
    androidx.browser.customtabs.CustomTabsIntent$Builder setColorScheme(int) -> a
    androidx.browser.customtabs.CustomTabsIntent$Builder setColorSchemeParams(int,androidx.browser.customtabs.CustomTabColorSchemeParams) -> a
    androidx.browser.customtabs.CustomTabsIntent$Builder setSession(androidx.browser.customtabs.CustomTabsSession) -> a
    1:1:void androidx.core.app.BundleCompat.putBinder(android.os.Bundle,java.lang.String,android.os.IBinder):0:0 -> a
    1:1:void setSessionParameters(android.os.IBinder,android.app.PendingIntent):0 -> a
    2:2:void setSessionParameters(android.os.IBinder,android.app.PendingIntent):0:0 -> a
    androidx.browser.customtabs.CustomTabsIntent$Builder setNavigationBarColor(int) -> b
    androidx.browser.customtabs.CustomTabsIntent$Builder setToolbarColor(int) -> c
androidx.browser.customtabs.CustomTabsServiceConnection -> b.d.a.i:
    android.content.Context mApplicationContext -> a
    void onCustomTabsServiceConnected(android.content.ComponentName,androidx.browser.customtabs.CustomTabsClient) -> a
    void setApplicationContext(android.content.Context) -> a
androidx.browser.customtabs.CustomTabsServiceConnection$1 -> b.d.a.h:
androidx.browser.customtabs.CustomTabsSession -> b.d.a.j:
    android.support.customtabs.ICustomTabsCallback mCallback -> b
    android.content.ComponentName mComponentName -> c
    android.support.customtabs.ICustomTabsService mService -> a
    android.app.PendingIntent mId -> d
    android.os.IBinder getBinder() -> a
    1:1:android.os.Bundle createBundleWithId(android.os.Bundle):0:0 -> a
    1:1:boolean receiveFile(android.net.Uri,int,android.os.Bundle):0 -> a
    2:2:void addIdToBundle(android.os.Bundle):0:0 -> a
    2:2:android.os.Bundle createBundleWithId(android.os.Bundle):0 -> a
    2:2:boolean receiveFile(android.net.Uri,int,android.os.Bundle):0 -> a
    3:3:boolean receiveFile(android.net.Uri,int,android.os.Bundle):0:0 -> a
    android.content.ComponentName getComponentName() -> b
    android.app.PendingIntent getId() -> c
androidx.browser.trusted.-$$Lambda$TokenContents$EhAh0EiAbuzFn6siY46Fy8sz2WQ -> b.d.b.a:
    androidx.browser.trusted.-$$Lambda$TokenContents$EhAh0EiAbuzFn6siY46Fy8sz2WQ INSTANCE -> b
androidx.browser.trusted.NotificationApiHelperForM -> b.d.b.b:
    void androidx.browser.trusted.TrustedWebActivityServiceConnection.ensureBundleContains(android.os.Bundle,java.lang.String) -> a
    byte[] androidx.browser.trusted.PackageIdentityUtils.getCertificateSHA256Fingerprint(android.content.pm.Signature) -> a
    1:1:androidx.browser.trusted.PackageIdentityUtils$SignaturesCompat androidx.browser.trusted.PackageIdentityUtils.getImpl():0:0 -> a
    1:1:java.util.List androidx.browser.trusted.PackageIdentityUtils.getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager):0 -> a
    2:2:java.util.List androidx.browser.trusted.PackageIdentityUtils.getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager):0:0 -> a
    boolean androidx.browser.trusted.NotificationApiHelperForO.isChannelEnabled(android.app.NotificationManager,java.lang.String) -> a
    3:3:androidx.browser.trusted.PackageIdentityUtils$SignaturesCompat androidx.browser.trusted.PackageIdentityUtils.getImpl():0:0 -> a
    3:3:boolean androidx.browser.trusted.PackageIdentityUtils.packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents):0 -> a
    4:4:boolean androidx.browser.trusted.PackageIdentityUtils.packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents):0:0 -> a
androidx.browser.trusted.PackageIdentityUtils$Api28Implementation -> b.d.b.c:
    java.util.List getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager) -> a
    boolean packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents) -> a
androidx.browser.trusted.PackageIdentityUtils$Pre28Implementation -> b.d.b.d:
    java.util.List getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager) -> a
    boolean packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents) -> a
androidx.browser.trusted.PackageIdentityUtils$SignaturesCompat -> b.d.b.e:
    java.util.List getFingerprintsForPackage(java.lang.String,android.content.pm.PackageManager) -> a
    boolean packageMatchesToken(java.lang.String,android.content.pm.PackageManager,androidx.browser.trusted.TokenContents) -> a
androidx.browser.trusted.Token -> b.d.b.f:
    androidx.browser.trusted.TokenContents mContents -> a
    androidx.browser.trusted.Token deserialize(byte[]) -> a
    boolean matches(java.lang.String,android.content.pm.PackageManager) -> a
    byte[] serialize() -> a
    androidx.browser.trusted.Token create(java.lang.String,android.content.pm.PackageManager) -> b
androidx.browser.trusted.TokenContents -> b.d.b.g:
    byte[] mContents -> a
    java.util.List mFingerprints -> c
    java.lang.String mPackageName -> b
    int compareByteArrays(byte[],byte[]) -> a
    1:1:byte[] createToken(java.lang.String,java.util.List):0:0 -> a
    1:1:androidx.browser.trusted.TokenContents create(java.lang.String,java.util.List):0 -> a
    2:2:androidx.browser.trusted.TokenContents create(java.lang.String,java.util.List):0:0 -> a
    androidx.browser.trusted.TokenContents deserialize(byte[]) -> a
    byte[] getFingerprint(int) -> a
    java.lang.String getPackageName() -> a
    int lambda$EhAh0EiAbuzFn6siY46Fy8sz2WQ(byte[],byte[]) -> b
    byte[] serialize() -> b
    void parseIfNeeded() -> c
androidx.browser.trusted.TrustedWebActivityDisplayMode$DefaultMode -> b.d.b.h:
    android.os.Bundle toBundle() -> a
androidx.browser.trusted.TrustedWebActivityIntent -> b.d.b.i:
    android.content.Intent mIntent -> a
    android.content.Intent getIntent() -> a
androidx.browser.trusted.TrustedWebActivityIntentBuilder -> b.d.b.j:
    java.util.List mAdditionalTrustedOrigins -> c
    android.os.Bundle mSplashScreenParams -> d
    androidx.browser.customtabs.CustomTabsIntent$Builder mIntentBuilder -> b
    androidx.browser.trusted.TrustedWebActivityDisplayMode mDisplayMode -> e
    android.net.Uri mUri -> a
    androidx.browser.trusted.TrustedWebActivityIntent build(androidx.browser.customtabs.CustomTabsSession) -> a
    androidx.browser.customtabs.CustomTabsIntent buildCustomTabsIntent() -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setAdditionalTrustedOrigins(java.util.List) -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setColorScheme(int) -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setColorSchemeParams(int,androidx.browser.customtabs.CustomTabColorSchemeParams) -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setSplashScreenParams(android.os.Bundle) -> a
    android.net.Uri getUri() -> b
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setNavigationBarColor(int) -> b
    androidx.browser.trusted.TrustedWebActivityIntentBuilder setToolbarColor(int) -> c
androidx.browser.trusted.TrustedWebActivityService -> b.d.b.l:
    android.app.NotificationManager mNotificationManager -> b
    int mVerifiedUid -> c
    android.support.customtabs.trusted.ITrustedWebActivityService$Stub mBinder -> d
    androidx.browser.trusted.TokenStore getTokenStore() -> a
    boolean onAreNotificationsEnabled(java.lang.String) -> a
    void onCancelNotification(java.lang.String,int) -> a
    1:1:android.app.Notification androidx.browser.trusted.NotificationApiHelperForO.copyNotificationOntoChannel(android.content.Context,android.app.NotificationManager,android.app.Notification,java.lang.String,java.lang.String):0:0 -> a
    1:1:boolean onNotifyNotificationWithChannel(java.lang.String,int,android.app.Notification,java.lang.String):0 -> a
    2:2:boolean onNotifyNotificationWithChannel(java.lang.String,int,android.app.Notification,java.lang.String):0:0 -> a
    java.lang.String channelNameToId(java.lang.String) -> b
    1:1:android.os.Parcelable[] androidx.browser.trusted.NotificationApiHelperForM.getActiveNotifications(android.app.NotificationManager):0:0 -> b
    1:1:android.os.Parcelable[] onGetActiveNotifications():0 -> b
    2:2:android.os.Parcelable[] onGetActiveNotifications():0:0 -> b
    android.os.Bundle onGetSmallIconBitmap() -> c
    int onGetSmallIconId() -> d
    void ensureOnCreateCalled() -> e
androidx.browser.trusted.TrustedWebActivityService$1 -> b.d.b.k:
    androidx.browser.trusted.TrustedWebActivityService this$0 -> a
    1:1:android.os.Bundle androidx.browser.trusted.TrustedWebActivityServiceConnection$ActiveNotificationsArgs.toBundle():0:0 -> a
    1:1:android.os.Bundle getActiveNotifications():0 -> a
    1:1:androidx.browser.trusted.TrustedWebActivityServiceConnection$CancelNotificationArgs androidx.browser.trusted.TrustedWebActivityServiceConnection$CancelNotificationArgs.fromBundle(android.os.Bundle):0:0 -> b
    1:1:void cancelNotification(android.os.Bundle):0 -> b
    2:2:void cancelNotification(android.os.Bundle):0:0 -> b
    int getSmallIconId() -> b
    android.os.Bundle getSmallIconBitmap() -> c
    1:1:androidx.browser.trusted.TrustedWebActivityServiceConnection$NotifyNotificationArgs androidx.browser.trusted.TrustedWebActivityServiceConnection$NotifyNotificationArgs.fromBundle(android.os.Bundle):0:0 -> c
    1:1:android.os.Bundle notifyNotificationWithChannel(android.os.Bundle):0 -> c
    2:2:android.os.Bundle notifyNotificationWithChannel(android.os.Bundle):0:0 -> c
    3:3:android.os.Bundle androidx.browser.trusted.TrustedWebActivityServiceConnection$ResultArgs.toBundle():0:0 -> c
    3:3:android.os.Bundle notifyNotificationWithChannel(android.os.Bundle):0 -> c
    1:1:androidx.browser.trusted.TrustedWebActivityServiceConnection$NotificationsEnabledArgs androidx.browser.trusted.TrustedWebActivityServiceConnection$NotificationsEnabledArgs.fromBundle(android.os.Bundle):0:0 -> d
    1:1:android.os.Bundle areNotificationsEnabled(android.os.Bundle):0 -> d
    2:2:android.os.Bundle areNotificationsEnabled(android.os.Bundle):0:0 -> d
    3:3:android.os.Bundle androidx.browser.trusted.TrustedWebActivityServiceConnection$ResultArgs.toBundle():0:0 -> d
    3:3:android.os.Bundle areNotificationsEnabled(android.os.Bundle):0 -> d
    void checkCaller() -> d
androidx.collection.ArrayMap -> b.e.b:
    androidx.collection.MapCollections mCollections -> i
    boolean retainAll(java.util.Collection) -> a
    androidx.collection.MapCollections getCollection() -> b
    1:1:java.util.Set androidx.collection.MapCollections.getEntrySet():0:0 -> entrySet
    1:1:java.util.Set entrySet():0 -> entrySet
    1:1:java.util.Set androidx.collection.MapCollections.getKeySet():0:0 -> keySet
    1:1:java.util.Set keySet():0 -> keySet
    1:1:java.util.Collection androidx.collection.MapCollections.getValues():0:0 -> values
    1:1:java.util.Collection values():0 -> values
androidx.collection.ArrayMap$1 -> b.e.a:
    androidx.collection.ArrayMap this$0 -> d
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    void colPut(java.lang.Object,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    1:1:java.lang.Object androidx.collection.SimpleArrayMap.setValueAt(int,java.lang.Object):0:0 -> a
    1:1:java.lang.Object colSetValue(int,java.lang.Object):0 -> a
    java.util.Map colGetMap() -> b
    int colIndexOfValue(java.lang.Object) -> b
    int colGetSize() -> c
androidx.collection.ArraySet -> b.e.d:
    int[] INT -> f
    androidx.collection.MapCollections mCollections -> e
    java.lang.Object[] mArray -> c
    int[] mHashes -> b
    int sTwiceBaseCacheSize -> k
    int sBaseCacheSize -> i
    java.lang.Object[] sTwiceBaseCache -> j
    int mSize -> d
    java.lang.Object[] sBaseCache -> h
    java.lang.Object[] OBJECT -> g
    1:1:void <init>(int):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    void freeArrays(int[],java.lang.Object[],int) -> a
    int indexOf(java.lang.Object) -> a
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    java.lang.Object removeAt(int) -> a
    1:1:void ensureCapacity(int):0:0 -> addAll
    1:1:boolean addAll(java.util.Collection):0 -> addAll
    2:2:boolean addAll(java.util.Collection):0:0 -> addAll
    java.lang.Object valueAt(int) -> b
    void allocArrays(int) -> c
    1:1:int size():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    3:3:java.lang.Object valueAt(int):0:0 -> equals
    3:3:boolean equals(java.lang.Object):0 -> equals
    4:4:boolean equals(java.lang.Object):0:0 -> equals
    1:1:androidx.collection.MapCollections getCollection():0:0 -> iterator
    1:1:java.util.Iterator iterator():0 -> iterator
    2:2:java.util.Set androidx.collection.MapCollections.getKeySet():0:0 -> iterator
    2:2:java.util.Iterator iterator():0 -> iterator
    3:3:java.util.Iterator iterator():0:0 -> iterator
    1:1:java.lang.Object valueAt(int):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
androidx.collection.ArraySet$1 -> b.e.c:
    androidx.collection.ArraySet this$0 -> d
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    void colPut(java.lang.Object,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    java.util.Map colGetMap() -> b
    int colIndexOfValue(java.lang.Object) -> b
    int colGetSize() -> c
androidx.collection.ContainerHelpers -> b.e.e:
    java.lang.Object[] EMPTY_OBJECTS -> c
    long[] EMPTY_LONGS -> b
    int[] EMPTY_INTS -> a
    int binarySearch(int[],int,int) -> a
    int binarySearch(long[],int,long) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int idealByteArraySize(int) -> a
    int idealIntArraySize(int) -> b
    int idealLongArraySize(int) -> c
androidx.collection.LongSparseArray -> b.e.f:
    long[] mKeys -> c
    java.lang.Object[] mValues -> d
    java.lang.Object DELETED -> f
    int mSize -> e
    boolean mGarbage -> b
    1:1:void <init>(int):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    void append(long,java.lang.Object) -> a
    void clear() -> a
    1:1:void remove(long):0:0 -> a
    1:1:void delete(long):0 -> a
    void gc() -> b
    java.lang.Object get(long,java.lang.Object) -> b
    void put(long,java.lang.Object) -> c
    1:1:int size():0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
    3:3:long keyAt(int):0:0 -> toString
    3:3:java.lang.String toString():0 -> toString
    4:4:java.lang.String toString():0:0 -> toString
    5:5:java.lang.Object valueAt(int):0:0 -> toString
    5:5:java.lang.String toString():0 -> toString
    6:6:java.lang.String toString():0:0 -> toString
androidx.collection.LruCache -> b.e.g:
    java.util.LinkedHashMap map -> a
    int hitCount -> f
    int missCount -> g
    int putCount -> d
    int evictionCount -> e
    int size -> b
    int maxSize -> c
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    void trimToSize(int) -> a
androidx.collection.MapCollections -> b.e.m:
    androidx.collection.MapCollections$KeySet mKeySet -> b
    androidx.collection.MapCollections$ValuesCollection mValues -> c
    androidx.collection.MapCollections$EntrySet mEntrySet -> a
    void colClear() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    void colPut(java.lang.Object,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> a
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    java.util.Map colGetMap() -> b
    int colIndexOfValue(java.lang.Object) -> b
    java.lang.Object[] toArrayHelper(int) -> b
    int colGetSize() -> c
androidx.collection.MapCollections$ArrayIterator -> b.e.h:
    androidx.collection.MapCollections this$0 -> f
    boolean mCanRemove -> e
    int mIndex -> d
    int mOffset -> b
    int mSize -> c
androidx.collection.MapCollections$EntrySet -> b.e.i:
    androidx.collection.MapCollections this$0 -> b
    1:1:boolean add(java.util.Map$Entry):0:0 -> add
    1:1:boolean add(java.lang.Object):0 -> add
androidx.collection.MapCollections$KeySet -> b.e.j:
    androidx.collection.MapCollections this$0 -> b
    1:1:boolean androidx.collection.MapCollections.containsAllHelper(java.util.Map,java.util.Collection):0:0 -> containsAll
    1:1:boolean containsAll(java.util.Collection):0 -> containsAll
    1:1:boolean androidx.collection.MapCollections.removeAllHelper(java.util.Map,java.util.Collection):0:0 -> removeAll
    1:1:boolean removeAll(java.util.Collection):0 -> removeAll
androidx.collection.MapCollections$MapIterator -> b.e.k:
    androidx.collection.MapCollections this$0 -> e
    int mEnd -> b
    int mIndex -> c
    boolean mEntryValid -> d
    1:1:java.util.Map$Entry next():0:0 -> next
    1:1:java.lang.Object next():0 -> next
androidx.collection.MapCollections$ValuesCollection -> b.e.l:
    androidx.collection.MapCollections this$0 -> b
androidx.collection.SimpleArrayMap -> b.e.n:
    java.lang.Object[] mBaseCache -> e
    java.lang.Object[] mArray -> c
    int[] mHashes -> b
    int mTwiceBaseCacheSize -> h
    int mBaseCacheSize -> f
    int mSize -> d
    java.lang.Object[] mTwiceBaseCache -> g
    void ensureCapacity(int) -> a
    void freeArrays(int[],java.lang.Object[],int) -> a
    1:1:int binarySearchHashes(int[],int,int):0:0 -> a
    1:1:int indexOf(java.lang.Object,int):0 -> a
    2:2:int indexOf(java.lang.Object,int):0:0 -> a
    3:3:int binarySearchHashes(int[],int,int):0:0 -> a
    3:3:int indexOf(java.lang.Object,int):0 -> a
    int indexOfKey(java.lang.Object) -> a
    4:4:int binarySearchHashes(int[],int,int):0:0 -> a
    4:4:int indexOfNull():0 -> a
    5:5:int indexOfNull():0:0 -> a
    6:6:int binarySearchHashes(int[],int,int):0:0 -> a
    6:6:int indexOfNull():0 -> a
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    int indexOfValue(java.lang.Object) -> b
    java.lang.Object keyAt(int) -> b
    java.lang.Object removeAt(int) -> c
    java.lang.Object valueAt(int) -> d
    void allocArrays(int) -> e
    1:1:int size():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
    2:2:boolean equals(java.lang.Object):0:0 -> equals
    3:3:int size():0:0 -> equals
    3:3:boolean equals(java.lang.Object):0 -> equals
    4:4:boolean equals(java.lang.Object):0:0 -> equals
    1:1:java.lang.Object get(java.lang.Object):0:0 -> putIfAbsent
    1:1:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object):0 -> putIfAbsent
    2:2:java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object):0:0 -> putIfAbsent
androidx.collection.SparseArrayCompat -> b.e.o:
    java.lang.Object[] mValues -> d
    java.lang.Object DELETED -> f
    int[] mKeys -> c
    int mSize -> e
    boolean mGarbage -> b
    void append(int,java.lang.Object) -> a
    void clear() -> a
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> b
    int keyAt(int) -> b
    int size() -> b
    void gc() -> c
    void put(int,java.lang.Object) -> c
    void remove(int) -> c
    java.lang.Object valueAt(int) -> d
androidx.core.R$styleable -> b.f.a:
    int[] GradientColor -> g
    int[] GradientColorItem -> i
    int GradientColorItem_android_color -> j
    int[] FontFamily -> c
    int GradientColor_android_startColor -> h
    int[] FontFamilyFont -> e
    int FontFamilyFont_android_font -> f
    int FontFamily_fontProviderAuthority -> d
    int[] ColorStateListItem -> a
    int ColorStateListItem_android_color -> b
androidx.core.app.ActivityCompat -> androidx.core.app.c:
    void finishAffinity(android.app.Activity) -> a
    androidx.core.app.ActivityCompat$PermissionCompatDelegate getPermissionCompatDelegate() -> a
androidx.core.app.ActivityCompat$OnRequestPermissionsResultCallback -> androidx.core.app.a:
androidx.core.app.ActivityCompat$RequestPermissionsRequestCodeValidator -> androidx.core.app.b:
androidx.core.app.AppOpsManagerCompat -> androidx.core.app.d:
    void androidx.core.util.DebugUtils.buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
    int androidx.core.util.Preconditions.checkArgumentNonnegative(int) -> a
    java.lang.Object androidx.core.util.Preconditions.checkNotNull(java.lang.Object,java.lang.Object) -> a
    1:1:int androidx.core.content.PermissionChecker.checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String):0:0 -> a
    1:1:int androidx.core.content.PermissionChecker.checkSelfPermission(android.content.Context,java.lang.String):0 -> a
    2:2:java.lang.String permissionToOp(java.lang.String):0:0 -> a
    2:2:int androidx.core.content.PermissionChecker.checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String):0 -> a
    2:2:int androidx.core.content.PermissionChecker.checkSelfPermission(android.content.Context,java.lang.String):0 -> a
    3:3:int androidx.core.content.PermissionChecker.checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String):0:0 -> a
    3:3:int androidx.core.content.PermissionChecker.checkSelfPermission(android.content.Context,java.lang.String):0 -> a
    4:4:int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String):0:0 -> a
    4:4:int androidx.core.content.PermissionChecker.checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String):0 -> a
    4:4:int androidx.core.content.PermissionChecker.checkSelfPermission(android.content.Context,java.lang.String):0 -> a
    int androidx.core.view.GravityCompat.getAbsoluteGravity(int,int) -> a
    5:5:java.lang.String androidx.core.app.NavUtils.getParentActivityName(android.app.Activity):0:0 -> a
    5:5:android.content.Intent androidx.core.app.NavUtils.getParentActivityIntent(android.app.Activity):0 -> a
    6:6:android.content.Intent androidx.core.app.NavUtils.getParentActivityIntent(android.app.Activity):0:0 -> a
    7:7:java.lang.String androidx.core.app.NavUtils.getParentActivityName(android.app.Activity):0:0 -> a
    7:7:android.content.Intent androidx.core.app.NavUtils.getParentActivityIntent(android.app.Activity):0 -> a
    android.content.Intent androidx.core.app.NavUtils.getParentActivityIntent(android.content.Context,android.content.ComponentName) -> a
    int androidx.core.util.ObjectsCompat.hash(java.lang.Object[]) -> a
    boolean androidx.core.view.ViewParentCompat.onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean) -> a
    boolean androidx.core.view.ViewParentCompat.onNestedPreFling(android.view.ViewParent,android.view.View,float,float) -> a
    void androidx.core.view.ViewParentCompat.onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[],int) -> a
    void androidx.core.view.ViewParentCompat.onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int,int,int[]) -> a
    java.lang.String androidx.core.app.NavUtils.getParentActivityName(android.content.Context,android.content.ComponentName) -> b
androidx.core.app.ComponentActivity -> androidx.core.app.e:
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> b
    androidx.lifecycle.Lifecycle getLifecycle() -> a
    boolean superDispatchKeyEvent(android.view.KeyEvent) -> a
androidx.core.app.CoreComponentFactory -> androidx.core.app.CoreComponentFactory:
    java.lang.Object checkCompatWrapper(java.lang.Object) -> a
androidx.core.app.CoreComponentFactory$CompatWrapped -> androidx.core.app.f:
    java.lang.Object getWrapper() -> a
androidx.core.app.NotificationManagerCompat -> androidx.core.app.g:
    android.content.Context mContext -> a
    android.app.NotificationManager mNotificationManager -> b
    boolean areNotificationsEnabled() -> a
    androidx.core.app.NotificationManagerCompat from(android.content.Context) -> a
androidx.core.app.RemoteActionCompat -> androidx.core.app.RemoteActionCompat:
    androidx.core.graphics.drawable.IconCompat mIcon -> a
    java.lang.CharSequence mTitle -> b
    java.lang.CharSequence mContentDescription -> c
    boolean mEnabled -> e
    boolean mShouldShowIcon -> f
    android.app.PendingIntent mActionIntent -> d
androidx.core.app.SharedElementCallback -> androidx.core.app.h:
androidx.core.app.TaskStackBuilder -> androidx.core.app.j:
    android.content.Context mSourceContext -> c
    java.util.ArrayList mIntents -> b
    1:1:androidx.core.app.TaskStackBuilder addParentStack(android.content.ComponentName):0:0 -> a
    1:1:androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity):0 -> a
    2:2:androidx.core.app.TaskStackBuilder addNextIntent(android.content.Intent):0:0 -> a
    2:2:androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity):0 -> a
    3:3:androidx.core.app.TaskStackBuilder addParentStack(android.content.ComponentName):0:0 -> a
    3:3:androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity):0 -> a
    androidx.core.app.TaskStackBuilder create(android.content.Context) -> a
    4:4:void startActivities(android.os.Bundle):0:0 -> a
    4:4:void startActivities():0 -> a
androidx.core.app.TaskStackBuilder$SupportParentable -> androidx.core.app.i:
    android.content.Intent getSupportParentActivityIntent() -> c
androidx.core.content.ContextCompat -> androidx.core.content.a:
    java.lang.Object sLock -> a
    int getColor(android.content.Context,int) -> a
    java.io.File[] getExternalCacheDirs(android.content.Context) -> a
    java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String) -> a
    boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> a
    void startActivity(android.content.Context,android.content.Intent,android.os.Bundle) -> a
    android.content.res.ColorStateList getColorStateList(android.content.Context,int) -> b
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int) -> c
androidx.core.content.FileProvider -> androidx.core.content.FileProvider:
    java.io.File DEVICE_ROOT -> d
    androidx.core.content.FileProvider$PathStrategy mStrategy -> b
    java.util.HashMap sCache -> e
    java.lang.String[] COLUMNS -> c
    androidx.core.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String) -> a
    android.net.Uri getUriForFile(android.content.Context,java.lang.String,java.io.File) -> a
    1:1:java.io.File buildPath(java.io.File,java.lang.String[]):0:0 -> b
    1:1:androidx.core.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String):0 -> b
    2:2:androidx.core.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String):0:0 -> b
    1:1:int modeToMode(java.lang.String):0:0 -> openFile
    1:1:android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String):0 -> openFile
    2:2:android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String):0:0 -> openFile
    1:1:java.lang.String[] copyOf(java.lang.String[],int):0:0 -> query
    1:1:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String):0 -> query
    2:2:java.lang.Object[] copyOf(java.lang.Object[],int):0:0 -> query
    2:2:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String):0 -> query
    3:3:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String):0:0 -> query
androidx.core.content.FileProvider$PathStrategy -> androidx.core.content.b:
androidx.core.content.FileProvider$SimplePathStrategy -> androidx.core.content.c:
    java.util.HashMap mRoots -> b
    java.lang.String mAuthority -> a
    void addRoot(java.lang.String,java.io.File) -> a
    java.io.File getFileForUri(android.net.Uri) -> a
    android.net.Uri getUriForFile(java.io.File) -> a
androidx.core.content.res.ColorStateListInflaterCompat -> androidx.core.content.d.a:
    1:1:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    1:1:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    2:2:android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[]):0:0 -> a
    2:2:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    2:2:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    3:3:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    3:3:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    4:4:int modulateColorAlpha(int,float):0:0 -> a
    4:4:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    4:4:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    5:5:int[] androidx.core.content.res.GrowingArrayUtils.append(int[],int,int):0:0 -> a
    5:5:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    5:5:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    6:6:java.lang.Object[] androidx.core.content.res.GrowingArrayUtils.append(java.lang.Object[],int,java.lang.Object):0:0 -> a
    6:6:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    6:6:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    7:7:android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    7:7:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    8:8:android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    9:9:androidx.core.content.res.GradientColorInflaterCompat$ColorStops androidx.core.content.res.GradientColorInflaterCompat.inflateChildElements(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    9:9:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    10:10:androidx.core.content.res.GradientColorInflaterCompat$ColorStops androidx.core.content.res.GradientColorInflaterCompat.checkColors(androidx.core.content.res.GradientColorInflaterCompat$ColorStops,int,int,boolean,int):0:0 -> a
    10:10:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    11:11:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    12:12:android.graphics.Shader$TileMode androidx.core.content.res.GradientColorInflaterCompat.parseTileMode(int):0:0 -> a
    12:12:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    13:13:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    14:14:android.graphics.Shader$TileMode androidx.core.content.res.GradientColorInflaterCompat.parseTileMode(int):0:0 -> a
    14:14:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    15:15:android.graphics.Shader androidx.core.content.res.GradientColorInflaterCompat.createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    int androidx.core.content.res.TypedArrayUtils.getNamedColor(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int) -> a
    androidx.core.content.res.ComplexColorCompat androidx.core.content.res.TypedArrayUtils.getNamedComplexColor(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme,java.lang.String,int,int) -> a
    float androidx.core.content.res.TypedArrayUtils.getNamedFloat(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,float) -> a
    java.lang.String androidx.core.content.res.TypedArrayUtils.getNamedString(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int) -> a
    boolean androidx.core.content.res.TypedArrayUtils.hasAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String) -> a
    android.content.res.TypedArray androidx.core.content.res.TypedArrayUtils.obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[]) -> a
    16:16:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> a
    16:16:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    17:17:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> a
    17:17:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    17:17:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    18:18:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFont(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> a
    18:18:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    18:18:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    18:18:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    19:19:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> a
    19:19:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    19:19:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    20:20:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> a
    20:20:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0 -> a
    21:21:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources):0:0 -> a
    22:22:int androidx.core.content.res.FontResourcesParserCompat.getType(android.content.res.TypedArray,int):0:0 -> a
    22:22:java.util.List androidx.core.content.res.FontResourcesParserCompat.readCerts(android.content.res.Resources,int):0 -> a
    23:23:java.util.List androidx.core.content.res.FontResourcesParserCompat.readCerts(android.content.res.Resources,int):0:0 -> a
    void androidx.core.content.res.FontResourcesParserCompat.skip(org.xmlpull.v1.XmlPullParser) -> a
    java.util.List androidx.core.content.res.FontResourcesParserCompat.toByteArrayList(java.lang.String[]) -> a
    int androidx.core.content.res.TypedArrayUtils.getNamedInt(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int) -> b
    android.util.TypedValue androidx.core.content.res.TypedArrayUtils.peekNamedValue(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int) -> b
    int androidx.core.content.res.TypedArrayUtils.getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int) -> c
androidx.core.content.res.ComplexColorCompat -> androidx.core.content.d.b:
    android.content.res.ColorStateList mColorStateList -> b
    android.graphics.Shader mShader -> a
    int mColor -> c
    1:1:androidx.core.content.res.ComplexColorCompat from(android.graphics.Shader):0:0 -> a
    1:1:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    2:2:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0:0 -> a
    3:3:androidx.core.content.res.ComplexColorCompat from(android.content.res.ColorStateList):0:0 -> a
    3:3:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    4:4:androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme):0:0 -> a
    int getColor() -> a
    boolean onStateChanged(int[]) -> a
    void setColor(int) -> a
    androidx.core.content.res.ComplexColorCompat from(int) -> b
    android.graphics.Shader getShader() -> b
    androidx.core.content.res.ComplexColorCompat inflate(android.content.res.Resources,int,android.content.res.Resources$Theme) -> b
    boolean isGradient() -> c
    boolean isStateful() -> d
    boolean willDraw() -> e
androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry -> androidx.core.content.d.c:
androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry -> androidx.core.content.d.d:
    androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] mEntries -> a
    androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries() -> a
androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry -> androidx.core.content.d.e:
    int mResourceId -> f
    java.lang.String mFileName -> a
    int mTtcIndex -> e
    int mWeight -> b
    boolean mItalic -> c
    java.lang.String mVariationSettings -> d
    java.lang.String getFileName() -> a
    int getResourceId() -> b
    int getTtcIndex() -> c
    java.lang.String getVariationSettings() -> d
    int getWeight() -> e
    boolean isItalic() -> f
androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry -> androidx.core.content.d.f:
    androidx.core.provider.FontRequest mRequest -> a
    int mTimeoutMs -> b
    int mStrategy -> c
    int getFetchStrategy() -> a
    androidx.core.provider.FontRequest getRequest() -> b
    int getTimeout() -> c
androidx.core.content.res.GradientColorInflaterCompat$ColorStops -> androidx.core.content.d.g:
    int[] mColors -> a
    float[] mOffsets -> b
androidx.core.content.res.GrowingArrayUtils -> androidx.core.content.d.h:
    int growSize(int) -> a
androidx.core.content.res.ResourcesCompat$FontCallback -> androidx.core.content.d.k:
    void callbackFailAsync(int,android.os.Handler) -> a
    void callbackSuccessAsync(android.graphics.Typeface,android.os.Handler) -> a
    void onFontRetrievalFailed(int) -> a
    void onFontRetrieved(android.graphics.Typeface) -> a
androidx.core.content.res.ResourcesCompat$FontCallback$1 -> androidx.core.content.d.i:
    android.graphics.Typeface val$typeface -> b
    androidx.core.content.res.ResourcesCompat$FontCallback this$0 -> c
androidx.core.content.res.ResourcesCompat$FontCallback$2 -> androidx.core.content.d.j:
    int val$reason -> b
    androidx.core.content.res.ResourcesCompat$FontCallback this$0 -> c
androidx.core.graphics.ColorUtils -> b.f.b.a:
    1:1:int compositeAlpha(int,int):0:0 -> a
    1:1:int compositeColors(int,int):0 -> a
    2:2:int compositeColors(int,int):0:0 -> a
    int compositeComponent(int,int,int,int,int) -> a
    int setAlphaComponent(int,int) -> b
androidx.core.graphics.PathParser -> b.f.b.c:
    boolean canMorph(androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[]) -> a
    float[] copyOfRange(float[],int,int) -> a
    1:1:void androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):0:0 -> a
    1:1:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,android.content.res.Resources,int):0 -> a
    2:2:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,android.content.res.Resources,int):0:0 -> a
    3:3:void androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):0:0 -> a
    3:3:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,java.io.InputStream):0 -> a
    4:4:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,java.io.InputStream):0:0 -> a
    5:5:void androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):0:0 -> a
    5:5:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,java.io.InputStream):0 -> a
    6:6:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,java.io.InputStream):0:0 -> a
    7:7:void androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):0:0 -> a
    7:7:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,java.io.InputStream):0 -> a
    8:8:boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile(java.io.File,java.io.InputStream):0:0 -> a
    9:9:int nextStart(java.lang.String,int):0:0 -> a
    9:9:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> a
    10:10:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> a
    11:11:float[] getFloats(java.lang.String):0:0 -> a
    11:11:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> a
    12:12:void extract(java.lang.String,int,androidx.core.graphics.PathParser$ExtractFloatResult):0:0 -> a
    12:12:float[] getFloats(java.lang.String):0 -> a
    12:12:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> a
    13:13:float[] getFloats(java.lang.String):0:0 -> a
    13:13:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> a
    14:14:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> a
    15:15:void addNode(java.util.ArrayList,char,float[]):0:0 -> a
    15:15:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> a
    16:16:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> a
    17:17:void addNode(java.util.ArrayList,char,float[]):0:0 -> a
    17:17:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0 -> a
    18:18:androidx.core.graphics.PathParser$PathDataNode[] createNodesFromPathData(java.lang.String):0:0 -> a
    androidx.core.graphics.PathParser$PathDataNode[] deepCopyNodes(androidx.core.graphics.PathParser$PathDataNode[]) -> a
    java.io.File androidx.core.graphics.TypefaceCompatUtil.getTempFile(android.content.Context) -> a
    java.nio.ByteBuffer androidx.core.graphics.TypefaceCompatUtil.mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri) -> a
    android.graphics.Path createPathFromPathData(java.lang.String) -> b
androidx.core.graphics.PathParser$PathDataNode -> b.f.b.b:
    char mType -> a
    float[] mParams -> b
    1:1:void arcToBezier(android.graphics.Path,double,double,double,double,double,double,double,double,double):0:0 -> a
    1:1:void drawArc(android.graphics.Path,float,float,float,float,float,float,float,boolean,boolean):0 -> a
    void interpolatePathDataNode(androidx.core.graphics.PathParser$PathDataNode,androidx.core.graphics.PathParser$PathDataNode,float) -> a
    2:2:void addCommand(android.graphics.Path,float[],char,char,float[]):0:0 -> a
    2:2:void nodesToPath(androidx.core.graphics.PathParser$PathDataNode[],android.graphics.Path):0 -> a
    3:3:void nodesToPath(androidx.core.graphics.PathParser$PathDataNode[],android.graphics.Path):0:0 -> a
androidx.core.graphics.TypefaceCompat -> b.f.b.d:
    androidx.core.graphics.TypefaceCompatBaseImpl sTypefaceCompatImpl -> a
    androidx.collection.LruCache sTypefaceCache -> b
    android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int) -> a
    android.graphics.Typeface createFromResourcesFamilyXml(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry,android.content.res.Resources,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean) -> a
    android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int) -> a
    java.lang.String createResourceUid(android.content.res.Resources,int,int) -> a
    android.graphics.Typeface findFromCache(android.content.res.Resources,int,int) -> b
androidx.core.graphics.TypefaceCompatApi21Impl -> b.f.b.e:
    java.lang.reflect.Method sAddFontWeightStyle -> d
    boolean sHasInitBeenCalled -> f
    java.lang.reflect.Constructor sFontFamilyCtor -> c
    java.lang.reflect.Method sCreateFromFamiliesWithDefault -> e
    java.lang.Class sFontFamily -> b
    boolean addFontWeightStyle(java.lang.Object,java.lang.String,int,boolean) -> a
    1:1:java.lang.Object newFamily():0:0 -> a
    1:1:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    2:2:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0:0 -> a
    3:3:android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object):0:0 -> a
    3:3:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    4:4:java.lang.Object newFamily():0:0 -> a
    4:4:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    5:5:java.io.File getFile(android.os.ParcelFileDescriptor):0:0 -> a
    5:5:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    6:6:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0:0 -> a
    void init() -> a
androidx.core.graphics.TypefaceCompatApi24Impl -> b.f.b.f:
    java.lang.reflect.Method sAddFontWeightStyle -> d
    java.lang.reflect.Constructor sFontFamilyCtor -> c
    java.lang.reflect.Method sCreateFromFamiliesWithDefault -> e
    java.lang.Class sFontFamily -> b
    boolean addFontWeightStyle(java.lang.Object,java.nio.ByteBuffer,int,int,boolean) -> a
    android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object) -> a
    1:1:java.lang.Object newFamily():0:0 -> a
    1:1:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    2:2:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0:0 -> a
    3:3:java.nio.ByteBuffer androidx.core.graphics.TypefaceCompatUtil.copyToDirectBuffer(android.content.Context,android.content.res.Resources,int):0:0 -> a
    3:3:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    4:4:java.nio.ByteBuffer androidx.core.graphics.TypefaceCompatUtil.mmap(java.io.File):0:0 -> a
    4:4:java.nio.ByteBuffer androidx.core.graphics.TypefaceCompatUtil.copyToDirectBuffer(android.content.Context,android.content.res.Resources,int):0 -> a
    4:4:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    5:5:java.nio.ByteBuffer androidx.core.graphics.TypefaceCompatUtil.copyToDirectBuffer(android.content.Context,android.content.res.Resources,int):0:0 -> a
    5:5:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    6:6:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0:0 -> a
    7:7:java.nio.ByteBuffer androidx.core.graphics.TypefaceCompatUtil.copyToDirectBuffer(android.content.Context,android.content.res.Resources,int):0:0 -> a
    7:7:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    8:8:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0:0 -> a
    9:9:java.lang.Object newFamily():0:0 -> a
    9:9:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    10:10:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0:0 -> a
    boolean isUsable() -> a
androidx.core.graphics.TypefaceCompatApi26Impl -> b.f.b.g:
    java.lang.reflect.Method mFreeze -> k
    java.lang.reflect.Method mAbortCreation -> l
    java.lang.reflect.Method mCreateFromFamiliesWithDefault -> m
    java.lang.Class mFontFamily -> g
    java.lang.reflect.Constructor mFontFamilyCtor -> h
    java.lang.reflect.Method mAddFontFromAssetManager -> i
    java.lang.reflect.Method mAddFontFromBuffer -> j
    1:1:java.lang.Class obtainFontFamily():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:java.lang.reflect.Constructor obtainFontFamilyCtor(java.lang.Class):0:0 -> <init>
    2:2:void <init>():0 -> <init>
    3:3:void <init>():0:0 -> <init>
    4:4:java.lang.reflect.Method obtainFreezeMethod(java.lang.Class):0:0 -> <init>
    4:4:void <init>():0 -> <init>
    5:5:java.lang.reflect.Method obtainAbortCreationMethod(java.lang.Class):0:0 -> <init>
    5:5:void <init>():0 -> <init>
    6:6:void <init>():0:0 -> <init>
    boolean addFontFromAssetManager(android.content.Context,java.lang.Object,java.lang.String,int,int,int,android.graphics.fonts.FontVariationAxis[]) -> a
    android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object) -> a
    android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int) -> a
    1:1:boolean addFontFromBuffer(java.lang.Object,java.nio.ByteBuffer,int,int,int):0:0 -> a
    1:1:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    2:2:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0:0 -> a
    android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int) -> a
    boolean isFontFamilyPrivateAPIAvailable() -> a
    java.lang.reflect.Method obtainAddFontFromAssetManagerMethod(java.lang.Class) -> a
    void abortCreation(java.lang.Object) -> b
    java.lang.Object newFamily() -> b
    java.lang.reflect.Method obtainAddFontFromBufferMethod(java.lang.Class) -> b
    boolean freeze(java.lang.Object) -> c
    java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class) -> c
androidx.core.graphics.TypefaceCompatApi28Impl -> b.f.b.h:
    android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object) -> a
    java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class) -> c
androidx.core.graphics.TypefaceCompatBaseImpl -> b.f.b.i:
    java.util.concurrent.ConcurrentHashMap mFontFamilies -> a
    1:1:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int):0:0 -> a
    1:1:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    2:2:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0:0 -> a
    2:2:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int):0 -> a
    2:2:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    3:3:int androidx.core.graphics.TypefaceCompatBaseImpl$2.getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry):0:0 -> a
    3:3:int androidx.core.graphics.TypefaceCompatBaseImpl$2.getWeight(java.lang.Object):0 -> a
    3:3:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0 -> a
    3:3:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int):0 -> a
    3:3:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    4:4:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0:0 -> a
    4:4:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int):0 -> a
    4:4:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    5:5:boolean androidx.core.graphics.TypefaceCompatBaseImpl$2.isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry):0:0 -> a
    5:5:boolean androidx.core.graphics.TypefaceCompatBaseImpl$2.isItalic(java.lang.Object):0 -> a
    5:5:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0 -> a
    5:5:androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int):0 -> a
    5:5:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    6:6:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0:0 -> a
    7:7:long getUniqueKey(android.graphics.Typeface):0:0 -> a
    7:7:void addFontFamily(android.graphics.Typeface,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry):0 -> a
    7:7:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    8:8:void addFontFamily(android.graphics.Typeface,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry):0:0 -> a
    8:8:android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int):0 -> a
    9:9:void androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):0:0 -> a
    9:9:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    10:10:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0:0 -> a
    11:11:void androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):0:0 -> a
    11:11:android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream) -> a
    android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int) -> a
    12:12:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0:0 -> a
    12:12:androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    13:13:int androidx.core.graphics.TypefaceCompatBaseImpl$1.getWeight(androidx.core.provider.FontsContractCompat$FontInfo):0:0 -> a
    13:13:int androidx.core.graphics.TypefaceCompatBaseImpl$1.getWeight(java.lang.Object):0 -> a
    13:13:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0 -> a
    13:13:androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    14:14:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0:0 -> a
    14:14:androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    15:15:boolean androidx.core.graphics.TypefaceCompatBaseImpl$1.isItalic(androidx.core.provider.FontsContractCompat$FontInfo):0:0 -> a
    15:15:boolean androidx.core.graphics.TypefaceCompatBaseImpl$1.isItalic(java.lang.Object):0 -> a
    15:15:java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor):0 -> a
    15:15:androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int):0 -> a
    16:16:androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int):0:0 -> a
androidx.core.graphics.drawable.DrawableCompat -> androidx.core.graphics.drawable.a:
    java.lang.reflect.Method sGetLayoutDirectionMethod -> c
    boolean sSetLayoutDirectionMethodFetched -> b
    java.lang.reflect.Method sSetLayoutDirectionMethod -> a
    boolean sGetLayoutDirectionMethodFetched -> d
    void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme) -> a
    int getLayoutDirection(android.graphics.drawable.Drawable) -> a
    void setHotspot(android.graphics.drawable.Drawable,float,float) -> a
    void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int) -> a
    boolean setLayoutDirection(android.graphics.drawable.Drawable,int) -> a
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList) -> a
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode) -> a
    boolean isAutoMirrored(android.graphics.drawable.Drawable) -> b
    void setTint(android.graphics.drawable.Drawable,int) -> b
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable) -> c
androidx.core.graphics.drawable.IconCompat -> androidx.core.graphics.drawable.IconCompat:
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> j
    java.lang.String mTintModeStr -> i
    android.graphics.PorterDuff$Mode mTintMode -> h
    android.os.Parcelable mParcelable -> d
    java.lang.Object mObj1 -> b
    int mInt2 -> f
    android.content.res.ColorStateList mTintList -> g
    int mInt1 -> e
    byte[] mData -> c
    int mType -> a
    1:1:int getResId(android.graphics.drawable.Icon):0:0 -> a
    1:1:int getResId():0 -> a
    2:2:int getResId():0:0 -> a
    void onPreParceling(boolean) -> a
    1:1:java.lang.String getResPackage(android.graphics.drawable.Icon):0:0 -> b
    1:1:java.lang.String getResPackage():0 -> b
    2:2:java.lang.String getResPackage():0:0 -> b
    void onPostParceling() -> c
androidx.core.graphics.drawable.TintAwareDrawable -> androidx.core.graphics.drawable.b:
androidx.core.graphics.drawable.WrappedDrawable -> androidx.core.graphics.drawable.c:
    android.graphics.drawable.Drawable getWrappedDrawable() -> a
    void setWrappedDrawable(android.graphics.drawable.Drawable) -> a
androidx.core.graphics.drawable.WrappedDrawableApi14 -> androidx.core.graphics.drawable.d:
    android.graphics.drawable.Drawable mDrawable -> g
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> h
    androidx.core.graphics.drawable.WrappedDrawableState mState -> e
    boolean mMutated -> f
    android.graphics.PorterDuff$Mode mCurrentMode -> c
    int mCurrentColor -> b
    boolean mColorFilterSet -> d
    1:1:androidx.core.graphics.drawable.WrappedDrawableState mutateConstantState():0:0 -> <init>
    1:1:void <init>(android.graphics.drawable.Drawable):0 -> <init>
    2:2:void <init>(android.graphics.drawable.Drawable):0:0 -> <init>
    3:3:void updateLocalState(android.content.res.Resources):0:0 -> <init>
    3:3:void <init>(androidx.core.graphics.drawable.WrappedDrawableState,android.content.res.Resources):0 -> <init>
    android.graphics.drawable.Drawable getWrappedDrawable() -> a
    void setWrappedDrawable(android.graphics.drawable.Drawable) -> a
    boolean updateTint(int[]) -> a
    boolean isCompatTintEnabled() -> b
    1:1:boolean androidx.core.graphics.drawable.WrappedDrawableState.canConstantState():0:0 -> getConstantState
    1:1:android.graphics.drawable.Drawable$ConstantState getConstantState():0 -> getConstantState
    2:2:android.graphics.drawable.Drawable$ConstantState getConstantState():0:0 -> getConstantState
    1:1:androidx.core.graphics.drawable.WrappedDrawableState mutateConstantState():0:0 -> mutate
    1:1:android.graphics.drawable.Drawable mutate():0 -> mutate
    2:2:android.graphics.drawable.Drawable mutate():0:0 -> mutate
androidx.core.graphics.drawable.WrappedDrawableApi21 -> androidx.core.graphics.drawable.e:
    java.lang.reflect.Method sIsProjectedDrawableMethod -> i
    boolean isCompatTintEnabled() -> b
    void findAndCacheIsProjectedDrawableMethod() -> c
androidx.core.graphics.drawable.WrappedDrawableState -> androidx.core.graphics.drawable.f:
    android.graphics.drawable.Drawable$ConstantState mDrawableState -> b
    android.content.res.ColorStateList mTint -> c
    android.graphics.PorterDuff$Mode mTintMode -> d
    int mChangingConfigurations -> a
androidx.core.internal.view.SupportMenu -> b.f.c.a.a:
androidx.core.internal.view.SupportMenuItem -> b.f.c.a.b:
    androidx.core.view.ActionProvider getSupportActionProvider() -> a
    androidx.core.internal.view.SupportMenuItem setSupportActionProvider(androidx.core.view.ActionProvider) -> a
androidx.core.internal.view.SupportSubMenu -> b.f.c.a.c:
androidx.core.provider.FontRequest -> b.f.d.a:
    java.lang.String mIdentifier -> f
    java.util.List mCertificates -> d
    java.lang.String mProviderAuthority -> a
    int mCertificatesArray -> e
    java.lang.String mQuery -> c
    java.lang.String mProviderPackage -> b
    1:1:java.lang.Object androidx.core.util.Preconditions.checkNotNull(java.lang.Object):0:0 -> <init>
    1:1:void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List):0 -> <init>
    java.util.List getCertificates() -> a
    int getCertificatesArrayResId() -> b
    java.lang.String getIdentifier() -> c
    java.lang.String getProviderAuthority() -> d
    java.lang.String getProviderPackage() -> e
    java.lang.String getQuery() -> f
androidx.core.provider.FontsContractCompat -> b.f.d.i:
    androidx.collection.SimpleArrayMap sPendingReplies -> d
    androidx.collection.LruCache sTypefaceCache -> a
    java.lang.Object sLock -> c
    java.util.Comparator sByteArrayComparator -> e
    androidx.core.provider.SelfDestructiveThread sBackgroundThread -> b
    1:1:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> a
    1:1:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    2:2:java.util.List convertToByteArrayList(android.content.pm.Signature[]):0:0 -> a
    2:2:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0 -> a
    2:2:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    3:3:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> a
    3:3:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    4:4:java.util.List getCertificates(androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> a
    4:4:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0 -> a
    4:4:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    5:5:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> a
    5:5:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    6:6:boolean equalsByteArrayList(java.util.List,java.util.List):0:0 -> a
    6:6:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0 -> a
    6:6:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    7:7:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0:0 -> a
    8:8:androidx.core.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,androidx.core.provider.FontRequest,java.lang.String,android.os.CancellationSignal):0:0 -> a
    8:8:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    9:9:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0:0 -> a
    10:10:androidx.core.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,androidx.core.provider.FontRequest,java.lang.String,android.os.CancellationSignal):0:0 -> a
    10:10:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    11:11:android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources):0:0 -> a
    11:11:androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest):0 -> a
    androidx.core.provider.FontsContractCompat$TypefaceResult getFontInternal(android.content.Context,androidx.core.provider.FontRequest,int) -> a
    12:12:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> a
    12:12:android.graphics.Typeface getFontSync(android.content.Context,androidx.core.provider.FontRequest,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,int,int):0 -> a
    13:13:android.graphics.Typeface getFontSync(android.content.Context,androidx.core.provider.FontRequest,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,int,int):0:0 -> a
    java.util.Map prepareFontData(android.content.Context,androidx.core.provider.FontsContractCompat$FontInfo[],android.os.CancellationSignal) -> a
androidx.core.provider.FontsContractCompat$1 -> b.f.d.b:
    android.content.Context val$context -> a
    androidx.core.provider.FontRequest val$request -> b
    int val$style -> c
    java.lang.String val$id -> d
    1:1:androidx.core.provider.FontsContractCompat$TypefaceResult call():0:0 -> call
    1:1:java.lang.Object call():0 -> call
androidx.core.provider.FontsContractCompat$2 -> b.f.d.c:
    android.os.Handler val$handler -> b
    androidx.core.content.res.ResourcesCompat$FontCallback val$fontCallback -> a
    1:1:void onReply(androidx.core.provider.FontsContractCompat$TypefaceResult):0:0 -> a
    1:1:void onReply(java.lang.Object):0 -> a
androidx.core.provider.FontsContractCompat$3 -> b.f.d.d:
    java.lang.String val$id -> a
    void onReply(androidx.core.provider.FontsContractCompat$TypefaceResult) -> a
    void onReply(java.lang.Object) -> a
androidx.core.provider.FontsContractCompat$5 -> b.f.d.e:
    1:1:int compare(byte[],byte[]):0:0 -> compare
    1:1:int compare(java.lang.Object,java.lang.Object):0 -> compare
androidx.core.provider.FontsContractCompat$FontFamilyResult -> b.f.d.f:
    int mStatusCode -> a
    androidx.core.provider.FontsContractCompat$FontInfo[] mFonts -> b
    androidx.core.provider.FontsContractCompat$FontInfo[] getFonts() -> a
    int getStatusCode() -> b
androidx.core.provider.FontsContractCompat$FontInfo -> b.f.d.g:
    int mResultCode -> e
    int mTtcIndex -> b
    int mWeight -> c
    android.net.Uri mUri -> a
    boolean mItalic -> d
    1:1:java.lang.Object androidx.core.util.Preconditions.checkNotNull(java.lang.Object):0:0 -> <init>
    1:1:void <init>(android.net.Uri,int,int,boolean,int):0 -> <init>
    int getResultCode() -> a
    int getTtcIndex() -> b
    android.net.Uri getUri() -> c
    int getWeight() -> d
    boolean isItalic() -> e
androidx.core.provider.FontsContractCompat$TypefaceResult -> b.f.d.h:
    android.graphics.Typeface mTypeface -> a
    int mResult -> b
androidx.core.provider.SelfDestructiveThread -> b.f.d.o:
    java.lang.String mThreadName -> h
    android.os.Handler mHandler -> c
    android.os.Handler$Callback mCallback -> e
    int mDestructAfterMillisec -> f
    int mPriority -> g
    int mGeneration -> d
    java.lang.Object mLock -> a
    android.os.HandlerThread mThread -> b
    void onDestruction() -> a
    void onInvokeRunnable(java.lang.Runnable) -> a
    void postAndReply(java.util.concurrent.Callable,androidx.core.provider.SelfDestructiveThread$ReplyCallback) -> a
    java.lang.Object postAndWait(java.util.concurrent.Callable,int) -> a
    void post(java.lang.Runnable) -> b
androidx.core.provider.SelfDestructiveThread$1 -> b.f.d.j:
    androidx.core.provider.SelfDestructiveThread this$0 -> a
androidx.core.provider.SelfDestructiveThread$2 -> b.f.d.l:
    android.os.Handler val$callingHandler -> c
    java.util.concurrent.Callable val$callable -> b
    androidx.core.provider.SelfDestructiveThread$ReplyCallback val$reply -> d
androidx.core.provider.SelfDestructiveThread$2$1 -> b.f.d.k:
    androidx.core.provider.SelfDestructiveThread$2 this$1 -> c
    java.lang.Object val$result -> b
androidx.core.provider.SelfDestructiveThread$3 -> b.f.d.m:
    java.util.concurrent.atomic.AtomicBoolean val$running -> e
    java.util.concurrent.locks.Condition val$cond -> f
    java.util.concurrent.locks.ReentrantLock val$lock -> d
    java.util.concurrent.Callable val$callable -> c
    java.util.concurrent.atomic.AtomicReference val$holder -> b
androidx.core.provider.SelfDestructiveThread$ReplyCallback -> b.f.d.n:
    void onReply(java.lang.Object) -> a
androidx.core.text.PrecomputedTextCompat -> b.f.e.c:
    android.text.Spannable mText -> b
    androidx.core.text.PrecomputedTextCompat$Params mParams -> c
    androidx.core.text.PrecomputedTextCompat$Params getParams() -> a
androidx.core.text.PrecomputedTextCompat$Params -> b.f.e.b:
    android.text.TextPaint mPaint -> a
    android.text.PrecomputedText$Params mWrapped -> e
    int mHyphenationFrequency -> d
    android.text.TextDirectionHeuristic mTextDir -> b
    int mBreakStrategy -> c
    1:1:int getBreakStrategy():0:0 -> a
    1:1:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    2:2:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    3:3:int getHyphenationFrequency():0:0 -> a
    3:3:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    4:4:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    5:5:android.text.TextPaint getTextPaint():0:0 -> a
    5:5:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    6:6:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    7:7:android.text.TextPaint getTextPaint():0:0 -> a
    7:7:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    8:8:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    9:9:android.text.TextPaint getTextPaint():0:0 -> a
    9:9:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    10:10:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    11:11:android.text.TextPaint getTextPaint():0:0 -> a
    11:11:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    12:12:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    13:13:android.text.TextPaint getTextPaint():0:0 -> a
    13:13:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    14:14:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    15:15:android.text.TextPaint getTextPaint():0:0 -> a
    15:15:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    16:16:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    17:17:android.text.TextPaint getTextPaint():0:0 -> a
    17:17:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    18:18:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    19:19:android.text.TextPaint getTextPaint():0:0 -> a
    19:19:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    20:20:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    21:21:android.text.TextPaint getTextPaint():0:0 -> a
    21:21:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    22:22:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    23:23:android.text.TextPaint getTextPaint():0:0 -> a
    23:23:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0 -> a
    24:24:boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params):0:0 -> a
    1:1:android.text.TextDirectionHeuristic getTextDirection():0:0 -> equals
    1:1:boolean equals(java.lang.Object):0 -> equals
androidx.core.text.PrecomputedTextCompat$Params$Builder -> b.f.e.a:
    android.text.TextPaint mPaint -> a
    int mHyphenationFrequency -> d
    android.text.TextDirectionHeuristic mTextDir -> b
    int mBreakStrategy -> c
    androidx.core.text.PrecomputedTextCompat$Params build() -> a
    androidx.core.text.PrecomputedTextCompat$Params$Builder setBreakStrategy(int) -> a
    androidx.core.text.PrecomputedTextCompat$Params$Builder setTextDirection(android.text.TextDirectionHeuristic) -> a
    androidx.core.text.PrecomputedTextCompat$Params$Builder setHyphenationFrequency(int) -> b
androidx.core.util.LogWriter -> b.f.f.a:
    java.lang.String mTag -> b
    java.lang.StringBuilder mBuilder -> c
    void flushBuilder() -> a
androidx.core.view.AccessibilityDelegateCompat -> b.f.g.b:
    android.view.View$AccessibilityDelegate mOriginalDelegate -> a
    android.view.View$AccessibilityDelegate mBridge -> b
    android.view.View$AccessibilityDelegate DEFAULT_DELEGATE -> c
    1:1:void <init>(android.view.View$AccessibilityDelegate):0:0 -> <init>
    1:1:void <init>():0 -> <init>
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    androidx.core.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    android.view.View$AccessibilityDelegate getBridge() -> a
    void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    1:1:java.util.List getActionList(android.view.View):0:0 -> a
    1:1:boolean performAccessibilityAction(android.view.View,int,android.os.Bundle):0 -> a
    2:2:boolean performAccessibilityAction(android.view.View,int,android.os.Bundle):0:0 -> a
    3:3:boolean performClickableSpanAction(int,android.view.View):0:0 -> a
    3:3:boolean performAccessibilityAction(android.view.View,int,android.os.Bundle):0 -> a
    4:4:boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View):0:0 -> a
    4:4:boolean performClickableSpanAction(int,android.view.View):0 -> a
    4:4:boolean performAccessibilityAction(android.view.View,int,android.os.Bundle):0 -> a
    5:5:boolean performClickableSpanAction(int,android.view.View):0:0 -> a
    5:5:boolean performAccessibilityAction(android.view.View,int,android.os.Bundle):0 -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter -> b.f.g.a:
    androidx.core.view.AccessibilityDelegateCompat mCompat -> a
    1:1:androidx.core.view.ViewCompat$AccessibilityViewProperty androidx.core.view.ViewCompat.accessibilityHeadingProperty():0:0 -> onInitializeAccessibilityNodeInfo
    1:1:boolean androidx.core.view.ViewCompat.isAccessibilityHeading(android.view.View):0 -> onInitializeAccessibilityNodeInfo
    1:1:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0 -> onInitializeAccessibilityNodeInfo
    2:2:boolean androidx.core.view.ViewCompat.isAccessibilityHeading(android.view.View):0:0 -> onInitializeAccessibilityNodeInfo
    2:2:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0 -> onInitializeAccessibilityNodeInfo
    3:3:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0:0 -> onInitializeAccessibilityNodeInfo
    4:4:androidx.core.view.ViewCompat$AccessibilityViewProperty androidx.core.view.ViewCompat.paneTitleProperty():0:0 -> onInitializeAccessibilityNodeInfo
    4:4:java.lang.CharSequence androidx.core.view.ViewCompat.getAccessibilityPaneTitle(android.view.View):0 -> onInitializeAccessibilityNodeInfo
    4:4:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0 -> onInitializeAccessibilityNodeInfo
    5:5:java.lang.CharSequence androidx.core.view.ViewCompat.getAccessibilityPaneTitle(android.view.View):0:0 -> onInitializeAccessibilityNodeInfo
    5:5:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0 -> onInitializeAccessibilityNodeInfo
    6:6:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0:0 -> onInitializeAccessibilityNodeInfo
    7:7:java.util.List androidx.core.view.AccessibilityDelegateCompat.getActionList(android.view.View):0:0 -> onInitializeAccessibilityNodeInfo
    7:7:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0 -> onInitializeAccessibilityNodeInfo
    8:8:void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo):0:0 -> onInitializeAccessibilityNodeInfo
androidx.core.view.ActionProvider -> b.f.g.e:
    androidx.core.view.ActionProvider$VisibilityListener mVisibilityListener -> a
    boolean hasSubMenu() -> a
    android.view.View onCreateActionView(android.view.MenuItem) -> a
    void setVisibilityListener(androidx.core.view.ActionProvider$VisibilityListener) -> a
    boolean isVisible() -> b
    android.view.View onCreateActionView() -> c
    boolean overridesItemVisibility() -> d
    void reset() -> e
androidx.core.view.ActionProvider$SubUiVisibilityListener -> b.f.g.c:
androidx.core.view.ActionProvider$VisibilityListener -> b.f.g.d:
androidx.core.view.KeyEventDispatcher -> b.f.g.g:
    java.lang.reflect.Field sDialogKeyListenerField -> d
    boolean sActionBarFieldsFetched -> a
    boolean sDialogFieldsFetched -> c
    java.lang.reflect.Method sActionBarOnMenuKeyMethod -> b
    boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent) -> a
    1:1:boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent):0:0 -> a
    1:1:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> a
    2:2:boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent):0:0 -> a
    2:2:boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent):0 -> a
    2:2:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> a
    3:3:boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent):0:0 -> a
    3:3:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> a
    4:4:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0:0 -> a
    5:5:android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog):0:0 -> a
    5:5:boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent):0 -> a
    5:5:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> a
    6:6:boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent):0:0 -> a
    6:6:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0 -> a
    7:7:boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent):0:0 -> a
androidx.core.view.KeyEventDispatcher$Component -> b.f.g.f:
    boolean superDispatchKeyEvent(android.view.KeyEvent) -> a
androidx.core.view.LayoutInflaterCompat -> b.f.g.h:
    java.lang.reflect.Field sLayoutInflaterFactory2Field -> a
    boolean sCheckedField -> b
    void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2) -> a
    void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2) -> b
androidx.core.view.NestedScrollingChild -> b.f.g.j:
androidx.core.view.NestedScrollingChild3 -> b.f.g.i:
androidx.core.view.NestedScrollingChildHelper -> b.f.g.k:
    android.view.ViewParent mNestedScrollingParentTouch -> a
    int[] mTempNestedScrollConsumed -> e
    android.view.View mView -> c
    android.view.ViewParent mNestedScrollingParentNonTouch -> b
    boolean mIsNestedScrollingEnabled -> d
    1:1:boolean isNestedScrollingEnabled():0:0 -> a
    1:1:boolean dispatchNestedFling(float,float,boolean):0 -> a
    2:2:boolean dispatchNestedFling(float,float,boolean):0:0 -> a
    3:3:boolean isNestedScrollingEnabled():0:0 -> a
    3:3:boolean dispatchNestedPreFling(float,float):0 -> a
    4:4:boolean dispatchNestedPreFling(float,float):0:0 -> a
    5:5:boolean isNestedScrollingEnabled():0:0 -> a
    5:5:boolean dispatchNestedPreScroll(int,int,int[],int[],int):0 -> a
    6:6:boolean dispatchNestedPreScroll(int,int,int[],int[],int):0:0 -> a
    7:7:int[] getTempNestedScrollConsumed():0:0 -> a
    7:7:boolean dispatchNestedPreScroll(int,int,int[],int[],int):0 -> a
    8:8:boolean dispatchNestedPreScroll(int,int,int[],int[],int):0:0 -> a
    void dispatchNestedScroll(int,int,int,int,int[],int,int[]) -> a
    boolean dispatchNestedScroll(int,int,int,int,int[]) -> a
    boolean hasNestedScrollingParent(int) -> a
    boolean isNestedScrollingEnabled() -> a
    void setNestedScrollingEnabled(boolean) -> a
    9:9:boolean hasNestedScrollingParent(int):0:0 -> a
    9:9:boolean startNestedScroll(int,int):0 -> a
    10:10:boolean isNestedScrollingEnabled():0:0 -> a
    10:10:boolean startNestedScroll(int,int):0 -> a
    11:11:boolean startNestedScroll(int,int):0:0 -> a
    12:12:boolean androidx.core.view.ViewParentCompat.onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int,int):0:0 -> a
    12:12:boolean startNestedScroll(int,int):0 -> a
    13:13:void setNestedScrollingParentForType(int,android.view.ViewParent):0:0 -> a
    13:13:boolean startNestedScroll(int,int):0 -> a
    14:14:boolean startNestedScroll(int,int):0:0 -> a
    15:15:void androidx.core.view.ViewParentCompat.onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int,int):0:0 -> a
    15:15:boolean startNestedScroll(int,int):0 -> a
    16:16:boolean startNestedScroll(int,int):0:0 -> a
    1:1:boolean isNestedScrollingEnabled():0:0 -> b
    1:1:boolean dispatchNestedScrollInternal(int,int,int,int,int[],int,int[]):0 -> b
    2:2:boolean dispatchNestedScrollInternal(int,int,int,int,int[],int,int[]):0:0 -> b
    3:3:int[] getTempNestedScrollConsumed():0:0 -> b
    3:3:boolean dispatchNestedScrollInternal(int,int,int,int,int[],int,int[]):0 -> b
    4:4:boolean dispatchNestedScrollInternal(int,int,int,int,int[],int,int[]):0:0 -> b
    5:5:void androidx.core.view.ViewParentCompat.onStopNestedScroll(android.view.ViewParent,android.view.View,int):0:0 -> b
    5:5:void stopNestedScroll(int):0 -> b
    6:6:void setNestedScrollingParentForType(int,android.view.ViewParent):0:0 -> b
    6:6:void stopNestedScroll(int):0 -> b
    android.view.ViewParent getNestedScrollingParentForType(int) -> c
androidx.core.view.NestedScrollingParent -> b.f.g.n:
androidx.core.view.NestedScrollingParent2 -> b.f.g.l:
    void onNestedPreScroll(android.view.View,int,int,int[],int) -> a
    void onNestedScroll(android.view.View,int,int,int,int,int) -> a
    void onNestedScrollAccepted(android.view.View,android.view.View,int,int) -> a
    void onStopNestedScroll(android.view.View,int) -> a
    boolean onStartNestedScroll(android.view.View,android.view.View,int,int) -> b
androidx.core.view.NestedScrollingParent3 -> b.f.g.m:
    void onNestedScroll(android.view.View,int,int,int,int,int,int[]) -> a
androidx.core.view.NestedScrollingParentHelper -> b.f.g.o:
    int mNestedScrollAxesNonTouch -> b
    int mNestedScrollAxesTouch -> a
    int getNestedScrollAxes() -> a
    void onNestedScrollAccepted(android.view.View,android.view.View,int,int) -> a
    void onStopNestedScroll(android.view.View,int) -> a
androidx.core.view.OnApplyWindowInsetsListener -> b.f.g.p:
    androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat) -> a
androidx.core.view.ScrollingView -> b.f.g.q:
androidx.core.view.TintableBackgroundView -> b.f.g.r:
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode() -> a
    void setSupportBackgroundTintList(android.content.res.ColorStateList) -> a
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode) -> a
    android.content.res.ColorStateList getSupportBackgroundTintList() -> b
androidx.core.view.ViewCompat -> b.f.g.A:
    java.lang.reflect.Field sAccessibilityDelegateField -> c
    java.util.WeakHashMap sViewPropertyAnimatorMap -> b
    java.util.WeakHashMap sTransitionNameMap -> a
    boolean sAccessibilityDelegateCheckFailed -> d
    androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View) -> a
    boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent) -> a
    1:1:androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty():0:0 -> a
    1:1:java.lang.CharSequence getAccessibilityPaneTitle(android.view.View):0 -> a
    1:1:void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int):0 -> a
    2:2:java.lang.CharSequence getAccessibilityPaneTitle(android.view.View):0:0 -> a
    2:2:void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int):0 -> a
    3:3:int getAccessibilityLiveRegion(android.view.View):0:0 -> a
    3:3:void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int):0 -> a
    4:4:void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int):0:0 -> a
    androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> a
    5:5:android.view.View$AccessibilityDelegate getAccessibilityDelegateInternal(android.view.View):0:0 -> a
    5:5:void setAccessibilityDelegate(android.view.View,androidx.core.view.AccessibilityDelegateCompat):0 -> a
    6:6:void setAccessibilityDelegate(android.view.View,androidx.core.view.AccessibilityDelegateCompat):0:0 -> a
    void setBackground(android.view.View,android.graphics.drawable.Drawable) -> a
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList) -> a
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode) -> a
    void setElevation(android.view.View,float) -> a
    void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener) -> a
    void setScrollIndicators(android.view.View,int,int) -> a
    void setTransitionName(android.view.View,java.lang.String) -> a
    boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent) -> b
    android.content.res.ColorStateList getBackgroundTintList(android.view.View) -> b
    int getLayoutDirection(android.view.View) -> c
    int getMinimumHeight(android.view.View) -> d
    java.lang.String getTransitionName(android.view.View) -> e
    int getWindowSystemUiVisibility(android.view.View) -> f
    boolean hasOnClickListeners(android.view.View) -> g
    boolean hasOverlappingRendering(android.view.View) -> h
    boolean isAttachedToWindow(android.view.View) -> i
    boolean isLaidOut(android.view.View) -> j
    1:1:androidx.core.view.ViewCompat$AccessibilityViewProperty screenReaderFocusableProperty():0:0 -> k
    1:1:boolean isScreenReaderFocusable(android.view.View):0 -> k
    2:2:boolean isScreenReaderFocusable(android.view.View):0:0 -> k
    void postInvalidateOnAnimation(android.view.View) -> l
    void requestApplyInsets(android.view.View) -> m
    void stopNestedScroll(android.view.View) -> n
androidx.core.view.ViewCompat$1 -> b.f.g.s:
    androidx.core.view.OnApplyWindowInsetsListener val$listener -> a
androidx.core.view.ViewCompat$3 -> b.f.g.t:
    1:1:void androidx.core.view.ViewCompat$AccessibilityViewProperty.<init>(int,java.lang.Class,int):0:0 -> <init>
    1:1:void <init>(int,java.lang.Class,int):0 -> <init>
    1:1:java.lang.Boolean frameworkGet(android.view.View):0:0 -> a
    1:1:java.lang.Object frameworkGet(android.view.View):0 -> a
androidx.core.view.ViewCompat$4 -> b.f.g.u:
    1:1:java.lang.CharSequence frameworkGet(android.view.View):0:0 -> a
    1:1:java.lang.Object frameworkGet(android.view.View):0 -> a
androidx.core.view.ViewCompat$5 -> b.f.g.v:
    1:1:void androidx.core.view.ViewCompat$AccessibilityViewProperty.<init>(int,java.lang.Class,int):0:0 -> <init>
    1:1:void <init>(int,java.lang.Class,int):0 -> <init>
    1:1:java.lang.Boolean frameworkGet(android.view.View):0:0 -> a
    1:1:java.lang.Object frameworkGet(android.view.View):0 -> a
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager -> b.f.g.w:
    java.util.WeakHashMap mPanesToVisible -> b
    1:1:void checkPaneVisibility(android.view.View,boolean):0:0 -> onGlobalLayout
    1:1:void onGlobalLayout():0 -> onGlobalLayout
    1:1:void registerForLayoutCallback(android.view.View):0:0 -> onViewAttachedToWindow
    1:1:void onViewAttachedToWindow(android.view.View):0 -> onViewAttachedToWindow
androidx.core.view.ViewCompat$AccessibilityViewProperty -> b.f.g.x:
    java.lang.Class mType -> b
    int mFrameworkMinimumSdk -> c
    int mTagKey -> a
    java.lang.Object frameworkGet(android.view.View) -> a
    1:1:boolean frameworkAvailable():0:0 -> b
    1:1:java.lang.Object get(android.view.View):0 -> b
    2:2:java.lang.Object get(android.view.View):0:0 -> b
    3:3:boolean extrasAvailable():0:0 -> b
    3:3:java.lang.Object get(android.view.View):0 -> b
    4:4:java.lang.Object get(android.view.View):0:0 -> b
androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat -> b.f.g.y:
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent) -> a
androidx.core.view.ViewCompat$UnhandledKeyEventManager -> b.f.g.z:
    android.util.SparseArray mCapturedKeys -> b
    java.lang.ref.WeakReference mLastDispatchedPreViewKeyEvent -> c
    java.util.ArrayList sViewsWithListeners -> d
    java.util.WeakHashMap mViewsContainingListeners -> a
    androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View) -> a
    1:1:android.util.SparseArray getCapturedKeys():0:0 -> a
    1:1:boolean dispatch(android.view.View,android.view.KeyEvent):0 -> a
    2:2:boolean dispatch(android.view.View,android.view.KeyEvent):0:0 -> a
    3:3:android.util.SparseArray getCapturedKeys():0:0 -> a
    3:3:boolean preDispatch(android.view.KeyEvent):0 -> a
    4:4:boolean preDispatch(android.view.KeyEvent):0:0 -> a
    void recalcViewsWithUnhandled() -> a
    android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent) -> b
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent) -> c
androidx.core.view.ViewConfigurationCompat -> b.f.g.B:
    int getScaledHoverSlop(android.view.ViewConfiguration) -> a
    boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context) -> a
androidx.core.view.ViewPropertyAnimatorCompat -> b.f.g.E:
    java.lang.Runnable mEndAction -> c
    java.lang.Runnable mStartAction -> b
    int mOldLayerType -> d
    java.lang.ref.WeakReference mView -> a
    androidx.core.view.ViewPropertyAnimatorCompat alpha(float) -> a
    void cancel() -> a
    androidx.core.view.ViewPropertyAnimatorCompat setDuration(long) -> a
    androidx.core.view.ViewPropertyAnimatorCompat setInterpolator(android.view.animation.Interpolator) -> a
    androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener) -> a
    void setListenerInternal(android.view.View,androidx.core.view.ViewPropertyAnimatorListener) -> a
    androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener) -> a
    long getDuration() -> b
    androidx.core.view.ViewPropertyAnimatorCompat setStartDelay(long) -> b
    androidx.core.view.ViewPropertyAnimatorCompat translationY(float) -> b
    void start() -> c
androidx.core.view.ViewPropertyAnimatorCompat$1 -> b.f.g.C:
    androidx.core.view.ViewPropertyAnimatorListener val$listener -> a
    android.view.View val$view -> b
androidx.core.view.ViewPropertyAnimatorCompat$2 -> b.f.g.D:
    androidx.core.view.ViewPropertyAnimatorUpdateListener val$listener -> a
    android.view.View val$view -> b
androidx.core.view.ViewPropertyAnimatorListener -> b.f.g.F:
    void onAnimationEnd(android.view.View) -> a
    void onAnimationStart(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
androidx.core.view.ViewPropertyAnimatorListenerAdapter -> b.f.g.G:
    void onAnimationStart(android.view.View) -> b
    void onAnimationCancel(android.view.View) -> c
androidx.core.view.ViewPropertyAnimatorUpdateListener -> b.f.g.H:
    void onAnimationUpdate(android.view.View) -> a
androidx.core.view.WindowInsetsCompat -> b.f.g.I:
    java.lang.Object mInsets -> a
    int getSystemWindowInsetBottom() -> a
    androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int) -> a
    java.lang.Object unwrap(androidx.core.view.WindowInsetsCompat) -> a
    androidx.core.view.WindowInsetsCompat wrap(java.lang.Object) -> a
    int getSystemWindowInsetLeft() -> b
    int getSystemWindowInsetRight() -> c
    int getSystemWindowInsetTop() -> d
androidx.core.view.accessibility.AccessibilityClickableSpanCompat -> b.f.g.J.a:
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat mNodeInfoCompat -> c
    int mClickableSpanActionId -> d
    int mOriginalClickableSpanId -> b
androidx.core.view.accessibility.AccessibilityNodeInfoCompat -> b.f.g.J.c:
    android.view.accessibility.AccessibilityNodeInfo mInfo -> a
    int sClickableSpanId -> d
    int mParentVirtualDescendantId -> b
    int mVirtualDescendantId -> c
    void addAction(int) -> a
    void addAction(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) -> a
    1:1:void clearExtrasSpans():0:0 -> a
    1:1:void addSpansToExtras(java.lang.CharSequence,android.view.View):0 -> a
    2:2:void removeCollectedSpans(android.view.View):0:0 -> a
    2:2:void addSpansToExtras(java.lang.CharSequence,android.view.View):0 -> a
    3:3:void addSpansToExtras(java.lang.CharSequence,android.view.View):0:0 -> a
    4:4:android.util.SparseArray getOrCreateSpansFromViewTags(android.view.View):0:0 -> a
    4:4:void addSpansToExtras(java.lang.CharSequence,android.view.View):0 -> a
    5:5:void addSpansToExtras(java.lang.CharSequence,android.view.View):0:0 -> a
    6:6:int idForClickableSpan(android.text.style.ClickableSpan,android.util.SparseArray):0:0 -> a
    6:6:void addSpansToExtras(java.lang.CharSequence,android.view.View):0 -> a
    7:7:void addSpansToExtras(java.lang.CharSequence,android.view.View):0:0 -> a
    8:8:void addSpanLocationToExtras(android.text.style.ClickableSpan,android.text.Spanned,int):0:0 -> a
    8:8:void addSpansToExtras(java.lang.CharSequence,android.view.View):0 -> a
    java.util.List extrasIntList(java.lang.String) -> a
    android.os.Bundle getExtras() -> a
    android.util.SparseArray getSpansFromViewTags(android.view.View) -> a
    boolean performAction(int,android.os.Bundle) -> a
    void setBooleanProperty(int,boolean) -> a
    void setClassName(java.lang.CharSequence) -> a
    void setHeading(boolean) -> a
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat wrap(android.view.accessibility.AccessibilityNodeInfo) -> a
    void setPaneTitle(java.lang.CharSequence) -> b
    void setScreenReaderFocusable(boolean) -> b
    android.view.accessibility.AccessibilityNodeInfo unwrap() -> b
    android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence) -> c
    void setScrollable(boolean) -> c
    1:1:void getBoundsInParent(android.graphics.Rect):0:0 -> toString
    1:1:java.lang.String toString():0 -> toString
    2:2:java.lang.String toString():0:0 -> toString
    3:3:void getBoundsInScreen(android.graphics.Rect):0:0 -> toString
    3:3:java.lang.String toString():0 -> toString
    4:4:java.lang.String toString():0:0 -> toString
    5:5:java.lang.CharSequence getPackageName():0:0 -> toString
    5:5:java.lang.String toString():0 -> toString
    6:6:java.lang.String toString():0:0 -> toString
    7:7:java.lang.CharSequence getClassName():0:0 -> toString
    7:7:java.lang.String toString():0 -> toString
    8:8:java.lang.String toString():0:0 -> toString
    9:9:boolean hasSpans():0:0 -> toString
    9:9:java.lang.CharSequence getText():0 -> toString
    9:9:java.lang.String toString():0 -> toString
    10:10:java.lang.CharSequence getText():0:0 -> toString
    10:10:java.lang.String toString():0 -> toString
    11:11:java.lang.String toString():0:0 -> toString
    12:12:java.lang.CharSequence getContentDescription():0:0 -> toString
    12:12:java.lang.String toString():0 -> toString
    13:13:java.lang.String toString():0:0 -> toString
    14:14:java.lang.String getViewIdResourceName():0:0 -> toString
    14:14:java.lang.String toString():0 -> toString
    15:15:java.lang.String toString():0:0 -> toString
    16:16:boolean isCheckable():0:0 -> toString
    16:16:java.lang.String toString():0 -> toString
    17:17:java.lang.String toString():0:0 -> toString
    18:18:boolean isChecked():0:0 -> toString
    18:18:java.lang.String toString():0 -> toString
    19:19:java.lang.String toString():0:0 -> toString
    20:20:boolean isFocusable():0:0 -> toString
    20:20:java.lang.String toString():0 -> toString
    21:21:java.lang.String toString():0:0 -> toString
    22:22:boolean isFocused():0:0 -> toString
    22:22:java.lang.String toString():0 -> toString
    23:23:java.lang.String toString():0:0 -> toString
    24:24:boolean isSelected():0:0 -> toString
    24:24:java.lang.String toString():0 -> toString
    25:25:java.lang.String toString():0:0 -> toString
    26:26:boolean isClickable():0:0 -> toString
    26:26:java.lang.String toString():0 -> toString
    27:27:java.lang.String toString():0:0 -> toString
    28:28:boolean isLongClickable():0:0 -> toString
    28:28:java.lang.String toString():0 -> toString
    29:29:java.lang.String toString():0:0 -> toString
    30:30:boolean isEnabled():0:0 -> toString
    30:30:java.lang.String toString():0 -> toString
    31:31:java.lang.String toString():0:0 -> toString
    32:32:boolean isPassword():0:0 -> toString
    32:32:java.lang.String toString():0 -> toString
    33:33:java.lang.String toString():0:0 -> toString
    34:34:boolean isScrollable():0:0 -> toString
    34:34:java.lang.String toString():0 -> toString
    35:35:java.lang.String toString():0:0 -> toString
    36:36:int getActions():0:0 -> toString
    36:36:java.lang.String toString():0 -> toString
    37:37:java.lang.String toString():0:0 -> toString
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat -> b.f.g.J.b:
    java.lang.Object mAction -> a
    java.lang.Class mViewCommandArgumentClass -> b
    1:1:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    3:3:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    3:3:void <clinit>():0 -> <clinit>
    4:4:void <clinit>():0:0 -> <clinit>
    5:5:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    5:5:void <clinit>():0 -> <clinit>
    6:6:void <clinit>():0:0 -> <clinit>
    7:7:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    7:7:void <clinit>():0 -> <clinit>
    8:8:void <clinit>():0:0 -> <clinit>
    9:9:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    9:9:void <clinit>():0 -> <clinit>
    10:10:void <clinit>():0:0 -> <clinit>
    11:11:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    11:11:void <clinit>():0 -> <clinit>
    12:12:void <clinit>():0:0 -> <clinit>
    13:13:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    13:13:void <clinit>():0 -> <clinit>
    14:14:void <clinit>():0:0 -> <clinit>
    15:15:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    15:15:void <clinit>():0 -> <clinit>
    16:16:void <clinit>():0:0 -> <clinit>
    17:17:void <init>(int,java.lang.CharSequence,java.lang.Class):0:0 -> <clinit>
    17:17:void <clinit>():0 -> <clinit>
    18:18:void <clinit>():0:0 -> <clinit>
    19:19:void <init>(int,java.lang.CharSequence,java.lang.Class):0:0 -> <clinit>
    19:19:void <clinit>():0 -> <clinit>
    20:20:void <clinit>():0:0 -> <clinit>
    21:21:void <init>(int,java.lang.CharSequence,java.lang.Class):0:0 -> <clinit>
    21:21:void <clinit>():0 -> <clinit>
    22:22:void <clinit>():0:0 -> <clinit>
    23:23:void <init>(int,java.lang.CharSequence,java.lang.Class):0:0 -> <clinit>
    23:23:void <clinit>():0 -> <clinit>
    24:24:void <clinit>():0:0 -> <clinit>
    25:25:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    25:25:void <clinit>():0 -> <clinit>
    26:26:void <clinit>():0:0 -> <clinit>
    27:27:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    27:27:void <clinit>():0 -> <clinit>
    28:28:void <clinit>():0:0 -> <clinit>
    29:29:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    29:29:void <clinit>():0 -> <clinit>
    30:30:void <clinit>():0:0 -> <clinit>
    31:31:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    31:31:void <clinit>():0 -> <clinit>
    32:32:void <clinit>():0:0 -> <clinit>
    33:33:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    33:33:void <clinit>():0 -> <clinit>
    34:34:void <clinit>():0:0 -> <clinit>
    35:35:void <init>(int,java.lang.CharSequence,java.lang.Class):0:0 -> <clinit>
    35:35:void <clinit>():0 -> <clinit>
    36:36:void <clinit>():0:0 -> <clinit>
    37:37:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    37:37:void <clinit>():0 -> <clinit>
    38:38:void <clinit>():0:0 -> <clinit>
    39:39:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    39:39:void <clinit>():0 -> <clinit>
    40:40:void <clinit>():0:0 -> <clinit>
    41:41:void <init>(int,java.lang.CharSequence):0:0 -> <clinit>
    41:41:void <clinit>():0 -> <clinit>
    42:42:void <clinit>():0:0 -> <clinit>
    43:43:void <init>(int,java.lang.CharSequence,java.lang.Class):0:0 -> <clinit>
    43:43:void <clinit>():0 -> <clinit>
    44:44:void <clinit>():0:0 -> <clinit>
    int getId() -> a
androidx.core.view.accessibility.AccessibilityNodeProviderCompat -> b.f.g.J.d:
    java.lang.Object mProvider -> a
    java.lang.Object getProvider() -> a
androidx.core.view.accessibility.AccessibilityViewCommand$CommandArguments -> b.f.g.J.e:
androidx.core.view.accessibility.AccessibilityViewCommand$MoveAtGranularityArguments -> b.f.g.J.f:
androidx.core.view.accessibility.AccessibilityViewCommand$MoveHtmlArguments -> b.f.g.J.g:
androidx.core.view.accessibility.AccessibilityViewCommand$MoveWindowArguments -> b.f.g.J.h:
androidx.core.view.accessibility.AccessibilityViewCommand$ScrollToPositionArguments -> b.f.g.J.i:
androidx.core.view.accessibility.AccessibilityViewCommand$SetProgressArguments -> b.f.g.J.j:
androidx.core.view.accessibility.AccessibilityViewCommand$SetSelectionArguments -> b.f.g.J.k:
androidx.core.view.accessibility.AccessibilityViewCommand$SetTextArguments -> b.f.g.J.l:
androidx.core.widget.AutoScrollHelper$ClampedScroller -> androidx.core.widget.a:
    long mStopTime -> i
    float mStopValue -> j
    long mDeltaTime -> f
    long mStartTime -> e
    int mEffectiveRampDown -> k
    int mDeltaY -> h
    float mTargetVelocityY -> d
    float mTargetVelocityX -> c
    int mDeltaX -> g
    int mRampDownDuration -> b
    int mRampUpDuration -> a
    void computeScrollDelta() -> a
    float getValueAt(long) -> a
    void setRampDownDuration(int) -> a
    void setTargetVelocity(float,float) -> a
    int getDeltaX() -> b
    void setRampUpDuration(int) -> b
    int getDeltaY() -> c
    int getHorizontalDirection() -> d
    int getVerticalDirection() -> e
    boolean isFinished() -> f
    void requestStop() -> g
    void start() -> h
androidx.core.widget.AutoScrollHelper$ScrollAnimationRunnable -> androidx.core.widget.b:
    androidx.core.widget.AutoScrollHelper this$0 -> b
androidx.core.widget.AutoSizeableTextView -> androidx.core.widget.c:
    boolean PLATFORM_SUPPORTS_AUTOSIZE -> a
androidx.core.widget.CompoundButtonCompat -> androidx.core.widget.d:
    java.lang.reflect.Method androidx.core.widget.PopupWindowCompat.sSetWindowLayoutTypeMethod -> c
    java.lang.reflect.Field androidx.core.widget.PopupWindowCompat.sOverlapAnchorField -> e
    boolean androidx.core.widget.PopupWindowCompat.sOverlapAnchorFieldAttempted -> f
    java.lang.reflect.Field sButtonDrawableField -> a
    boolean sButtonDrawableFieldFetched -> b
    boolean androidx.core.widget.PopupWindowCompat.sSetWindowLayoutTypeMethodAttempted -> d
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton) -> a
    void androidx.core.widget.TextViewCompat.setFirstBaselineToTopHeight(android.widget.TextView,int) -> a
    void androidx.core.widget.PopupWindowCompat.setOverlapAnchor(android.widget.PopupWindow,boolean) -> a
    1:1:androidx.core.text.PrecomputedTextCompat$Params androidx.core.widget.TextViewCompat.getTextMetricsParams(android.widget.TextView):0:0 -> a
    1:1:void androidx.core.widget.TextViewCompat.setPrecomputedText(android.widget.TextView,androidx.core.text.PrecomputedTextCompat):0 -> a
    2:2:android.text.TextDirectionHeuristic androidx.core.widget.TextViewCompat.getTextDirectionHeuristic(android.widget.TextView):0:0 -> a
    2:2:androidx.core.text.PrecomputedTextCompat$Params androidx.core.widget.TextViewCompat.getTextMetricsParams(android.widget.TextView):0 -> a
    2:2:void androidx.core.widget.TextViewCompat.setPrecomputedText(android.widget.TextView,androidx.core.text.PrecomputedTextCompat):0 -> a
    3:3:androidx.core.text.PrecomputedTextCompat$Params androidx.core.widget.TextViewCompat.getTextMetricsParams(android.widget.TextView):0:0 -> a
    3:3:void androidx.core.widget.TextViewCompat.setPrecomputedText(android.widget.TextView,androidx.core.text.PrecomputedTextCompat):0 -> a
    4:4:void androidx.core.widget.TextViewCompat.setPrecomputedText(android.widget.TextView,androidx.core.text.PrecomputedTextCompat):0:0 -> a
    void androidx.core.widget.PopupWindowCompat.setWindowLayoutType(android.widget.PopupWindow,int) -> a
    android.view.ActionMode$Callback androidx.core.widget.TextViewCompat.wrapCustomSelectionActionModeCallback(android.widget.TextView,android.view.ActionMode$Callback) -> a
    void androidx.core.widget.TextViewCompat.setLastBaselineToBottomHeight(android.widget.TextView,int) -> b
    void androidx.core.widget.TextViewCompat.setLineHeight(android.widget.TextView,int) -> c
androidx.core.widget.ListViewAutoScrollHelper -> androidx.core.widget.e:
    boolean androidx.core.widget.AutoScrollHelper.mAlreadyDelayed -> m
    boolean androidx.core.widget.AutoScrollHelper.mNeedsReset -> n
    float[] androidx.core.widget.AutoScrollHelper.mMinimumVelocity -> k
    boolean androidx.core.widget.AutoScrollHelper.mNeedsCancel -> o
    float[] androidx.core.widget.AutoScrollHelper.mMaximumVelocity -> l
    boolean androidx.core.widget.AutoScrollHelper.mAnimating -> p
    float[] androidx.core.widget.AutoScrollHelper.mRelativeVelocity -> j
    android.view.animation.Interpolator androidx.core.widget.AutoScrollHelper.mEdgeInterpolator -> c
    float[] androidx.core.widget.AutoScrollHelper.mMaximumEdges -> g
    int androidx.core.widget.AutoScrollHelper.mEdgeType -> h
    int androidx.core.widget.AutoScrollHelper.mActivationDelay -> i
    float[] androidx.core.widget.AutoScrollHelper.mRelativeEdges -> f
    boolean androidx.core.widget.AutoScrollHelper.mEnabled -> q
    boolean androidx.core.widget.AutoScrollHelper.mExclusive -> r
    android.widget.ListView mTarget -> s
    java.lang.Runnable androidx.core.widget.AutoScrollHelper.mRunnable -> e
    int androidx.core.widget.AutoScrollHelper.DEFAULT_ACTIVATION_DELAY -> t
    android.view.View androidx.core.widget.AutoScrollHelper.mTarget -> d
    androidx.core.widget.AutoScrollHelper$ClampedScroller androidx.core.widget.AutoScrollHelper.mScroller -> b
    void androidx.core.widget.AutoScrollHelper.<clinit>() -> <clinit>
    1:1:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0:0 -> <init>
    1:1:void <init>(android.widget.ListView):0 -> <init>
    2:2:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setMaximumVelocity(float,float):0:0 -> <init>
    2:2:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setMaximumVelocity(float,float):0 -> <init>
    2:2:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    2:2:void <init>(android.widget.ListView):0 -> <init>
    3:3:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setMinimumVelocity(float,float):0:0 -> <init>
    3:3:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setMinimumVelocity(float,float):0 -> <init>
    3:3:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    3:3:void <init>(android.widget.ListView):0 -> <init>
    4:4:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setEdgeType(int):0:0 -> <init>
    4:4:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setEdgeType(int):0 -> <init>
    4:4:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    4:4:void <init>(android.widget.ListView):0 -> <init>
    5:5:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setMaximumEdges(float,float):0:0 -> <init>
    5:5:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setMaximumEdges(float,float):0 -> <init>
    5:5:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    5:5:void <init>(android.widget.ListView):0 -> <init>
    6:6:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRelativeEdges(float,float):0:0 -> <init>
    6:6:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRelativeEdges(float,float):0 -> <init>
    6:6:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    6:6:void <init>(android.widget.ListView):0 -> <init>
    7:7:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRelativeVelocity(float,float):0:0 -> <init>
    7:7:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRelativeVelocity(float,float):0 -> <init>
    7:7:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    7:7:void <init>(android.widget.ListView):0 -> <init>
    8:8:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0:0 -> <init>
    8:8:void <init>(android.widget.ListView):0 -> <init>
    9:9:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setActivationDelay(int):0:0 -> <init>
    9:9:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setActivationDelay(int):0 -> <init>
    9:9:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    9:9:void <init>(android.widget.ListView):0 -> <init>
    10:10:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRampUpDuration(int):0:0 -> <init>
    10:10:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRampUpDuration(int):0 -> <init>
    10:10:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    10:10:void <init>(android.widget.ListView):0 -> <init>
    11:11:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRampDownDuration(int):0:0 -> <init>
    11:11:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setRampDownDuration(int):0 -> <init>
    11:11:void androidx.core.widget.AutoScrollHelper.<init>(android.view.View):0 -> <init>
    11:11:void <init>(android.widget.ListView):0 -> <init>
    12:12:void <init>(android.widget.ListView):0:0 -> <init>
    1:1:void androidx.core.widget.AutoScrollHelper.cancelTargetTouch():0:0 -> a
    1:1:void androidx.core.widget.AutoScrollHelper.cancelTargetTouch():0 -> a
    float androidx.core.widget.AutoScrollHelper.computeTargetVelocity(int,float,float,float) -> a
    float androidx.core.widget.AutoScrollHelper.constrain(float,float,float) -> a
    int androidx.core.widget.AutoScrollHelper.constrain(int,int,int) -> a
    float androidx.core.widget.AutoScrollHelper.constrainEdgeValue(float,float) -> a
    float androidx.core.widget.AutoScrollHelper.getEdgeValue(float,float,float,float) -> a
    2:2:void androidx.core.widget.ListViewCompat.scrollListBy(android.widget.ListView,int):0:0 -> a
    2:2:void scrollTargetBy(int,int):0 -> a
    3:3:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setEnabled(boolean):0:0 -> a
    3:3:androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setEnabled(boolean):0 -> a
    1:1:boolean androidx.core.widget.AutoScrollHelper.shouldAnimate():0:0 -> b
    1:1:boolean androidx.core.widget.AutoScrollHelper.shouldAnimate():0 -> b
    2:2:boolean canTargetScrollVertically(int):0:0 -> b
    2:2:boolean androidx.core.widget.AutoScrollHelper.shouldAnimate():0 -> b
    2:2:boolean androidx.core.widget.AutoScrollHelper.shouldAnimate():0 -> b
    void androidx.core.widget.AutoScrollHelper.requestStop() -> c
    void androidx.core.widget.AutoScrollHelper.startAnimating() -> d
    1:1:boolean androidx.core.widget.AutoScrollHelper.onTouch(android.view.View,android.view.MotionEvent):0:0 -> onTouch
    1:1:boolean androidx.core.widget.AutoScrollHelper.onTouch(android.view.View,android.view.MotionEvent):0 -> onTouch
androidx.core.widget.NestedScrollView -> androidx.core.widget.NestedScrollView:
    boolean mFillViewport -> m
    boolean mIsLaidOut -> i
    int[] mScrollOffset -> s
    boolean mIsBeingDragged -> k
    androidx.core.view.NestedScrollingParentHelper mParentHelper -> x
    androidx.core.widget.NestedScrollView$AccessibilityDelegate ACCESSIBILITY_DELEGATE -> B
    android.graphics.Rect mTempRect -> c
    android.widget.OverScroller mScroller -> d
    int[] SCROLLVIEW_STYLEABLE -> C
    android.widget.EdgeEffect mEdgeGlowTop -> e
    boolean mIsLayoutDirty -> h
    int mNestedYOffset -> u
    int mMaximumVelocity -> q
    boolean mSmoothScrollingEnabled -> n
    int mTouchSlop -> o
    android.view.VelocityTracker mVelocityTracker -> l
    int[] mScrollConsumed -> t
    long mLastScroll -> b
    int mLastMotionY -> g
    androidx.core.widget.NestedScrollView$SavedState mSavedState -> w
    android.widget.EdgeEffect mEdgeGlowBottom -> f
    float mVerticalScrollFactor -> z
    android.view.View mChildToScrollTo -> j
    int mLastScrollerY -> v
    androidx.core.widget.NestedScrollView$OnScrollChangeListener mOnScrollChangeListener -> A
    int mActivePointerId -> r
    androidx.core.view.NestedScrollingChildHelper mChildHelper -> y
    int mMinimumVelocity -> p
    1:1:void initScrollView():0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,int):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,int):0:0 -> <init>
    1:1:boolean isOffScreen(android.view.View):0:0 -> a
    1:1:boolean arrowScroll(int):0 -> a
    2:2:boolean arrowScroll(int):0:0 -> a
    int clamp(int,int,int) -> a
    int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect) -> a
    boolean dispatchNestedPreScroll(int,int,int[],int[],int) -> a
    void dispatchNestedScroll(int,int,int,int,int[],int,int[]) -> a
    3:3:boolean canScroll():0:0 -> a
    3:3:boolean executeKeyEvent(android.view.KeyEvent):0 -> a
    4:4:boolean executeKeyEvent(android.view.KeyEvent):0:0 -> a
    int getMaxScrollAmount() -> a
    boolean isViewDescendantOf(android.view.View,android.view.View) -> a
    boolean isWithinDeltaOfScreen(android.view.View,int,int) -> a
    void onNestedPreScroll(android.view.View,int,int,int[],int) -> a
    void onNestedScroll(android.view.View,int,int,int,int,int) -> a
    void onNestedScroll(android.view.View,int,int,int,int,int,int[]) -> a
    void onNestedScrollAccepted(android.view.View,android.view.View,int,int) -> a
    void onNestedScrollInternal(int,int,int[]) -> a
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void onStopNestedScroll(android.view.View,int) -> a
    boolean overScrollByCompat(int,int,int,int,int,int,int,int,boolean) -> a
    void scrollToChild(android.view.View) -> a
    void setFillViewport(boolean) -> a
    void setOnScrollChangeListener(androidx.core.widget.NestedScrollView$OnScrollChangeListener) -> a
    void smoothScrollBy(int,int) -> a
    void fling(int) -> b
    int getScrollRange() -> b
    boolean onStartNestedScroll(android.view.View,android.view.View,int,int) -> b
    void runAnimatedScroll(boolean) -> b
    1:1:android.view.View findFocusableViewInBounds(boolean,int,int):0:0 -> b
    1:1:boolean scrollAndFocus(int,int,int):0 -> b
    2:2:boolean scrollAndFocus(int,int,int):0:0 -> b
    void smoothScrollTo(int,int) -> b
    void abortAnimatedScroll() -> c
    boolean fullScroll(int) -> c
    boolean startNestedScroll(int,int) -> c
    void ensureGlows() -> d
    boolean hasNestedScrollingParent(int) -> d
    boolean pageScroll(int) -> e
    void recycleVelocityTracker() -> e
    void stopNestedScroll(int) -> f
    void doScrollY(int) -> g
    1:1:float getVerticalScrollFactorCompat():0:0 -> onGenericMotionEvent
    1:1:boolean onGenericMotionEvent(android.view.MotionEvent):0 -> onGenericMotionEvent
    2:2:boolean onGenericMotionEvent(android.view.MotionEvent):0:0 -> onGenericMotionEvent
    1:1:void initVelocityTrackerIfNotExists():0:0 -> onInterceptTouchEvent
    1:1:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    2:2:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    3:3:boolean inChild(int,int):0:0 -> onInterceptTouchEvent
    3:3:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    4:4:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    5:5:void initOrResetVelocityTracker():0:0 -> onInterceptTouchEvent
    5:5:boolean onInterceptTouchEvent(android.view.MotionEvent):0 -> onInterceptTouchEvent
    6:6:boolean onInterceptTouchEvent(android.view.MotionEvent):0:0 -> onInterceptTouchEvent
    1:1:boolean isOffScreen(android.view.View):0:0 -> onRequestFocusInDescendants
    1:1:boolean onRequestFocusInDescendants(int,android.graphics.Rect):0 -> onRequestFocusInDescendants
    2:2:boolean onRequestFocusInDescendants(int,android.graphics.Rect):0:0 -> onRequestFocusInDescendants
    1:1:void initVelocityTrackerIfNotExists():0:0 -> onTouchEvent
    1:1:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    2:2:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    3:3:void androidx.core.widget.EdgeEffectCompat.onPull(android.widget.EdgeEffect,float,float):0:0 -> onTouchEvent
    3:3:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    4:4:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    5:5:void androidx.core.widget.EdgeEffectCompat.onPull(android.widget.EdgeEffect,float,float):0:0 -> onTouchEvent
    5:5:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    6:6:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    7:7:void endDrag():0:0 -> onTouchEvent
    7:7:boolean onTouchEvent(android.view.MotionEvent):0 -> onTouchEvent
    8:8:boolean onTouchEvent(android.view.MotionEvent):0:0 -> onTouchEvent
    1:1:boolean scrollToChildRect(android.graphics.Rect,boolean):0:0 -> requestChildRectangleOnScreen
    1:1:boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean):0 -> requestChildRectangleOnScreen
androidx.core.widget.NestedScrollView$AccessibilityDelegate -> androidx.core.widget.f:
    void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
    1:1:void androidx.core.view.accessibility.AccessibilityRecordCompat.setMaxScrollX(android.view.accessibility.AccessibilityRecord,int):0:0 -> b
    1:1:void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent):0 -> b
    2:2:void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent):0:0 -> b
    3:3:void androidx.core.view.accessibility.AccessibilityRecordCompat.setMaxScrollY(android.view.accessibility.AccessibilityRecord,int):0:0 -> b
    3:3:void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent):0 -> b
androidx.core.widget.NestedScrollView$OnScrollChangeListener -> androidx.core.widget.g:
    void onScrollChange(androidx.core.widget.NestedScrollView,int,int,int,int) -> a
androidx.core.widget.NestedScrollView$SavedState -> androidx.core.widget.i:
    int scrollPosition -> b
androidx.core.widget.NestedScrollView$SavedState$1 -> androidx.core.widget.h:
    1:1:androidx.core.widget.NestedScrollView$SavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.core.widget.NestedScrollView$SavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.core.widget.TextViewCompat$OreoCallback -> androidx.core.widget.j:
    android.widget.TextView mTextView -> b
    boolean mCanUseMenuBuilderReferences -> e
    java.lang.reflect.Method mMenuBuilderRemoveItemAtMethod -> d
    boolean mInitializedMenuBuilderReferences -> f
    android.view.ActionMode$Callback mCallback -> a
    java.lang.Class mMenuBuilderClass -> c
    android.content.Intent createProcessTextIntent() -> a
    1:1:void recomputeProcessTextMenuItems(android.view.Menu):0:0 -> onPrepareActionMode
    1:1:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    2:2:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0:0 -> onPrepareActionMode
    2:2:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    2:2:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    3:3:boolean isSupportedActivity(android.content.pm.ResolveInfo,android.content.Context):0:0 -> onPrepareActionMode
    3:3:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0 -> onPrepareActionMode
    3:3:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    3:3:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    4:4:java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager):0:0 -> onPrepareActionMode
    4:4:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    4:4:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    5:5:void recomputeProcessTextMenuItems(android.view.Menu):0:0 -> onPrepareActionMode
    5:5:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    6:6:android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView):0:0 -> onPrepareActionMode
    6:6:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    6:6:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    7:7:boolean isEditable(android.widget.TextView):0:0 -> onPrepareActionMode
    7:7:android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView):0 -> onPrepareActionMode
    7:7:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    7:7:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    8:8:android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView):0:0 -> onPrepareActionMode
    8:8:void recomputeProcessTextMenuItems(android.view.Menu):0 -> onPrepareActionMode
    8:8:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    9:9:void recomputeProcessTextMenuItems(android.view.Menu):0:0 -> onPrepareActionMode
    9:9:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0 -> onPrepareActionMode
    10:10:boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu):0:0 -> onPrepareActionMode
androidx.core.widget.TintableCompoundButton -> androidx.core.widget.k:
    void setSupportButtonTintList(android.content.res.ColorStateList) -> a
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode) -> a
androidx.core.widget.TintableImageSourceView -> androidx.core.widget.l:
    void setSupportImageTintList(android.content.res.ColorStateList) -> b
    void setSupportImageTintMode(android.graphics.PorterDuff$Mode) -> b
    android.graphics.PorterDuff$Mode getSupportImageTintMode() -> e
    android.content.res.ColorStateList getSupportImageTintList() -> f
androidx.cursoradapter.widget.CursorFilter$CursorFilterClient -> b.g.a.a:
androidx.cursoradapter.widget.ResourceCursorAdapter -> b.g.a.b:
androidx.customview.view.AbsSavedState -> b.h.a.c:
    android.os.Parcelable mSuperState -> b
    androidx.customview.view.AbsSavedState EMPTY_STATE -> c
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.customview.view.AbsSavedState$1):0 -> <init>
    android.os.Parcelable getSuperState() -> a
androidx.customview.view.AbsSavedState$1 -> b.h.a.a:
androidx.customview.view.AbsSavedState$2 -> b.h.a.b:
    1:1:androidx.customview.view.AbsSavedState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    2:2:androidx.customview.view.AbsSavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader):0:0 -> createFromParcel
    2:2:java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader):0 -> createFromParcel
    1:1:androidx.customview.view.AbsSavedState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.BackStackRecord -> b.i.a.b:
    androidx.fragment.app.FragmentManagerImpl mManager -> a
    int mBreadCrumbShortTitleRes -> o
    int mIndex -> l
    int mBreadCrumbTitleRes -> m
    boolean mAddToBackStack -> i
    java.lang.String mName -> j
    int mTransitionStyle -> h
    boolean mCommitted -> k
    int mPopExitAnim -> f
    int mTransition -> g
    int mExitAnim -> d
    int mPopEnterAnim -> e
    java.util.ArrayList mOps -> b
    int mEnterAnim -> c
    boolean mReorderingAllowed -> s
    java.lang.CharSequence mBreadCrumbTitleText -> n
    java.lang.CharSequence mBreadCrumbShortTitleText -> p
    java.util.ArrayList mCommitRunnables -> t
    java.util.ArrayList mSharedElementTargetNames -> r
    java.util.ArrayList mSharedElementSourceNames -> q
    void bumpBackStackNesting(int) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void executeOps() -> a
    void executePopOps(boolean) -> a
    1:1:void androidx.fragment.app.FragmentManagerImpl.addBackStackState(androidx.fragment.app.BackStackRecord):0:0 -> a
    1:1:boolean generateOps(java.util.ArrayList,java.util.ArrayList):0 -> a
    boolean interactsWith(java.util.ArrayList,int,int) -> a
    2:2:boolean androidx.fragment.app.Fragment.isPostponed():0:0 -> a
    2:2:boolean isFragmentPostponed(androidx.fragment.app.BackStackRecord$Op):0 -> a
    void setOnStartPostponedListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener) -> a
    boolean interactsWith(int) -> b
    boolean isPostponed() -> b
androidx.fragment.app.BackStackRecord$Op -> b.i.a.a:
    int popExitAnim -> f
    androidx.fragment.app.Fragment fragment -> b
    int exitAnim -> d
    int popEnterAnim -> e
    int enterAnim -> c
    int cmd -> a
androidx.fragment.app.BackStackState -> b.i.a.d:
    boolean mReorderingAllowed -> m
    int mBreadCrumbShortTitleRes -> i
    int mIndex -> f
    int mBreadCrumbTitleRes -> g
    int mTransitionStyle -> d
    java.lang.CharSequence mBreadCrumbTitleText -> h
    int mTransition -> c
    java.lang.CharSequence mBreadCrumbShortTitleText -> j
    android.os.Parcelable$Creator CREATOR -> n
    java.util.ArrayList mSharedElementTargetNames -> l
    int[] mOps -> b
    java.util.ArrayList mSharedElementSourceNames -> k
    java.lang.String mName -> e
    1:1:void androidx.fragment.app.BackStackRecord.addOp(androidx.fragment.app.BackStackRecord$Op):0:0 -> a
    1:1:androidx.fragment.app.BackStackRecord instantiate(androidx.fragment.app.FragmentManagerImpl):0 -> a
    2:2:androidx.fragment.app.BackStackRecord instantiate(androidx.fragment.app.FragmentManagerImpl):0:0 -> a
androidx.fragment.app.BackStackState$1 -> b.i.a.c:
    1:1:androidx.fragment.app.BackStackState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.fragment.app.BackStackState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.Fragment -> b.i.a.j:
    boolean mRemoving -> m
    java.lang.Boolean mSavedUserVisibleHint -> e
    boolean mHiddenChanged -> P
    android.os.Bundle mSavedFragmentState -> c
    boolean mDeferStart -> L
    boolean mPerformedCreateView -> q
    androidx.fragment.app.Fragment mParentFragment -> x
    android.view.View mView -> J
    androidx.fragment.app.FragmentManagerImpl mChildFragmentManager -> u
    int mFragmentId -> y
    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry -> T
    boolean mMenuVisible -> G
    boolean mDetached -> C
    boolean mUserVisibleHint -> M
    boolean mFromLayout -> n
    java.lang.Object USE_DEFAULT_TRANSITION -> Y
    int mContainerId -> z
    androidx.lifecycle.LifecycleRegistry mViewLifecycleRegistry -> U
    boolean mCalled -> H
    int mBackStackNesting -> r
    boolean mRetainInstance -> D
    boolean mInLayout -> o
    androidx.fragment.app.Fragment mTarget -> i
    androidx.fragment.app.Fragment$AnimationInfo mAnimationInfo -> N
    int mTargetIndex -> j
    int mIndex -> f
    int mState -> b
    androidx.fragment.app.FragmentHostCallback mHost -> t
    androidx.lifecycle.MutableLiveData mViewLifecycleOwnerLiveData -> W
    androidx.fragment.app.FragmentManagerImpl mFragmentManager -> s
    android.util.SparseArray mSavedViewState -> d
    androidx.lifecycle.ViewModelStore mViewModelStore -> w
    boolean mRetaining -> E
    androidx.fragment.app.FragmentManagerNonConfig mChildNonConfig -> v
    android.view.ViewGroup mContainer -> I
    java.lang.String mWho -> g
    boolean mIsNewlyAdded -> O
    boolean mRestored -> p
    int mTargetRequestCode -> k
    boolean mAdded -> l
    android.os.Bundle mArguments -> h
    boolean mIsCreated -> S
    android.view.View mInnerView -> K
    android.view.LayoutInflater mLayoutInflater -> R
    androidx.collection.SimpleArrayMap sClassMap -> X
    boolean mHasMenu -> F
    java.lang.String mTag -> A
    float mPostponedAlpha -> Q
    androidx.lifecycle.LifecycleOwner mViewLifecycleOwner -> V
    boolean mHidden -> B
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String) -> a
    androidx.lifecycle.Lifecycle getLifecycle() -> a
    1:1:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> a
    1:1:androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle):0 -> a
    2:2:androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle):0:0 -> a
    3:3:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> a
    3:3:boolean isSupportFragmentClass(android.content.Context,java.lang.String):0 -> a
    4:4:boolean isSupportFragmentClass(android.content.Context,java.lang.String):0:0 -> a
    5:5:void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle):0:0 -> a
    5:5:void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle):0 -> a
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    6:6:android.view.LayoutInflater getLayoutInflater(android.os.Bundle):0:0 -> a
    6:6:android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle):0 -> a
    6:6:android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle):0 -> a
    7:7:android.view.LayoutInflater androidx.fragment.app.FragmentActivity$HostCallbacks.onGetLayoutInflater():0:0 -> a
    7:7:android.view.LayoutInflater getLayoutInflater(android.os.Bundle):0 -> a
    7:7:android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle):0 -> a
    7:7:android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle):0 -> a
    8:8:androidx.fragment.app.FragmentManager getChildFragmentManager():0:0 -> a
    8:8:android.view.LayoutInflater getLayoutInflater(android.os.Bundle):0 -> a
    8:8:android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle):0 -> a
    8:8:android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle):0 -> a
    9:9:android.view.LayoutInflater getLayoutInflater(android.os.Bundle):0:0 -> a
    9:9:android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle):0 -> a
    9:9:android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle):0 -> a
    10:10:android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle):0:0 -> a
    11:11:android.view.LayoutInflater getLayoutInflater(android.os.Bundle):0:0 -> a
    11:11:android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle):0 -> a
    11:11:android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle):0 -> a
    void performMultiWindowModeChanged(boolean) -> a
    boolean performPrepareOptionsMenu(android.view.Menu) -> a
    void setAnimatingAway(android.view.View) -> a
    void setAnimator(android.animation.Animator) -> a
    void setIndex(int,androidx.fragment.app.Fragment) -> a
    void setNextAnim(int) -> a
    void setNextTransition(int,int) -> a
    void setOnStartEnterTransitionListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener) -> a
    androidx.lifecycle.ViewModelStore getViewModelStore() -> b
    void performPictureInPictureModeChanged(boolean) -> b
    void restoreChildFragmentState(android.os.Bundle) -> b
    void setStateAfterAnimating(int) -> b
    void callStartTransitionListener() -> c
    1:1:boolean isStateSaved():0:0 -> c
    1:1:void setArguments(android.os.Bundle):0 -> c
    2:2:void setArguments(android.os.Bundle):0:0 -> c
    void setHideReplaced(boolean) -> c
    android.view.View getAnimatingAway() -> d
    android.animation.Animator getAnimator() -> e
    android.content.Context getContext() -> f
    java.lang.Object getEnterTransition() -> g
    androidx.core.app.SharedElementCallback getEnterTransitionCallback() -> h
    java.lang.Object getExitTransition() -> i
    int getNextAnim() -> j
    int getNextTransition() -> k
    int getNextTransitionStyle() -> l
    java.lang.Object getSharedElementEnterTransition() -> m
    int getStateAfterAnimating() -> n
    1:1:void androidx.fragment.app.FragmentManagerImpl.attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment):0:0 -> o
    1:1:void instantiateChildFragmentManager():0 -> o
    2:2:void instantiateChildFragmentManager():0:0 -> o
    1:1:androidx.fragment.app.FragmentActivity getActivity():0:0 -> onCreateContextMenu
    1:1:void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo):0 -> onCreateContextMenu
    2:2:void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo):0:0 -> onCreateContextMenu
    boolean isHideReplaced() -> p
    boolean isInBackStack() -> q
    void onDestroyOptionsMenu() -> r
    androidx.fragment.app.FragmentManager peekChildFragmentManager() -> s
    1:1:void onLowMemory():0:0 -> t
    1:1:void performLowMemory():0 -> t
    2:2:void performLowMemory():0:0 -> t
    void startPostponedEnterTransition() -> u
    androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo() -> v
androidx.fragment.app.Fragment$1 -> b.i.a.e:
    androidx.fragment.app.Fragment this$0 -> b
androidx.fragment.app.Fragment$2 -> b.i.a.f:
    androidx.fragment.app.Fragment this$0 -> a
    androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
androidx.fragment.app.Fragment$3 -> b.i.a.g:
    androidx.fragment.app.Fragment this$0 -> b
    androidx.lifecycle.Lifecycle getLifecycle() -> a
androidx.fragment.app.Fragment$AnimationInfo -> b.i.a.h:
    java.lang.Object mReenterTransition -> j
    java.lang.Object mSharedElementEnterTransition -> k
    java.lang.Object mReturnTransition -> h
    java.lang.Object mExitTransition -> i
    androidx.core.app.SharedElementCallback mEnterTransitionCallback -> o
    java.lang.Object mEnterTransition -> g
    androidx.core.app.SharedElementCallback mExitTransitionCallback -> p
    int mNextTransitionStyle -> f
    int mNextAnim -> d
    java.lang.Boolean mAllowReturnTransitionOverlap -> m
    int mNextTransition -> e
    java.lang.Boolean mAllowEnterTransitionOverlap -> n
    boolean mEnterTransitionPostponed -> q
    int mStateAfterAnimating -> c
    java.lang.Object mSharedElementReturnTransition -> l
    boolean mIsHideReplaced -> s
    androidx.fragment.app.Fragment$OnStartEnterTransitionListener mStartEnterTransitionListener -> r
    android.animation.Animator mAnimator -> b
    android.view.View mAnimatingAway -> a
androidx.fragment.app.Fragment$InstantiationException -> b.i.a.i:
androidx.fragment.app.FragmentActivity -> b.i.a.n:
    android.os.Handler mHandler -> c
    boolean mStartedIntentSenderFromFragment -> i
    androidx.fragment.app.FragmentController mFragments -> d
    boolean mStartedActivityFromFragment -> j
    int mNextCandidateRequestIndex -> k
    androidx.lifecycle.ViewModelStore mViewModelStore -> e
    boolean mCreated -> f
    boolean mResumed -> g
    boolean mStopped -> h
    androidx.collection.SparseArrayCompat mPendingFragmentActivityResults -> l
    void checkForValidRequestCode(int) -> a
    android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    androidx.lifecycle.Lifecycle getLifecycle() -> a
    1:1:androidx.lifecycle.Lifecycle androidx.fragment.app.Fragment.getLifecycle():0:0 -> a
    1:1:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0 -> a
    2:2:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0:0 -> a
    3:3:boolean androidx.lifecycle.Lifecycle$State.isAtLeast(androidx.lifecycle.Lifecycle$State):0:0 -> a
    3:3:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0 -> a
    4:4:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0:0 -> a
    5:5:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.peekChildFragmentManager():0:0 -> a
    5:5:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0 -> a
    6:6:boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State):0:0 -> a
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    androidx.lifecycle.ViewModelStore getViewModelStore() -> b
    androidx.fragment.app.FragmentManager getSupportFragmentManager() -> d
    void onAttachFragment(androidx.fragment.app.Fragment) -> e
    void onResumeFragments() -> f
    java.lang.Object onRetainCustomNonConfigurationInstance() -> g
    void supportInvalidateOptionsMenu() -> h
    1:1:void androidx.collection.SparseArrayCompat.<init>():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    1:1:void markFragmentsCreated():0:0 -> onSaveInstanceState
    1:1:void onSaveInstanceState(android.os.Bundle):0 -> onSaveInstanceState
    2:2:void onSaveInstanceState(android.os.Bundle):0:0 -> onSaveInstanceState
    1:1:void markFragmentsCreated():0:0 -> onStop
    1:1:void onStop():0 -> onStop
    2:2:void onStop():0:0 -> onStop
androidx.fragment.app.FragmentActivity$1 -> b.i.a.k:
    androidx.fragment.app.FragmentActivity this$0 -> a
androidx.fragment.app.FragmentActivity$HostCallbacks -> b.i.a.l:
    androidx.fragment.app.FragmentActivity this$0 -> e
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
androidx.fragment.app.FragmentActivity$NonConfigurationInstances -> b.i.a.m:
    androidx.lifecycle.ViewModelStore viewModelStore -> a
    androidx.fragment.app.FragmentManagerNonConfig fragments -> b
androidx.fragment.app.FragmentContainer -> b.i.a.o:
    androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    android.view.View onFindViewById(int) -> a
    boolean onHasView() -> a
androidx.fragment.app.FragmentController -> b.i.a.p:
    androidx.fragment.app.FragmentHostCallback mHost -> a
    1:1:void androidx.fragment.app.FragmentManagerImpl.attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment):0:0 -> a
    1:1:void attachHost(androidx.fragment.app.Fragment):0 -> a
    androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback) -> a
    void dispatchActivityCreated() -> a
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> a
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void dispatchMultiWindowModeChanged(boolean) -> a
    void dispatchOptionsMenuClosed(android.view.Menu) -> a
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String) -> a
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet) -> a
    void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig) -> a
    void dispatchCreate() -> b
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> b
    void dispatchPictureInPictureModeChanged(boolean) -> b
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> b
    void dispatchDestroy() -> c
    void dispatchLowMemory() -> d
    void dispatchPause() -> e
    void dispatchResume() -> f
    void dispatchStart() -> g
    void dispatchStop() -> h
    boolean execPendingActions() -> i
    1:1:androidx.fragment.app.FragmentManagerImpl androidx.fragment.app.FragmentHostCallback.getFragmentManagerImpl():0:0 -> j
    1:1:androidx.fragment.app.FragmentManager getSupportFragmentManager():0 -> j
    void noteStateNotSaved() -> k
    androidx.fragment.app.FragmentManagerNonConfig retainNestedNonConfig() -> l
    android.os.Parcelable saveAllState() -> m
androidx.fragment.app.FragmentHostCallback -> b.i.a.q:
    android.content.Context mContext -> b
    android.os.Handler mHandler -> c
    androidx.fragment.app.FragmentManagerImpl mFragmentManager -> d
    android.app.Activity mActivity -> a
    1:1:void <init>(android.app.Activity,android.content.Context,android.os.Handler,int):0:0 -> <init>
    1:1:void <init>(androidx.fragment.app.FragmentActivity):0 -> <init>
    android.app.Activity getActivity() -> b
    android.content.Context getContext() -> c
    android.os.Handler getHandler() -> d
androidx.fragment.app.FragmentManager -> b.i.a.u:
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    java.util.List getFragments() -> a
    boolean isStateSaved() -> b
    boolean popBackStackImmediate() -> c
androidx.fragment.app.FragmentManager$BackStackEntry -> b.i.a.r:
androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks -> b.i.a.s:
androidx.fragment.app.FragmentManager$OnBackStackChangedListener -> b.i.a.t:
    void onBackStackChanged() -> a
androidx.fragment.app.FragmentManagerImpl -> b.i.a.K:
    java.util.ArrayList mTmpAddedFragments -> z
    java.util.ArrayList mTmpRecords -> x
    java.util.ArrayList mBackStack -> g
    boolean mDestroyed -> u
    android.view.animation.Interpolator DECELERATE_QUINT -> G
    int mNextFragmentIndex -> d
    java.util.ArrayList mAdded -> e
    boolean mHavePendingDeferredStart -> w
    androidx.fragment.app.Fragment mPrimaryNav -> q
    boolean mStateSaved -> s
    java.lang.String mNoTransactionsBecause -> v
    java.util.ArrayList mBackStackChangeListeners -> k
    androidx.fragment.app.FragmentHostCallback mHost -> n
    java.util.ArrayList mBackStackIndices -> i
    android.util.SparseArray mActive -> f
    android.os.Bundle mStateBundle -> A
    int mCurState -> m
    java.util.ArrayList mTmpIsPop -> y
    androidx.fragment.app.Fragment mParent -> p
    java.util.concurrent.CopyOnWriteArrayList mLifecycleCallbacks -> l
    java.util.ArrayList mPostponedTransactions -> C
    android.view.animation.Interpolator DECELERATE_CUBIC -> H
    java.util.ArrayList mPendingActions -> b
    boolean mNeedMenuInvalidate -> r
    boolean mStopped -> t
    androidx.fragment.app.FragmentManagerNonConfig mSavedNonConfig -> D
    androidx.fragment.app.FragmentContainer mContainer -> o
    java.lang.Runnable mExecCommit -> E
    java.util.ArrayList mAvailBackStackIndices -> j
    java.lang.reflect.Field sAnimationListenerField -> F
    java.util.ArrayList mCreatedMenus -> h
    android.util.SparseArray mStateArray -> B
    boolean mExecutingActions -> c
    void addAddedFragments(androidx.collection.ArraySet) -> a
    1:1:void moveToState(androidx.fragment.app.Fragment):0:0 -> a
    1:1:void addFragment(androidx.fragment.app.Fragment,boolean):0 -> a
    2:2:void addFragment(androidx.fragment.app.Fragment,boolean):0:0 -> a
    void attachFragment(androidx.fragment.app.Fragment) -> a
    void completeExecute(androidx.fragment.app.BackStackRecord,boolean,boolean,boolean) -> a
    3:3:void androidx.fragment.app.Fragment.onConfigurationChanged(android.content.res.Configuration):0:0 -> a
    3:3:void androidx.fragment.app.Fragment.performConfigurationChanged(android.content.res.Configuration):0 -> a
    3:3:void dispatchConfigurationChanged(android.content.res.Configuration):0 -> a
    4:4:void androidx.fragment.app.Fragment.performConfigurationChanged(android.content.res.Configuration):0:0 -> a
    4:4:void dispatchConfigurationChanged(android.content.res.Configuration):0 -> a
    5:5:boolean androidx.fragment.app.Fragment.performContextItemSelected(android.view.MenuItem):0:0 -> a
    5:5:boolean dispatchContextItemSelected(android.view.MenuItem):0 -> a
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void dispatchMultiWindowModeChanged(boolean) -> a
    6:6:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> a
    6:6:void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0 -> a
    7:7:void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0:0 -> a
    8:8:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> a
    8:8:void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,android.content.Context,boolean):0 -> a
    9:9:void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,android.content.Context,boolean):0:0 -> a
    10:10:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> a
    10:10:void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean):0 -> a
    11:11:void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean):0:0 -> a
    12:12:void androidx.fragment.app.Fragment.performOptionsMenuClosed(android.view.Menu):0:0 -> a
    12:12:void dispatchOptionsMenuClosed(android.view.Menu):0 -> a
    13:13:void androidx.fragment.app.Fragment.dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> a
    13:13:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0 -> a
    14:14:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> a
    15:15:void androidx.fragment.app.BackStackRecord.dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> a
    15:15:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0 -> a
    16:16:void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> a
    17:17:androidx.fragment.app.Fragment getPrimaryNavigationFragment():0:0 -> a
    17:17:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    18:18:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> a
    19:19:androidx.fragment.app.Fragment androidx.fragment.app.BackStackRecord.expandOps(java.util.ArrayList,androidx.fragment.app.Fragment):0:0 -> a
    19:19:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    20:20:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> a
    21:21:androidx.fragment.app.Fragment androidx.fragment.app.BackStackRecord.trackAddedFragmentsInPop(java.util.ArrayList,androidx.fragment.app.Fragment):0:0 -> a
    21:21:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    22:22:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> a
    23:23:void executeOps(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> a
    23:23:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    24:24:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> a
    25:25:int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet):0:0 -> a
    25:25:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    26:26:void makeRemovedFragmentsInvisible(androidx.collection.ArraySet):0:0 -> a
    26:26:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    27:27:android.view.View androidx.fragment.app.Fragment.getView():0:0 -> a
    27:27:void makeRemovedFragmentsInvisible(androidx.collection.ArraySet):0 -> a
    27:27:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    28:28:void makeRemovedFragmentsInvisible(androidx.collection.ArraySet):0:0 -> a
    28:28:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    29:29:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> a
    30:30:void androidx.fragment.app.BackStackRecord.runOnCommitRunnables():0:0 -> a
    30:30:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    31:31:void reportBackStackChanged():0:0 -> a
    31:31:void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int):0 -> a
    32:32:void androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener.cancelTransaction():0:0 -> a
    32:32:void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList):0 -> a
    33:33:void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList):0:0 -> a
    androidx.fragment.app.Fragment findFragmentById(int) -> a
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String) -> a
    android.view.animation.Animation$AnimationListener getAnimationListener(android.view.animation.Animation) -> a
    java.util.List getFragments() -> a
    34:34:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float):0:0 -> a
    34:34:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0 -> a
    35:35:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0:0 -> a
    36:36:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(android.content.Context,float,float):0:0 -> a
    36:36:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0 -> a
    37:37:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0:0 -> a
    38:38:boolean androidx.fragment.app.FragmentActivity$HostCallbacks.onHasWindowAnimations():0:0 -> a
    38:38:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0 -> a
    39:39:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0:0 -> a
    40:40:int androidx.fragment.app.FragmentActivity$HostCallbacks.onGetWindowAnimations():0:0 -> a
    40:40:androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int):0 -> a
    androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    boolean modifiesAlpha(android.animation.Animator) -> a
    41:41:void androidx.fragment.app.FragmentActivity$HostCallbacks.onSupportInvalidateOptionsMenu():0:0 -> a
    41:41:void moveToState(int,boolean):0 -> a
    42:42:void moveToState(int,boolean):0:0 -> a
    43:43:androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String):0:0 -> a
    43:43:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    44:44:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    45:45:androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String):0:0 -> a
    45:45:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    46:46:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    47:47:androidx.fragment.app.FragmentManagerImpl androidx.fragment.app.FragmentHostCallback.getFragmentManagerImpl():0:0 -> a
    47:47:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    48:48:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    49:49:void androidx.fragment.app.Fragment.onAttach(android.content.Context):0:0 -> a
    49:49:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    50:50:void androidx.fragment.app.Fragment.onAttach(android.app.Activity):0:0 -> a
    50:50:void androidx.fragment.app.Fragment.onAttach(android.content.Context):0 -> a
    50:50:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    51:51:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    52:52:void androidx.fragment.app.FragmentActivity$HostCallbacks.onAttachFragment(androidx.fragment.app.Fragment):0:0 -> a
    52:52:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    53:53:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    54:54:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0:0 -> a
    54:54:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    55:55:void androidx.fragment.app.Fragment.onCreate(android.os.Bundle):0:0 -> a
    55:55:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0 -> a
    55:55:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    56:56:boolean isStateAtLeast(int):0:0 -> a
    56:56:void androidx.fragment.app.Fragment.onCreate(android.os.Bundle):0 -> a
    56:56:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0 -> a
    56:56:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    57:57:void androidx.fragment.app.Fragment.onCreate(android.os.Bundle):0:0 -> a
    57:57:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0 -> a
    57:57:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    58:58:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0:0 -> a
    58:58:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    59:59:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    60:60:void androidx.fragment.app.Fragment.performCreate(android.os.Bundle):0:0 -> a
    60:60:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    61:61:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    62:62:void ensureInflatedFragmentView(androidx.fragment.app.Fragment):0:0 -> a
    62:62:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    63:63:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    64:64:android.content.Context androidx.fragment.app.Fragment.requireContext():0:0 -> a
    64:64:android.content.res.Resources androidx.fragment.app.Fragment.getResources():0 -> a
    64:64:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    65:65:android.content.res.Resources androidx.fragment.app.Fragment.getResources():0:0 -> a
    65:65:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    66:66:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    67:67:android.content.Context androidx.fragment.app.Fragment.requireContext():0:0 -> a
    67:67:android.content.res.Resources androidx.fragment.app.Fragment.getResources():0 -> a
    67:67:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    68:68:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    69:69:void androidx.fragment.app.Fragment.performActivityCreated(android.os.Bundle):0:0 -> a
    69:69:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    70:70:void androidx.fragment.app.Fragment.onActivityCreated(android.os.Bundle):0:0 -> a
    70:70:void androidx.fragment.app.Fragment.performActivityCreated(android.os.Bundle):0 -> a
    70:70:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    71:71:void androidx.fragment.app.Fragment.performActivityCreated(android.os.Bundle):0:0 -> a
    71:71:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    72:72:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    73:73:void androidx.fragment.app.Fragment.restoreViewState(android.os.Bundle):0:0 -> a
    73:73:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    74:74:void androidx.fragment.app.Fragment.onViewStateRestored(android.os.Bundle):0:0 -> a
    74:74:void androidx.fragment.app.Fragment.restoreViewState(android.os.Bundle):0 -> a
    74:74:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    75:75:void androidx.fragment.app.Fragment.restoreViewState(android.os.Bundle):0:0 -> a
    75:75:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    76:76:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    77:77:void androidx.fragment.app.Fragment.performActivityCreated(android.os.Bundle):0:0 -> a
    77:77:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    78:78:void androidx.fragment.app.Fragment.performStart():0:0 -> a
    78:78:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    79:79:void androidx.fragment.app.Fragment.onStart():0:0 -> a
    79:79:void androidx.fragment.app.Fragment.performStart():0 -> a
    79:79:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    80:80:void androidx.fragment.app.Fragment.performStart():0:0 -> a
    80:80:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    81:81:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    82:82:void androidx.fragment.app.Fragment.performStart():0:0 -> a
    82:82:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    83:83:void androidx.fragment.app.Fragment.performResume():0:0 -> a
    83:83:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    84:84:void androidx.fragment.app.Fragment.onResume():0:0 -> a
    84:84:void androidx.fragment.app.Fragment.performResume():0 -> a
    84:84:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    85:85:void androidx.fragment.app.Fragment.performResume():0:0 -> a
    85:85:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    86:86:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    87:87:void androidx.fragment.app.Fragment.performResume():0:0 -> a
    87:87:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    88:88:void androidx.fragment.app.Fragment.performPause():0:0 -> a
    88:88:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    89:89:void dispatchPause():0:0 -> a
    89:89:void androidx.fragment.app.Fragment.performPause():0 -> a
    89:89:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    90:90:void androidx.fragment.app.Fragment.performPause():0:0 -> a
    90:90:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    91:91:void androidx.fragment.app.Fragment.onPause():0:0 -> a
    91:91:void androidx.fragment.app.Fragment.performPause():0 -> a
    91:91:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    92:92:void androidx.fragment.app.Fragment.performPause():0:0 -> a
    92:92:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    93:93:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    94:94:void androidx.fragment.app.Fragment.performPause():0:0 -> a
    94:94:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    95:95:void androidx.fragment.app.Fragment.performStop():0:0 -> a
    95:95:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    96:96:void androidx.fragment.app.Fragment.onStop():0:0 -> a
    96:96:void androidx.fragment.app.Fragment.performStop():0 -> a
    96:96:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    97:97:void androidx.fragment.app.Fragment.performStop():0:0 -> a
    97:97:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    98:98:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    99:99:void androidx.fragment.app.Fragment.performStop():0:0 -> a
    99:99:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    100:100:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    101:101:boolean androidx.fragment.app.FragmentActivity$HostCallbacks.onShouldSaveFragmentState(androidx.fragment.app.Fragment):0:0 -> a
    101:101:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    102:102:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    103:103:void androidx.fragment.app.Fragment.performDestroyView():0:0 -> a
    103:103:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    104:104:void dispatchDestroyView():0:0 -> a
    104:104:void androidx.fragment.app.Fragment.performDestroyView():0 -> a
    104:104:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    105:105:void androidx.fragment.app.Fragment.performDestroyView():0:0 -> a
    105:105:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    106:106:void androidx.fragment.app.Fragment.onDestroyView():0:0 -> a
    106:106:void androidx.fragment.app.Fragment.performDestroyView():0 -> a
    106:106:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    107:107:void androidx.fragment.app.Fragment.performDestroyView():0:0 -> a
    107:107:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    108:108:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    109:109:void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator,int):0:0 -> a
    109:109:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    110:110:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    111:111:void androidx.fragment.app.Fragment.performDestroyView():0:0 -> a
    111:111:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    112:112:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    113:113:void androidx.fragment.app.Fragment.performDestroy():0:0 -> a
    113:113:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    114:114:void androidx.fragment.app.Fragment.onDestroy():0:0 -> a
    114:114:void androidx.fragment.app.Fragment.performDestroy():0 -> a
    114:114:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    115:115:androidx.fragment.app.FragmentActivity androidx.fragment.app.Fragment.getActivity():0:0 -> a
    115:115:void androidx.fragment.app.Fragment.onDestroy():0 -> a
    115:115:void androidx.fragment.app.Fragment.performDestroy():0 -> a
    115:115:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    116:116:void androidx.fragment.app.Fragment.onDestroy():0:0 -> a
    116:116:void androidx.fragment.app.Fragment.performDestroy():0 -> a
    116:116:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    117:117:void androidx.fragment.app.Fragment.performDestroy():0:0 -> a
    117:117:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    118:118:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    119:119:void androidx.fragment.app.Fragment.performDestroy():0:0 -> a
    119:119:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    120:120:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    121:121:void androidx.fragment.app.Fragment.performDetach():0:0 -> a
    121:121:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    122:122:void androidx.fragment.app.Fragment.onDetach():0:0 -> a
    122:122:void androidx.fragment.app.Fragment.performDetach():0 -> a
    122:122:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    123:123:void androidx.fragment.app.Fragment.performDetach():0:0 -> a
    123:123:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    124:124:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    125:125:void makeInactive(androidx.fragment.app.Fragment):0:0 -> a
    125:125:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    126:126:void androidx.fragment.app.Fragment.initState():0:0 -> a
    126:126:void makeInactive(androidx.fragment.app.Fragment):0 -> a
    126:126:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    127:127:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    128:128:void androidx.fragment.app.Fragment.performDetach():0:0 -> a
    128:128:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0 -> a
    129:129:void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean):0:0 -> a
    130:130:androidx.fragment.app.Fragment androidx.fragment.app.FragmentState.instantiate(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerNonConfig,androidx.lifecycle.ViewModelStore):0:0 -> a
    130:130:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0 -> a
    131:131:void restoreAllState(android.os.Parcelable,androidx.fragment.app.FragmentManagerNonConfig):0:0 -> a
    void setBackStackIndex(int,androidx.fragment.app.BackStackRecord) -> a
    132:132:boolean shouldRunOnHWLayer(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0:0 -> a
    132:132:void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0 -> a
    133:133:boolean modifiesAlpha(androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0:0 -> a
    133:133:boolean shouldRunOnHWLayer(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0 -> a
    133:133:void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0 -> a
    134:134:void setHWLayerAnimListenerIfAlpha(android.view.View,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator):0:0 -> a
    void setRetaining(androidx.fragment.app.FragmentManagerNonConfig) -> a
    135:135:void androidx.fragment.app.FragmentActivity$HostCallbacks.onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]):0:0 -> a
    135:135:void throwException(java.lang.RuntimeException):0 -> a
    136:136:void throwException(java.lang.RuntimeException):0:0 -> a
    void detachFragment(androidx.fragment.app.Fragment) -> b
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> b
    1:1:void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0 -> b
    2:2:void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0:0 -> b
    3:3:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> b
    3:3:void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean):0 -> b
    4:4:void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean):0:0 -> b
    5:5:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> b
    5:5:void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,android.content.Context,boolean):0 -> b
    6:6:void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,android.content.Context,boolean):0:0 -> b
    7:7:boolean androidx.fragment.app.Fragment.performOptionsItemSelected(android.view.MenuItem):0:0 -> b
    7:7:boolean dispatchOptionsItemSelected(android.view.MenuItem):0 -> b
    void dispatchPictureInPictureModeChanged(boolean) -> b
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> b
    void freeBackStackIndex(int) -> b
    boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList) -> b
    boolean isStateSaved() -> b
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> c
    1:1:void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean):0 -> c
    2:2:void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean):0:0 -> c
    3:3:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> c
    3:3:void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0 -> c
    4:4:void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0:0 -> c
    void dispatchStateChange(int) -> c
    void ensureExecReady(boolean) -> c
    void hideFragment(androidx.fragment.app.Fragment) -> c
    5:5:boolean popBackStackImmediate(java.lang.String,int,int):0:0 -> c
    5:5:boolean popBackStackImmediate():0 -> c
    6:6:boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int):0:0 -> c
    6:6:boolean popBackStackImmediate(java.lang.String,int,int):0 -> c
    6:6:boolean popBackStackImmediate():0 -> c
    7:7:boolean popBackStackImmediate(java.lang.String,int,int):0:0 -> c
    7:7:boolean popBackStackImmediate():0 -> c
    void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList) -> c
    void dispatchActivityCreated() -> d
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> d
    1:1:void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean):0 -> d
    2:2:void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean):0:0 -> d
    3:3:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> d
    3:3:void dispatchOnFragmentSaveInstanceState(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0 -> d
    4:4:void dispatchOnFragmentSaveInstanceState(androidx.fragment.app.Fragment,android.os.Bundle,boolean):0:0 -> d
    void makeActive(androidx.fragment.app.Fragment) -> d
    int reverseTransit(int) -> d
    void dispatchCreate() -> e
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> e
    1:1:void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean):0 -> e
    2:2:void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean):0:0 -> e
    3:3:androidx.fragment.app.Fragment findFragmentUnder(androidx.fragment.app.Fragment):0:0 -> e
    3:3:void moveFragmentToExpectedState(androidx.fragment.app.Fragment):0 -> e
    4:4:void moveFragmentToExpectedState(androidx.fragment.app.Fragment):0:0 -> e
    5:5:void completeShowHideFragment(androidx.fragment.app.Fragment):0:0 -> e
    5:5:void moveFragmentToExpectedState(androidx.fragment.app.Fragment):0 -> e
    void dispatchDestroy() -> f
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> f
    1:1:void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean):0 -> f
    2:2:void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean):0:0 -> f
    void removeFragment(androidx.fragment.app.Fragment) -> f
    void dispatchLowMemory() -> g
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> g
    1:1:void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean):0 -> g
    2:2:void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean):0:0 -> g
    void saveFragmentViewState(androidx.fragment.app.Fragment) -> g
    1:1:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> h
    1:1:void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean):0 -> h
    2:2:void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean):0:0 -> h
    void dispatchPause() -> h
    3:3:androidx.fragment.app.FragmentManager androidx.fragment.app.Fragment.getFragmentManager():0:0 -> h
    3:3:void setPrimaryNavigationFragment(androidx.fragment.app.Fragment):0 -> h
    4:4:void setPrimaryNavigationFragment(androidx.fragment.app.Fragment):0:0 -> h
    void dispatchResume() -> i
    void showFragment(androidx.fragment.app.Fragment) -> i
    void dispatchStart() -> j
    void dispatchStop() -> k
    void doPendingDeferredStart() -> l
    1:1:void doPendingDeferredStart():0:0 -> m
    1:1:boolean execPendingActions():0 -> m
    2:2:boolean execPendingActions():0:0 -> m
    android.view.LayoutInflater$Factory2 getLayoutInflaterFactory() -> n
    1:1:void androidx.fragment.app.Fragment.noteStateNotSaved():0:0 -> o
    1:1:void noteStateNotSaved():0 -> o
    1:1:androidx.fragment.app.Fragment findFragmentByTag(java.lang.String):0:0 -> onCreateView
    1:1:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    2:2:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    3:3:void moveToState(androidx.fragment.app.Fragment):0:0 -> onCreateView
    3:3:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0 -> onCreateView
    4:4:android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet):0:0 -> onCreateView
    androidx.fragment.app.FragmentManagerNonConfig retainNonConfig() -> p
    1:1:void forcePostponedTransactions():0:0 -> q
    1:1:android.os.Parcelable saveAllState():0 -> q
    2:2:void endAnimatingAwayFragments():0:0 -> q
    2:2:android.os.Parcelable saveAllState():0 -> q
    3:3:android.os.Parcelable saveAllState():0:0 -> q
    4:4:android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment):0:0 -> q
    4:4:android.os.Parcelable saveAllState():0 -> q
    5:5:void androidx.fragment.app.Fragment.performSaveInstanceState(android.os.Bundle):0:0 -> q
    5:5:android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment):0 -> q
    5:5:android.os.Parcelable saveAllState():0 -> q
    6:6:android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment):0:0 -> q
    6:6:android.os.Parcelable saveAllState():0 -> q
    7:7:android.os.Parcelable saveAllState():0:0 -> q
    8:8:void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment):0:0 -> q
    8:8:android.os.Parcelable saveAllState():0 -> q
    9:9:android.os.Parcelable saveAllState():0:0 -> q
    10:10:void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment):0:0 -> q
    10:10:android.os.Parcelable saveAllState():0 -> q
    11:11:android.os.Parcelable saveAllState():0:0 -> q
    void saveNonConfig() -> r
    void scheduleCommit() -> s
    1:1:void performPendingDeferredStart(androidx.fragment.app.Fragment):0:0 -> t
    1:1:void startPendingDeferredFragments():0 -> t
    void burpActive() -> u
    void checkStateLoss() -> v
    void cleanupExec() -> w
androidx.fragment.app.FragmentManagerImpl$1 -> b.i.a.v:
    androidx.fragment.app.FragmentManagerImpl this$0 -> b
androidx.fragment.app.FragmentManagerImpl$2 -> b.i.a.x:
    android.view.ViewGroup val$container -> b
    androidx.fragment.app.FragmentManagerImpl this$0 -> d
    androidx.fragment.app.Fragment val$fragment -> c
androidx.fragment.app.FragmentManagerImpl$2$1 -> b.i.a.w:
    androidx.fragment.app.FragmentManagerImpl$2 this$1 -> b
androidx.fragment.app.FragmentManagerImpl$3 -> b.i.a.y:
    android.view.ViewGroup val$container -> a
    androidx.fragment.app.FragmentManagerImpl this$0 -> d
    android.view.View val$viewToAnimate -> b
    androidx.fragment.app.Fragment val$fragment -> c
androidx.fragment.app.FragmentManagerImpl$4 -> b.i.a.z:
    android.view.ViewGroup val$container -> a
    android.view.View val$animatingView -> b
    androidx.fragment.app.Fragment val$fragment -> c
androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener -> b.i.a.B:
    android.view.View mView -> b
androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener$1 -> b.i.a.A:
    androidx.fragment.app.FragmentManagerImpl$AnimateOnHWLayerIfNeededListener this$0 -> b
androidx.fragment.app.FragmentManagerImpl$AnimationListenerWrapper -> b.i.a.C:
    android.view.animation.Animation$AnimationListener mWrapped -> a
androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator -> b.i.a.D:
    android.view.animation.Animation animation -> a
    android.animation.Animator animator -> b
androidx.fragment.app.FragmentManagerImpl$AnimatorOnHWLayerIfNeededListener -> b.i.a.E:
    android.view.View mView -> a
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimator -> b.i.a.F:
    android.view.ViewGroup mParent -> b
    boolean mTransitionEnded -> e
    boolean mAnimating -> f
    android.view.View mChild -> c
    boolean mEnded -> d
androidx.fragment.app.FragmentManagerImpl$FragmentLifecycleCallbacksHolder -> b.i.a.G:
    boolean mRecursive -> b
    androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks mCallback -> a
androidx.fragment.app.FragmentManagerImpl$FragmentTag -> b.i.a.H:
    int[] Fragment -> a
androidx.fragment.app.FragmentManagerImpl$OpGenerator -> b.i.a.I:
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener -> b.i.a.J:
    boolean mIsBack -> a
    int mNumPostponed -> c
    androidx.fragment.app.BackStackRecord mRecord -> b
    1:1:boolean androidx.fragment.app.Fragment.isPostponed():0:0 -> a
    1:1:void completeTransaction():0 -> a
    2:2:void completeTransaction():0:0 -> a
    boolean isReady() -> b
    void onStartEnterTransition() -> c
    void startListening() -> d
androidx.fragment.app.FragmentManagerNonConfig -> b.i.a.L:
    java.util.List mChildNonConfigs -> b
    java.util.List mFragments -> a
    java.util.List mViewModelStores -> c
    java.util.List getChildNonConfigs() -> a
    java.util.List getFragments() -> b
    java.util.List getViewModelStores() -> c
androidx.fragment.app.FragmentManagerState -> b.i.a.N:
    androidx.fragment.app.FragmentState[] mActive -> b
    int[] mAdded -> c
    int mNextFragmentIndex -> f
    int mPrimaryNavActiveIndex -> e
    androidx.fragment.app.BackStackState[] mBackStack -> d
androidx.fragment.app.FragmentManagerState$1 -> b.i.a.M:
    1:1:androidx.fragment.app.FragmentManagerState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.fragment.app.FragmentManagerState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.FragmentState -> b.i.a.P:
    java.lang.String mTag -> g
    boolean mDetached -> i
    boolean mHidden -> k
    androidx.fragment.app.Fragment mInstance -> m
    int mContainerId -> f
    int mFragmentId -> e
    int mIndex -> c
    android.os.Bundle mArguments -> j
    android.os.Bundle mSavedFragmentState -> l
    android.os.Parcelable$Creator CREATOR -> n
    boolean mRetainInstance -> h
    java.lang.String mClassName -> b
    boolean mFromLayout -> d
androidx.fragment.app.FragmentState$1 -> b.i.a.O:
    1:1:androidx.fragment.app.FragmentState createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.fragment.app.FragmentState[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.fragment.app.FragmentTransaction -> b.i.a.Q:
androidx.fragment.app.FragmentTransition -> b.i.a.X:
    androidx.fragment.app.FragmentTransitionImpl PLATFORM_IMPL -> b
    androidx.fragment.app.FragmentTransitionImpl SUPPORT_IMPL -> c
    int[] INVERSE_OPS -> a
    1:1:androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl():0:0 -> <clinit>
    1:1:void <clinit>():0 -> <clinit>
    2:2:void <clinit>():0:0 -> <clinit>
    void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection) -> a
    1:1:androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int):0:0 -> a
    1:1:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0 -> a
    2:2:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0:0 -> a
    3:3:androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int):0:0 -> a
    3:3:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0 -> a
    4:4:void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.BackStackRecord$Op,android.util.SparseArray,boolean,boolean):0:0 -> a
    void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean) -> a
    boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List) -> a
    5:5:android.view.View androidx.fragment.app.Fragment.getView():0:0 -> a
    5:5:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> a
    6:6:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> a
    7:7:androidx.core.app.SharedElementCallback androidx.fragment.app.Fragment.getExitTransitionCallback():0:0 -> a
    7:7:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> a
    8:8:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> a
    9:9:void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap):0:0 -> a
    9:9:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> a
    10:10:androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> a
    11:11:java.lang.Object androidx.fragment.app.Fragment.getReturnTransition():0:0 -> a
    11:11:androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment):0 -> a
    12:12:androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment):0:0 -> a
    13:13:java.lang.Object androidx.fragment.app.Fragment.getSharedElementReturnTransition():0:0 -> a
    13:13:androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment):0 -> a
    14:14:androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment):0:0 -> a
    15:15:java.lang.Object androidx.fragment.app.Fragment.getReenterTransition():0:0 -> a
    15:15:androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment):0 -> a
    16:16:androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment):0:0 -> a
    17:17:android.view.View androidx.fragment.app.Fragment.getView():0:0 -> a
    17:17:java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View):0 -> a
    18:18:java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View):0:0 -> a
    19:19:java.lang.Object androidx.fragment.app.Fragment.getReenterTransition():0:0 -> a
    19:19:java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean):0 -> a
    20:20:java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean):0:0 -> a
    android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean) -> a
    21:21:java.lang.Object androidx.fragment.app.Fragment.getSharedElementReturnTransition():0:0 -> a
    21:21:java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean):0 -> a
    22:22:java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean):0:0 -> a
    23:23:java.lang.Object androidx.fragment.app.FragmentTransitionCompat21.wrapTransitionInSet(java.lang.Object):0:0 -> a
    23:23:java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean):0 -> a
    24:24:boolean androidx.fragment.app.Fragment.getAllowReturnTransitionOverlap():0:0 -> a
    24:24:java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean):0 -> a
    25:25:boolean androidx.fragment.app.Fragment.getAllowEnterTransitionOverlap():0:0 -> a
    25:25:java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean):0 -> a
    26:26:java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean):0:0 -> a
    27:27:void androidx.fragment.app.FragmentTransitionCompat21.setEpicenter(java.lang.Object,android.view.View):0:0 -> a
    27:27:void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord):0 -> a
    void setViewVisibility(java.util.ArrayList,int) -> a
    28:28:void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean):0:0 -> a
    28:28:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    29:29:void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean):0:0 -> a
    29:29:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    30:30:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0:0 -> a
    31:31:androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int):0:0 -> a
    31:31:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    32:32:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0:0 -> a
    33:33:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    33:33:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    34:34:java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object):0:0 -> a
    34:34:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    34:34:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    35:35:android.view.View androidx.fragment.app.Fragment.getView():0:0 -> a
    35:35:java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object):0 -> a
    35:35:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    35:35:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    36:36:java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object):0:0 -> a
    36:36:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    36:36:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    37:37:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    37:37:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    38:38:void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList):0:0 -> a
    38:38:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    38:38:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    39:39:android.view.View androidx.fragment.app.Fragment.getView():0:0 -> a
    39:39:void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList):0 -> a
    39:39:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    39:39:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    40:40:void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList):0:0 -> a
    40:40:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    40:40:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    41:41:java.util.ArrayList androidx.fragment.app.FragmentTransitionImpl.prepareSetNameOverridesReordered(java.util.ArrayList):0:0 -> a
    41:41:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    41:41:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    42:42:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    42:42:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    43:43:void androidx.fragment.app.FragmentTransitionImpl.setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map):0:0 -> a
    43:43:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    43:43:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    44:44:void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    44:44:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    45:45:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    45:45:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    46:46:java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object):0:0 -> a
    46:46:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    46:46:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    47:47:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    47:47:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    48:48:void androidx.fragment.app.FragmentTransitionCompat21.addTarget(java.lang.Object,android.view.View):0:0 -> a
    48:48:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    48:48:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    49:49:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    49:49:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    50:50:void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList):0:0 -> a
    50:50:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    50:50:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    51:51:void androidx.fragment.app.FragmentTransitionImpl.setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map):0:0 -> a
    51:51:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    51:51:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    52:52:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0:0 -> a
    52:52:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    53:53:void androidx.fragment.app.FragmentTransitionImpl.scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map):0:0 -> a
    53:53:void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap):0 -> a
    53:53:void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean):0 -> a
    1:1:android.view.View androidx.fragment.app.Fragment.getView():0:0 -> b
    1:1:androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> b
    2:2:androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> b
    3:3:androidx.core.app.SharedElementCallback androidx.fragment.app.Fragment.getExitTransitionCallback():0:0 -> b
    3:3:androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0 -> b
    4:4:androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition):0:0 -> b
    5:5:java.lang.Object androidx.fragment.app.Fragment.getReturnTransition():0:0 -> b
    5:5:java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean):0 -> b
    6:6:java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean):0:0 -> b
androidx.fragment.app.FragmentTransition$1 -> b.i.a.S:
    java.util.ArrayList val$exitingViews -> b
androidx.fragment.app.FragmentTransition$2 -> b.i.a.T:
    java.lang.Object val$exitTransition -> i
    androidx.fragment.app.FragmentTransitionImpl val$impl -> c
    java.util.ArrayList val$exitingViews -> h
    java.lang.Object val$enterTransition -> b
    java.util.ArrayList val$enteringViews -> g
    java.util.ArrayList val$sharedElementsIn -> f
    android.view.View val$nonExistentView -> d
    androidx.fragment.app.Fragment val$inFragment -> e
androidx.fragment.app.FragmentTransition$3 -> b.i.a.U:
    androidx.collection.ArrayMap val$inSharedElements -> e
    androidx.fragment.app.FragmentTransitionImpl val$impl -> g
    android.graphics.Rect val$epicenter -> h
    androidx.fragment.app.Fragment val$inFragment -> b
    androidx.fragment.app.Fragment val$outFragment -> c
    boolean val$inIsPop -> d
    android.view.View val$epicenterView -> f
androidx.fragment.app.FragmentTransition$4 -> b.i.a.V:
    androidx.fragment.app.Fragment val$inFragment -> h
    android.graphics.Rect val$inEpicenter -> m
    androidx.fragment.app.Fragment val$outFragment -> i
    androidx.fragment.app.FragmentTransitionImpl val$impl -> b
    java.util.ArrayList val$sharedElementsOut -> k
    boolean val$inIsPop -> j
    java.lang.Object val$finalSharedElementTransition -> d
    java.util.ArrayList val$sharedElementsIn -> f
    androidx.collection.ArrayMap val$nameOverrides -> c
    androidx.fragment.app.FragmentTransition$FragmentContainerTransition val$fragments -> e
    android.view.View val$nonExistentView -> g
    java.lang.Object val$enterTransition -> l
androidx.fragment.app.FragmentTransition$FragmentContainerTransition -> b.i.a.W:
    androidx.fragment.app.BackStackRecord firstOutTransaction -> f
    boolean firstOutIsPop -> e
    androidx.fragment.app.Fragment lastIn -> a
    androidx.fragment.app.Fragment firstOut -> d
    boolean lastInIsPop -> b
    androidx.fragment.app.BackStackRecord lastInTransaction -> c
androidx.fragment.app.FragmentTransitionCompat21 -> b.i.a.c0:
    void addTargets(java.lang.Object,java.util.ArrayList) -> a
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object) -> a
    boolean canHandle(java.lang.Object) -> a
    boolean hasSimpleTarget(android.transition.Transition) -> a
    java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    void removeTarget(java.lang.Object,android.view.View) -> a
    void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> a
    void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList) -> a
    void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList) -> a
    void setEpicenter(java.lang.Object,android.graphics.Rect) -> a
    java.lang.Object cloneTransition(java.lang.Object) -> b
    java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    void setEpicenter(java.lang.Object,android.view.View) -> b
    void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList) -> b
    void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> b
androidx.fragment.app.FragmentTransitionCompat21$1 -> b.i.a.Y:
    android.graphics.Rect val$epicenter -> a
androidx.fragment.app.FragmentTransitionCompat21$2 -> b.i.a.Z:
    android.view.View val$fragmentView -> a
    java.util.ArrayList val$exitingViews -> b
androidx.fragment.app.FragmentTransitionCompat21$3 -> b.i.a.a0:
    java.lang.Object val$sharedElementTransition -> e
    java.lang.Object val$exitTransition -> c
    java.util.ArrayList val$sharedElementsIn -> f
    java.lang.Object val$enterTransition -> a
    java.util.ArrayList val$exitingViews -> d
    java.util.ArrayList val$enteringViews -> b
    androidx.fragment.app.FragmentTransitionCompat21 this$0 -> g
androidx.fragment.app.FragmentTransitionCompat21$4 -> b.i.a.b0:
    android.graphics.Rect val$epicenter -> a
androidx.fragment.app.FragmentTransitionImpl -> b.i.a.g0:
    void addTargets(java.lang.Object,java.util.ArrayList) -> a
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object) -> a
    void bfsAddViewChildren(java.util.List,android.view.View) -> a
    boolean canHandle(java.lang.Object) -> a
    1:1:boolean androidx.core.view.ViewGroupCompat.isTransitionGroup(android.view.ViewGroup):0:0 -> a
    1:1:void captureTransitioningViews(java.util.ArrayList,android.view.View):0 -> a
    2:2:void captureTransitioningViews(java.util.ArrayList,android.view.View):0:0 -> a
    boolean containedBeforeIndex(java.util.List,android.view.View,int) -> a
    void findNamedViews(java.util.Map,android.view.View) -> a
    void getBoundsOnScreen(android.view.View,android.graphics.Rect) -> a
    boolean isNullOrEmpty(java.util.List) -> a
    java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    void removeTarget(java.lang.Object,android.view.View) -> a
    void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> a
    void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList) -> a
    void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList) -> a
    void setEpicenter(java.lang.Object,android.graphics.Rect) -> a
    java.lang.Object cloneTransition(java.lang.Object) -> b
    java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object) -> b
    void setEpicenter(java.lang.Object,android.view.View) -> b
    void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList) -> b
    void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList) -> b
androidx.fragment.app.FragmentTransitionImpl$1 -> b.i.a.d0:
    java.util.ArrayList val$outNames -> f
    java.util.ArrayList val$sharedElementsOut -> e
    java.util.ArrayList val$inNames -> d
    int val$numSharedElements -> b
    java.util.ArrayList val$sharedElementsIn -> c
androidx.fragment.app.FragmentTransitionImpl$2 -> b.i.a.e0:
    java.util.Map val$nameOverrides -> c
    java.util.ArrayList val$sharedElementsIn -> b
    1:1:java.lang.String androidx.fragment.app.FragmentTransitionImpl.findKeyForValue(java.util.Map,java.lang.String):0:0 -> run
    1:1:void run():0 -> run
    2:2:void run():0:0 -> run
androidx.fragment.app.FragmentTransitionImpl$3 -> b.i.a.f0:
    java.util.Map val$nameOverrides -> c
    java.util.ArrayList val$sharedElementsIn -> b
androidx.fragment.app.OneShotPreDrawListener -> b.i.a.h0:
    java.lang.Runnable mRunnable -> d
    android.view.ViewTreeObserver mViewTreeObserver -> c
    android.view.View mView -> b
    androidx.fragment.app.OneShotPreDrawListener add(android.view.View,java.lang.Runnable) -> a
    void removeListener() -> a
androidx.fragment.app.SuperNotCalledException -> b.i.a.i0:
androidx.interpolator.view.animation.FastOutLinearInInterpolator -> b.j.a.a.a:
    float[] VALUES -> c
androidx.interpolator.view.animation.FastOutSlowInInterpolator -> b.j.a.a.b:
    float[] VALUES -> c
androidx.interpolator.view.animation.LinearOutSlowInInterpolator -> b.j.a.a.c:
    float[] VALUES -> c
androidx.interpolator.view.animation.LookupTableInterpolator -> b.j.a.a.d:
    float mStepSize -> b
    float[] mValues -> a
androidx.lifecycle.ClassesInfoCache$CallbackInfo -> androidx.lifecycle.a:
    void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object) -> a
androidx.lifecycle.CompositeGeneratedAdaptersObserver -> androidx.lifecycle.CompositeGeneratedAdaptersObserver:
    androidx.lifecycle.GeneratedAdapter[] mGeneratedAdapters -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.FullLifecycleObserver -> androidx.lifecycle.b:
    void onResume(androidx.lifecycle.LifecycleOwner) -> a
    void onPause(androidx.lifecycle.LifecycleOwner) -> b
    void onDestroy(androidx.lifecycle.LifecycleOwner) -> c
    void onStop(androidx.lifecycle.LifecycleOwner) -> d
    void onCreate(androidx.lifecycle.LifecycleOwner) -> e
    void onStart(androidx.lifecycle.LifecycleOwner) -> f
androidx.lifecycle.FullLifecycleObserverAdapter -> androidx.lifecycle.FullLifecycleObserverAdapter:
    androidx.lifecycle.FullLifecycleObserver mObserver -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.GeneratedAdapter -> androidx.lifecycle.c:
    void callMethods(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,boolean,androidx.lifecycle.MethodCallsLogger) -> a
androidx.lifecycle.GenericLifecycleObserver -> androidx.lifecycle.d:
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.Lifecycle -> androidx.lifecycle.g:
    androidx.lifecycle.Lifecycle$State getCurrentState() -> a
    void removeObserver(androidx.lifecycle.LifecycleObserver) -> a
androidx.lifecycle.Lifecycle$Event -> androidx.lifecycle.e:
androidx.lifecycle.Lifecycle$State -> androidx.lifecycle.f:
    androidx.lifecycle.Lifecycle$State DESTROYED -> b
    androidx.lifecycle.Lifecycle$State[] $VALUES -> g
    androidx.lifecycle.Lifecycle$State RESUMED -> f
    androidx.lifecycle.Lifecycle$State STARTED -> e
    androidx.lifecycle.Lifecycle$State CREATED -> d
    androidx.lifecycle.Lifecycle$State INITIALIZED -> c
androidx.lifecycle.LifecycleObserver -> androidx.lifecycle.h:
androidx.lifecycle.LifecycleOwner -> androidx.lifecycle.i:
    androidx.lifecycle.Lifecycle getLifecycle() -> a
androidx.lifecycle.LifecycleRegistry -> androidx.lifecycle.k:
    androidx.lifecycle.Lifecycle$State mState -> b
    androidx.arch.core.internal.FastSafeIterableMap mObserverMap -> a
    boolean mHandlingEvent -> e
    java.util.ArrayList mParentStates -> g
    java.lang.ref.WeakReference mLifecycleOwner -> c
    boolean mNewEventOccurred -> f
    int mAddingObserverCounter -> d
    androidx.lifecycle.Lifecycle$State getCurrentState() -> a
    void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event) -> a
    void markState(androidx.lifecycle.Lifecycle$State) -> a
    androidx.lifecycle.Lifecycle$State min(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State) -> a
    void removeObserver(androidx.lifecycle.LifecycleObserver) -> a
    androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event) -> b
    void moveToState(androidx.lifecycle.Lifecycle$State) -> b
    void popParentState() -> b
    1:1:boolean isSynced():0:0 -> c
    1:1:void sync():0 -> c
    2:2:void sync():0:0 -> c
    3:3:void backwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> c
    3:3:void sync():0 -> c
    4:4:androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State):0:0 -> c
    4:4:void backwardPass(androidx.lifecycle.LifecycleOwner):0 -> c
    4:4:void sync():0 -> c
    5:5:void backwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> c
    5:5:void sync():0 -> c
    6:6:void pushParentState(androidx.lifecycle.Lifecycle$State):0:0 -> c
    6:6:void backwardPass(androidx.lifecycle.LifecycleOwner):0 -> c
    6:6:void sync():0 -> c
    7:7:void backwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> c
    7:7:void sync():0 -> c
    8:8:androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State):0:0 -> c
    8:8:void backwardPass(androidx.lifecycle.LifecycleOwner):0 -> c
    8:8:void sync():0 -> c
    9:9:void sync():0:0 -> c
    10:10:void forwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> c
    10:10:void sync():0 -> c
    11:11:void pushParentState(androidx.lifecycle.Lifecycle$State):0:0 -> c
    11:11:void forwardPass(androidx.lifecycle.LifecycleOwner):0 -> c
    11:11:void sync():0 -> c
    12:12:void forwardPass(androidx.lifecycle.LifecycleOwner):0:0 -> c
    12:12:void sync():0 -> c
    androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State) -> c
androidx.lifecycle.LifecycleRegistry$ObserverWithState -> androidx.lifecycle.j:
    androidx.lifecycle.Lifecycle$State mState -> a
    androidx.lifecycle.GenericLifecycleObserver mLifecycleObserver -> b
    void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.LifecycleRegistryOwner -> androidx.lifecycle.l:
    androidx.lifecycle.LifecycleRegistry getLifecycle() -> a
androidx.lifecycle.LiveData$1 -> androidx.lifecycle.m:
    androidx.lifecycle.LiveData this$0 -> b
androidx.lifecycle.LiveData$LifecycleBoundObserver -> androidx.lifecycle.LiveData$LifecycleBoundObserver:
    androidx.lifecycle.LiveData this$0 -> f
    androidx.lifecycle.LifecycleOwner mOwner -> e
    void detachObserver() -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
    1:1:boolean androidx.lifecycle.Lifecycle$State.isAtLeast(androidx.lifecycle.Lifecycle$State):0:0 -> b
    1:1:boolean shouldBeActive():0 -> b
androidx.lifecycle.LiveData$ObserverWrapper -> androidx.lifecycle.n:
    androidx.lifecycle.Observer mObserver -> a
    androidx.lifecycle.LiveData this$0 -> d
    boolean mActive -> b
    int mLastVersion -> c
    void activeStateChanged(boolean) -> a
    void detachObserver() -> a
    boolean shouldBeActive() -> b
androidx.lifecycle.MethodCallsLogger -> androidx.lifecycle.o:
androidx.lifecycle.MutableLiveData -> androidx.lifecycle.p:
    java.lang.Object androidx.lifecycle.LiveData.NOT_SET -> i
    java.lang.Object androidx.lifecycle.LiveData.mData -> d
    java.lang.Object androidx.lifecycle.LiveData.mPendingData -> e
    androidx.arch.core.internal.SafeIterableMap androidx.lifecycle.LiveData.mObservers -> b
    int androidx.lifecycle.LiveData.mVersion -> f
    boolean androidx.lifecycle.LiveData.mDispatchingValue -> g
    java.lang.Object androidx.lifecycle.LiveData.mDataLock -> a
    boolean androidx.lifecycle.LiveData.mDispatchInvalidated -> h
    int androidx.lifecycle.LiveData.mActiveCount -> c
    void androidx.lifecycle.LiveData.<clinit>() -> <clinit>
    1:1:void androidx.lifecycle.LiveData.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    void androidx.lifecycle.LiveData.assertMainThread(java.lang.String) -> a
    1:1:void androidx.lifecycle.LiveData.dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper):0:0 -> a
    1:1:void androidx.lifecycle.LiveData.dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper):0 -> a
    void androidx.lifecycle.LiveData.onActive() -> a
    2:2:void androidx.lifecycle.LiveData.removeObserver(androidx.lifecycle.Observer):0:0 -> a
    2:2:void androidx.lifecycle.LiveData.removeObserver(androidx.lifecycle.Observer):0 -> a
    3:3:void androidx.lifecycle.LiveData.setValue(java.lang.Object):0:0 -> a
    3:3:void setValue(java.lang.Object):0 -> a
    void androidx.lifecycle.LiveData.considerNotify(androidx.lifecycle.LiveData$ObserverWrapper) -> b
    void androidx.lifecycle.LiveData.onInactive() -> b
androidx.lifecycle.Observer -> androidx.lifecycle.q:
    void onChanged(java.lang.Object) -> a
androidx.lifecycle.ReflectiveGenericLifecycleObserver -> androidx.lifecycle.ReflectiveGenericLifecycleObserver:
    androidx.lifecycle.ClassesInfoCache$CallbackInfo mInfo -> b
    java.lang.Object mWrapped -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.ReportFragment -> androidx.lifecycle.r:
    void dispatch(androidx.lifecycle.Lifecycle$Event) -> a
    void injectIfNeededIn(android.app.Activity) -> a
androidx.lifecycle.SingleGeneratedAdapterObserver -> androidx.lifecycle.SingleGeneratedAdapterObserver:
    androidx.lifecycle.GeneratedAdapter mGeneratedAdapter -> a
    void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event) -> a
androidx.lifecycle.ViewModel -> androidx.lifecycle.s:
    void onCleared() -> a
androidx.lifecycle.ViewModelProvider -> androidx.lifecycle.u:
    androidx.lifecycle.ViewModelStore mViewModelStore -> b
    androidx.lifecycle.ViewModelProvider$Factory mFactory -> a
    1:1:androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class):0:0 -> a
    1:1:androidx.lifecycle.ViewModel get(java.lang.Class):0 -> a
    2:2:androidx.lifecycle.ViewModel get(java.lang.Class):0:0 -> a
androidx.lifecycle.ViewModelProvider$Factory -> androidx.lifecycle.t:
    androidx.lifecycle.ViewModel create(java.lang.Class) -> a
androidx.lifecycle.ViewModelStore -> androidx.lifecycle.v:
    java.util.HashMap mMap -> a
    void clear() -> a
    androidx.lifecycle.ViewModel get(java.lang.String) -> a
    void put(java.lang.String,androidx.lifecycle.ViewModel) -> a
androidx.lifecycle.ViewModelStoreOwner -> androidx.lifecycle.w:
    androidx.lifecycle.ViewModelStore getViewModelStore() -> b
androidx.loader.app.LoaderManager -> b.k.a.a:
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner) -> a
    void markForRedelivery() -> a
androidx.loader.app.LoaderManagerImpl -> b.k.a.e:
    androidx.lifecycle.LifecycleOwner mLifecycleOwner -> a
    androidx.loader.app.LoaderManagerImpl$LoaderViewModel mLoaderViewModel -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void markForRedelivery() -> a
androidx.loader.app.LoaderManagerImpl$LoaderInfo -> b.k.a.b:
    androidx.lifecycle.LifecycleOwner mLifecycleOwner -> l
    int mId -> j
    android.os.Bundle mArgs -> k
    androidx.loader.content.Loader destroy(boolean) -> a
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void onActive() -> a
    void removeObserver(androidx.lifecycle.Observer) -> a
    void setValue(java.lang.Object) -> a
    void onInactive() -> b
    void markForRedelivery() -> c
androidx.loader.app.LoaderManagerImpl$LoaderViewModel -> b.k.a.d:
    androidx.collection.SparseArrayCompat mLoaders -> a
    androidx.lifecycle.ViewModelProvider$Factory FACTORY -> b
    1:1:void androidx.collection.SparseArrayCompat.<init>():0:0 -> <init>
    1:1:void <init>():0 -> <init>
    2:2:void <init>():0:0 -> <init>
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore) -> a
    void onCleared() -> a
    void markForRedelivery() -> b
androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1 -> b.k.a.c:
    androidx.lifecycle.ViewModel create(java.lang.Class) -> a
androidx.loader.content.Loader$OnLoadCompleteListener -> b.k.b.a:
androidx.vectordrawable.graphics.drawable.AndroidResources -> b.l.a.a.a:
    int[] STYLEABLE_ANIMATED_VECTOR_DRAWABLE_TARGET -> f
    int[] STYLEABLE_ANIMATOR -> g
    int[] STYLEABLE_ANIMATOR_SET -> h
    int[] STYLEABLE_PROPERTY_VALUES_HOLDER -> i
    int[] STYLEABLE_VECTOR_DRAWABLE_GROUP -> b
    int[] STYLEABLE_VECTOR_DRAWABLE_PATH -> c
    int[] STYLEABLE_VECTOR_DRAWABLE_CLIP_PATH -> d
    int[] STYLEABLE_ANIMATED_VECTOR_DRAWABLE -> e
    int[] STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY -> a
    int[] STYLEABLE_KEYFRAME -> j
    int[] STYLEABLE_PROPERTY_ANIMATOR -> k
    int[] STYLEABLE_PATH_INTERPOLATOR -> l
androidx.vectordrawable.graphics.drawable.Animatable2Compat -> b.l.a.a.b:
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat -> b.l.a.a.f:
    android.graphics.drawable.Drawable$Callback mCallback -> f
    android.animation.ArgbEvaluator mArgbEvaluator -> e
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState mAnimatedVectorState -> c
    android.content.Context mContext -> d
    1:1:void <init>(android.content.Context):0:0 -> a
    1:1:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> a
    2:2:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> a
    void setupColorAnimator(android.animation.Animator) -> a
    1:1:void androidx.core.graphics.drawable.DrawableCompat.applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme):0:0 -> applyTheme
    1:1:void applyTheme(android.content.res.Resources$Theme):0 -> applyTheme
    1:1:boolean androidx.core.graphics.drawable.DrawableCompat.canApplyTheme(android.graphics.drawable.Drawable):0:0 -> canApplyTheme
    1:1:boolean canApplyTheme():0 -> canApplyTheme
    1:1:int androidx.core.graphics.drawable.DrawableCompat.getAlpha(android.graphics.drawable.Drawable):0:0 -> getAlpha
    1:1:int getAlpha():0 -> getAlpha
    2:2:int getAlpha():0:0 -> getAlpha
    1:1:void androidx.core.graphics.drawable.DrawableCompat.inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    1:1:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    2:2:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    3:3:void setupAnimatorsForTarget(java.lang.String,android.animation.Animator):0:0 -> inflate
    3:3:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    4:4:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    5:5:void androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState.setupAnimatorSet():0:0 -> inflate
    5:5:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    1:1:void androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored(android.graphics.drawable.Drawable,boolean):0:0 -> setAutoMirrored
    1:1:void setAutoMirrored(boolean):0 -> setAutoMirrored
    2:2:void setAutoMirrored(boolean):0:0 -> setAutoMirrored
    1:1:void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.setFilterBitmap(boolean):0:0 -> setFilterBitmap
    1:1:void setFilterBitmap(boolean):0 -> setFilterBitmap
    1:1:void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.setHotspot(float,float):0:0 -> setHotspot
    1:1:void setHotspot(float,float):0 -> setHotspot
    1:1:void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.setHotspotBounds(int,int,int,int):0:0 -> setHotspotBounds
    1:1:void setHotspotBounds(int,int,int,int):0 -> setHotspotBounds
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$1 -> b.l.a.a.c:
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat this$0 -> b
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState -> b.l.a.a.d:
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat mVectorDrawable -> b
    android.animation.AnimatorSet mAnimatorSet -> c
    androidx.collection.ArrayMap mTargetNameMap -> e
    java.util.ArrayList mAnimators -> d
    int mChangingConfigurations -> a
    1:1:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> <init>
    1:1:void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.graphics.drawable.Drawable$Callback,android.content.res.Resources):0 -> <init>
    2:2:void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.graphics.drawable.Drawable$Callback,android.content.res.Resources):0:0 -> <init>
    3:3:void setupAnimatorSet():0:0 -> <init>
    3:3:void <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.graphics.drawable.Drawable$Callback,android.content.res.Resources):0 -> <init>
androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState -> b.l.a.a.e:
    android.graphics.drawable.Drawable$ConstantState mDelegateState -> a
androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat -> b.l.a.a.g:
    1:1:android.animation.ObjectAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser):0:0 -> a
    1:1:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    2:2:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0:0 -> a
    3:3:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0:0 -> a
    3:3:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    4:4:android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    4:4:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    4:4:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    5:5:int androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0:0 -> a
    5:5:android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0 -> a
    5:5:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    5:5:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    6:6:android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    6:6:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    6:6:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    7:7:android.animation.Keyframe androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser):0:0 -> a
    7:7:android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0 -> a
    7:7:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    7:7:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    8:8:android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    8:8:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    8:8:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    9:9:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.distributeKeyframes(android.animation.Keyframe[],float,int,int):0:0 -> a
    9:9:android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0 -> a
    9:9:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    9:9:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    10:10:android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int):0:0 -> a
    10:10:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0 -> a
    10:10:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    11:11:android.animation.PropertyValuesHolder[] androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet):0:0 -> a
    11:11:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0 -> a
    12:12:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float):0:0 -> a
    android.view.animation.Interpolator createInterpolatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser) -> a
    android.animation.Keyframe androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createNewKeyframe(android.animation.Keyframe,float) -> a
    android.animation.PropertyValuesHolder androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.getPVH(android.content.res.TypedArray,int,int,int,java.lang.String) -> a
    boolean androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.isColorType(int) -> a
    13:13:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float):0:0 -> a
    13:13:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int):0 -> a
    13:13:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,int):0 -> a
    14:14:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float):0:0 -> a
    14:14:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float):0 -> a
    14:14:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int):0 -> a
    14:14:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,int):0 -> a
    15:15:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float):0:0 -> a
    15:15:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int):0 -> a
    15:15:android.animation.Animator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,int):0 -> a
    16:16:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0:0 -> a
    16:16:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> a
    17:17:int androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.inferValueTypeFromValues(android.content.res.TypedArray,int,int):0:0 -> a
    17:17:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> a
    17:17:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> a
    18:18:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0:0 -> a
    18:18:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> a
    19:19:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser):0:0 -> a
    19:19:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> a
    19:19:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> a
    20:20:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String):0:0 -> a
    20:20:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser):0 -> a
    20:20:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> a
    20:20:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> a
    21:21:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser):0:0 -> a
    21:21:void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser):0 -> a
    21:21:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> a
    22:22:int androidx.core.content.res.TypedArrayUtils.getNamedResourceId(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,int):0:0 -> a
    22:22:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0 -> a
    23:23:android.animation.ValueAnimator androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser):0:0 -> a
    android.view.animation.Interpolator loadInterpolator(android.content.Context,int) -> b
androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator -> b.l.a.a.h:
    androidx.core.graphics.PathParser$PathDataNode[] mNodeArray -> a
    1:1:androidx.core.graphics.PathParser$PathDataNode[] evaluate(float,androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[]):0:0 -> evaluate
    1:1:java.lang.Object evaluate(float,java.lang.Object,java.lang.Object):0 -> evaluate
androidx.vectordrawable.graphics.drawable.ArgbEvaluator -> b.l.a.a.i:
    androidx.vectordrawable.graphics.drawable.ArgbEvaluator sInstance -> a
    androidx.vectordrawable.graphics.drawable.ArgbEvaluator getInstance() -> a
androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat -> b.l.a.a.j:
    float[] mX -> a
    float[] mY -> b
    1:1:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    1:1:void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    2:2:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    2:2:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    2:2:void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    3:3:void initQuad(float,float):0:0 -> <init>
    3:3:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0 -> <init>
    3:3:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    3:3:void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    4:4:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    4:4:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    4:4:void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    5:5:void initCubic(float,float,float,float):0:0 -> <init>
    5:5:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0 -> <init>
    5:5:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    5:5:void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    6:6:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    6:6:void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    7:7:void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> <init>
    7:7:void <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    7:7:void <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser):0 -> <init>
    void initPath(android.graphics.Path) -> a
androidx.vectordrawable.graphics.drawable.VectorDrawableCommon -> b.l.a.a.k:
    android.graphics.drawable.Drawable mDelegateDrawable -> b
    1:1:android.graphics.ColorFilter androidx.core.graphics.drawable.DrawableCompat.getColorFilter(android.graphics.drawable.Drawable):0:0 -> getColorFilter
    1:1:android.graphics.ColorFilter getColorFilter():0 -> getColorFilter
    1:1:void androidx.core.graphics.drawable.DrawableCompat.jumpToCurrentState(android.graphics.drawable.Drawable):0:0 -> jumpToCurrentState
    1:1:void jumpToCurrentState():0 -> jumpToCurrentState
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat -> b.l.a.a.u:
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState -> c
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> k
    android.graphics.PorterDuffColorFilter mTintFilter -> d
    android.graphics.ColorFilter mColorFilter -> e
    android.graphics.Matrix mTmpMatrix -> i
    float[] mTmpFloats -> h
    android.graphics.Rect mTmpBounds -> j
    boolean mMutated -> f
    boolean mAllowCaching -> g
    int applyAlpha(int,float) -> a
    1:1:android.graphics.drawable.Drawable androidx.core.content.res.ResourcesCompat.getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme):0:0 -> a
    1:1:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources,int,android.content.res.Resources$Theme):0 -> a
    2:2:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources,int,android.content.res.Resources$Theme):0:0 -> a
    3:3:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> a
    3:3:java.lang.Object getTargetByName(java.lang.String):0 -> a
    void setAllowCaching(boolean) -> a
    4:4:int[] getState():0:0 -> a
    4:4:android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode):0 -> a
    5:5:android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode):0:0 -> a
    1:1:void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.applyTheme(android.content.res.Resources$Theme):0:0 -> applyTheme
    1:1:void applyTheme(android.content.res.Resources$Theme):0 -> applyTheme
    1:1:boolean androidx.core.graphics.drawable.DrawableCompat.canApplyTheme(android.graphics.drawable.Drawable):0:0 -> canApplyTheme
    1:1:boolean canApplyTheme():0 -> canApplyTheme
    1:1:boolean needMirroring():0:0 -> draw
    1:1:void draw(android.graphics.Canvas):0 -> draw
    2:2:void draw(android.graphics.Canvas):0:0 -> draw
    1:1:int androidx.core.graphics.drawable.DrawableCompat.getAlpha(android.graphics.drawable.Drawable):0:0 -> getAlpha
    1:1:int getAlpha():0 -> getAlpha
    2:2:int getAlpha():0:0 -> getAlpha
    1:1:void androidx.core.graphics.drawable.DrawableCompat.inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    1:1:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    2:2:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    3:3:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    3:3:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    4:4:android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode):0:0 -> inflate
    4:4:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0 -> inflate
    4:4:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    5:5:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    5:5:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    6:6:boolean androidx.core.content.res.TypedArrayUtils.getNamedBoolean(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,java.lang.String,int,boolean):0:0 -> inflate
    6:6:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0 -> inflate
    6:6:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    7:7:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    7:7:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    8:8:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    9:9:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    9:9:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    10:10:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    11:11:void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0:0 -> inflate
    11:11:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    12:12:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> inflate
    12:12:void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme):0 -> inflate
    1:1:void androidx.core.graphics.drawable.DrawableCompat.setAutoMirrored(android.graphics.drawable.Drawable,boolean):0:0 -> setAutoMirrored
    1:1:void setAutoMirrored(boolean):0 -> setAutoMirrored
    2:2:void setAutoMirrored(boolean):0:0 -> setAutoMirrored
    1:1:void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.setFilterBitmap(boolean):0:0 -> setFilterBitmap
    1:1:void setFilterBitmap(boolean):0 -> setFilterBitmap
    1:1:void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.setHotspot(float,float):0:0 -> setHotspot
    1:1:void setHotspot(float,float):0 -> setHotspot
    1:1:void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.setHotspotBounds(int,int,int,int):0:0 -> setHotspotBounds
    1:1:void setHotspotBounds(int,int,int,int):0 -> setHotspotBounds
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1 -> b.l.a.a.l:
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath -> b.l.a.a.m:
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray):0:0 -> a
    1:1:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> a
    2:2:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0:0 -> a
    boolean isClipPath() -> b
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath -> b.l.a.a.n:
    float mTrimPathEnd -> l
    float mTrimPathStart -> k
    float mFillAlpha -> j
    android.graphics.Paint$Cap mStrokeLineCap -> n
    float mStrokeAlpha -> h
    float mStrokeWidth -> f
    int mFillRule -> i
    android.graphics.Paint$Join mStrokeLineJoin -> o
    int[] mThemeAttrs -> d
    androidx.core.content.res.ComplexColorCompat mFillColor -> g
    float mStrokeMiterlimit -> p
    androidx.core.content.res.ComplexColorCompat mStrokeColor -> e
    float mTrimPathOffset -> m
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0:0 -> a
    1:1:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> a
    2:2:android.graphics.Paint$Cap getStrokeLineCap(int,android.graphics.Paint$Cap):0:0 -> a
    2:2:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0 -> a
    2:2:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> a
    3:3:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0:0 -> a
    3:3:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> a
    4:4:android.graphics.Paint$Join getStrokeLineJoin(int,android.graphics.Paint$Join):0:0 -> a
    4:4:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0 -> a
    4:4:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> a
    5:5:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme):0:0 -> a
    5:5:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> a
    6:6:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0:0 -> a
    boolean isStateful() -> a
    boolean onStateChanged(int[]) -> a
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup -> b.l.a.a.o:
    android.graphics.Matrix mLocalMatrix -> j
    float mTranslateY -> i
    float mTranslateX -> h
    float mScaleY -> g
    int mChangingConfigurations -> k
    float mScaleX -> f
    java.lang.String mGroupName -> m
    float mPivotY -> e
    float mPivotX -> d
    float mRotate -> c
    java.util.ArrayList mChildren -> b
    android.graphics.Matrix mStackedMatrix -> a
    int[] mThemeAttrs -> l
    1:1:void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser):0:0 -> a
    1:1:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0 -> a
    2:2:void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser):0:0 -> a
    boolean isStateful() -> a
    boolean onStateChanged(int[]) -> a
    void updateLocalMatrix() -> b
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject -> b.l.a.a.p:
    1:1:void <init>():0:0 -> <init>
    1:1:void <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1):0 -> <init>
    boolean isStateful() -> a
    boolean onStateChanged(int[]) -> a
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath -> b.l.a.a.q:
    androidx.core.graphics.PathParser$PathDataNode[] mNodes -> a
    java.lang.String mPathName -> b
    int mChangingConfigurations -> c
    void toPath(android.graphics.Path) -> a
    boolean isClipPath() -> b
    1:1:void androidx.core.graphics.PathParser.updateNodes(androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[]):0:0 -> setPathData
    1:1:void setPathData(androidx.core.graphics.PathParser$PathDataNode[]):0 -> setPathData
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer -> b.l.a.a.r:
    android.graphics.Path mPath -> a
    float mViewportHeight -> l
    float mViewportWidth -> k
    float mBaseHeight -> j
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup mRootGroup -> h
    float mBaseWidth -> i
    int mRootAlpha -> m
    java.lang.Boolean mIsStateful -> o
    int mChangingConfigurations -> g
    java.lang.String mRootName -> n
    android.graphics.Matrix IDENTITY_MATRIX -> q
    android.graphics.Path mRenderPath -> b
    androidx.collection.ArrayMap mVGTargetsMap -> p
    android.graphics.PathMeasure mPathMeasure -> f
    android.graphics.Paint mFillPaint -> e
    android.graphics.Paint mStrokePaint -> d
    android.graphics.Matrix mFinalPathMatrix -> c
    void draw(android.graphics.Canvas,int,int,android.graphics.ColorFilter) -> a
    1:1:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    1:1:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    2:2:float getMatrixScale(android.graphics.Matrix):0:0 -> a
    2:2:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    2:2:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    3:3:void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    3:3:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0 -> a
    4:4:void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter):0:0 -> a
    boolean isStateful() -> a
    boolean onStateChanged(int[]) -> a
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState -> b.l.a.a.s:
    android.content.res.ColorStateList mTint -> c
    boolean mCachedAutoMirrored -> j
    android.graphics.PorterDuff$Mode mCachedTintMode -> h
    boolean mCacheDirty -> k
    int mCachedRootAlpha -> i
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer -> b
    boolean mAutoMirrored -> e
    android.graphics.Bitmap mCachedBitmap -> f
    android.content.res.ColorStateList mCachedTint -> g
    android.graphics.PorterDuff$Mode mTintMode -> d
    android.graphics.Paint mTempPaint -> l
    int mChangingConfigurations -> a
    boolean canReuseBitmap(int,int) -> a
    boolean canReuseCache() -> a
    void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect) -> a
    android.graphics.Paint getPaint(android.graphics.ColorFilter) -> a
    boolean onStateChanged(int[]) -> a
    void createCachedBitmapIfNeeded(int,int) -> b
    boolean hasTranslucentRoot() -> b
    boolean isStateful() -> c
    void updateCachedBitmap(int,int) -> c
    void updateCacheStates() -> d
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState -> b.l.a.a.t:
    android.graphics.drawable.Drawable$ConstantState mDelegateState -> a
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> b
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.a:
    1:1:androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel):0:0 -> createFromParcel
    1:1:java.lang.Object createFromParcel(android.os.Parcel):0 -> createFromParcel
    1:1:androidx.versionedparcelable.ParcelImpl[] newArray(int):0:0 -> newArray
    1:1:java.lang.Object[] newArray(int):0 -> newArray
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.b:
    androidx.collection.ArrayMap mParcelizerCache -> c
    androidx.collection.ArrayMap mReadCache -> a
    androidx.collection.ArrayMap mWriteCache -> b
    void closeField() -> a
    1:1:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> a
    1:1:java.lang.Class findParcelClass(java.lang.Class):0 -> a
    2:2:java.lang.Class findParcelClass(java.lang.Class):0:0 -> a
    boolean readBoolean(boolean,int) -> a
    byte[] readByteArray(byte[],int) -> a
    java.lang.CharSequence readCharSequence(java.lang.CharSequence,int) -> a
    boolean readField(int) -> a
    int readInt(int,int) -> a
    android.os.Parcelable readParcelable(android.os.Parcelable,int) -> a
    java.lang.String readString(java.lang.String,int) -> a
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> a
    void writeBoolean(boolean) -> a
    void writeByteArray(byte[]) -> a
    void writeCharSequence(java.lang.CharSequence) -> a
    void writeParcelable(android.os.Parcelable) -> a
    void writeString(java.lang.String) -> a
    3:3:void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable):0:0 -> a
    3:3:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0 -> a
    4:4:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0:0 -> a
    5:5:void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel):0:0 -> a
    5:5:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0 -> a
    6:6:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0:0 -> a
    7:7:void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel):0:0 -> a
    7:7:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0 -> a
    8:8:void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable):0:0 -> a
    8:8:void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable):0 -> a
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> b
    1:1:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> b
    1:1:java.lang.reflect.Method getReadMethod(java.lang.String):0 -> b
    2:2:java.lang.reflect.Method getReadMethod(java.lang.String):0:0 -> b
    3:3:java.lang.Object androidx.collection.SimpleArrayMap.get(java.lang.Object):0:0 -> b
    3:3:java.lang.reflect.Method getWriteMethod(java.lang.Class):0 -> b
    4:4:java.lang.reflect.Method getWriteMethod(java.lang.Class):0:0 -> b
    void setOutputField(int) -> b
    void writeBoolean(boolean,int) -> b
    void writeByteArray(byte[],int) -> b
    void writeCharSequence(java.lang.CharSequence,int) -> b
    void writeInt(int,int) -> b
    void writeParcelable(android.os.Parcelable,int) -> b
    void writeString(java.lang.String,int) -> b
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int) -> b
    boolean readBoolean() -> c
    void writeInt(int) -> c
    byte[] readByteArray() -> d
    java.lang.CharSequence readCharSequence() -> e
    int readInt() -> f
    android.os.Parcelable readParcelable() -> g
    java.lang.String readString() -> h
    1:1:androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel):0:0 -> i
    1:1:androidx.versionedparcelable.VersionedParcelable readVersionedParcelable():0 -> i
    void setSerializationFlags(boolean,boolean) -> j
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.c:
    android.util.SparseIntArray mPositionLookup -> d
    java.lang.String mPrefix -> h
    int mNextRead -> j
    android.os.Parcel mParcel -> e
    int mFieldId -> k
    int mCurrentField -> i
    int mOffset -> f
    int mEnd -> g
    void closeField() -> a
    boolean readField(int) -> a
    void writeBoolean(boolean) -> a
    void writeByteArray(byte[]) -> a
    void writeCharSequence(java.lang.CharSequence) -> a
    void writeParcelable(android.os.Parcelable) -> a
    void writeString(java.lang.String) -> a
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> b
    1:1:void writeInt(int):0:0 -> b
    1:1:void setOutputField(int):0 -> b
    boolean readBoolean() -> c
    void writeInt(int) -> c
    byte[] readByteArray() -> d
    java.lang.CharSequence readCharSequence() -> e
    int readInt() -> f
    android.os.Parcelable readParcelable() -> g
    java.lang.String readString() -> h
androidx.versionedparcelable.VersionedParcelable -> androidx.versionedparcelable.d:
com.android.tools.r8.GeneratedOutlineSupport -> c.a.a.a.a:
    java.lang.String outline0(java.lang.String,androidx.fragment.app.Fragment,java.lang.String) -> a
    java.lang.String outline1(org.xmlpull.v1.XmlPullParser,java.lang.StringBuilder,java.lang.String) -> a
    java.lang.StringBuilder outline2(java.lang.String) -> a
com.google.androidbrowserhelper.trusted.-$$Lambda$LauncherActivity$LZZem-OVKpJSpGjllWq0Ukdbzw4 -> com.google.androidbrowserhelper.trusted.a:
    com.google.androidbrowserhelper.trusted.LauncherActivity f$0 -> b
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$2_WgvxzfVC37jA8J_KJi3c4y8CE -> com.google.androidbrowserhelper.trusted.b:
    java.lang.Runnable f$3 -> e
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$2 -> d
    com.google.androidbrowserhelper.trusted.TwaLauncher f$0 -> b
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy f$1 -> c
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$8I-QaLd1-mY1X-hUnuTTCupEpIw -> com.google.androidbrowserhelper.trusted.c:
    java.lang.Runnable f$3 -> e
    com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy f$2 -> d
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$1 -> c
    com.google.androidbrowserhelper.trusted.TwaLauncher f$0 -> b
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$gs2l5Ay3A0KmZcKSf2KLU2Jn7NA -> com.google.androidbrowserhelper.trusted.d:
    com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$gs2l5Ay3A0KmZcKSf2KLU2Jn7NA INSTANCE -> a
    void launch(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> a
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$npRr6qK4zOAEydIRgB7pZTPJiUw -> com.google.androidbrowserhelper.trusted.e:
    java.lang.Runnable f$2 -> d
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$1 -> c
    com.google.androidbrowserhelper.trusted.TwaLauncher f$0 -> b
com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$yiLzsm37NbSon1-dZ2dCvDJv8wU -> com.google.androidbrowserhelper.trusted.f:
    com.google.androidbrowserhelper.trusted.-$$Lambda$TwaLauncher$yiLzsm37NbSon1-dZ2dCvDJv8wU INSTANCE -> a
    void launch(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> a
com.google.androidbrowserhelper.trusted.ChromeLegacyUtils -> com.google.androidbrowserhelper.trusted.g:
    java.util.List VERSION_CHECK_CHROME_PACKAGES -> b
    java.util.List SUPPORTED_CHROME_PACKAGES -> a
    java.util.List LOCAL_BUILD_PACKAGES -> c
    boolean checkChromeVersion(android.content.pm.PackageManager,java.lang.String,int) -> a
    int getVersionCode(android.content.pm.PackageManager,java.lang.String) -> a
    boolean usesWhiteNavbar(java.lang.String) -> a
    boolean supportsLaunchWithoutWarmup(android.content.pm.PackageManager,java.lang.String) -> b
    boolean supportsNavbarAndColorCustomization(android.content.pm.PackageManager,java.lang.String) -> c
    boolean supportsTrustedWebActivities(android.content.pm.PackageManager,java.lang.String) -> d
com.google.androidbrowserhelper.trusted.ChromeUpdatePrompt -> com.google.androidbrowserhelper.trusted.h:
    java.lang.String com.google.androidbrowserhelper.trusted.TwaProviderPicker.sPackageNameForTesting -> a
    void com.google.androidbrowserhelper.trusted.Utils.addSystemUiVisibilityFlag(android.app.Activity,int) -> a
    float com.google.androidbrowserhelper.trusted.Utils.luminanceOfColorComponent(float) -> a
    1:1:java.util.Map com.google.androidbrowserhelper.trusted.TwaProviderPicker.getLaunchModesForCustomTabsServices(android.content.pm.PackageManager):0:0 -> a
    1:1:com.google.androidbrowserhelper.trusted.TwaProviderPicker$Action com.google.androidbrowserhelper.trusted.TwaProviderPicker.pickProvider(android.content.pm.PackageManager):0 -> a
    2:2:com.google.androidbrowserhelper.trusted.TwaProviderPicker$Action com.google.androidbrowserhelper.trusted.TwaProviderPicker.pickProvider(android.content.pm.PackageManager):0:0 -> a
    boolean com.google.androidbrowserhelper.trusted.Utils.shouldUseDarkIconsOnBackground(int) -> a
    void com.google.androidbrowserhelper.trusted.Utils.setNavigationBarColor(android.app.Activity,int) -> b
    void com.google.androidbrowserhelper.trusted.Utils.setStatusBarColor(android.app.Activity,int) -> c
com.google.androidbrowserhelper.trusted.DelegationService -> com.google.androidbrowserhelper.trusted.DelegationService:
    androidx.browser.trusted.TokenStore getTokenStore() -> a
com.google.androidbrowserhelper.trusted.FocusActivity -> com.google.androidbrowserhelper.trusted.FocusActivity:
    java.lang.Boolean mActivityExistsCached -> p
    void addToIntent(android.content.Intent,android.content.Context) -> a
com.google.androidbrowserhelper.trusted.LauncherActivity -> com.google.androidbrowserhelper.trusted.LauncherActivity:
    com.google.androidbrowserhelper.trusted.LauncherActivityMetadata mMetadata -> p
    com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy mSplashScreenStrategy -> r
    boolean mBrowserWasLaunched -> q
    com.google.androidbrowserhelper.trusted.TwaLauncher mTwaLauncher -> s
    boolean sChromeVersionChecked -> t
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy getFallbackStrategy() -> n
    android.net.Uri getLaunchingUrl() -> o
    1:1:boolean restartInNewTask():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    3:3:boolean splashScreenNeeded():0:0 -> onCreate
    3:3:void onCreate(android.os.Bundle):0 -> onCreate
    4:4:void onCreate(android.os.Bundle):0:0 -> onCreate
    5:5:int getColorCompat(int):0:0 -> onCreate
    5:5:void onCreate(android.os.Bundle):0 -> onCreate
    6:6:void onCreate(android.os.Bundle):0:0 -> onCreate
    7:7:int getColorCompat(int):0:0 -> onCreate
    7:7:void onCreate(android.os.Bundle):0 -> onCreate
    8:8:void onCreate(android.os.Bundle):0:0 -> onCreate
    9:9:int getColorCompat(int):0:0 -> onCreate
    9:9:void onCreate(android.os.Bundle):0 -> onCreate
    10:10:void onCreate(android.os.Bundle):0:0 -> onCreate
    11:11:int getColorCompat(int):0:0 -> onCreate
    11:11:void onCreate(android.os.Bundle):0 -> onCreate
    12:12:void onCreate(android.os.Bundle):0:0 -> onCreate
    13:13:int getColorCompat(int):0:0 -> onCreate
    13:13:void onCreate(android.os.Bundle):0 -> onCreate
    14:14:void onCreate(android.os.Bundle):0:0 -> onCreate
    15:15:void com.google.androidbrowserhelper.trusted.ChromeUpdatePrompt.promptIfNeeded(android.content.Context,java.lang.String):0:0 -> onCreate
    15:15:void onCreate(android.os.Bundle):0 -> onCreate
    16:16:boolean com.google.androidbrowserhelper.trusted.ChromeUpdatePrompt.chromeNeedsUpdate(android.content.pm.PackageManager,java.lang.String):0:0 -> onCreate
    16:16:void com.google.androidbrowserhelper.trusted.ChromeUpdatePrompt.promptIfNeeded(android.content.Context,java.lang.String):0 -> onCreate
    16:16:void onCreate(android.os.Bundle):0 -> onCreate
    17:17:void com.google.androidbrowserhelper.trusted.ChromeUpdatePrompt.showToastIfResourceExists(android.content.Context,java.lang.String):0:0 -> onCreate
    17:17:void com.google.androidbrowserhelper.trusted.ChromeUpdatePrompt.promptIfNeeded(android.content.Context,java.lang.String):0 -> onCreate
    17:17:void onCreate(android.os.Bundle):0 -> onCreate
    18:18:void onCreate(android.os.Bundle):0:0 -> onCreate
    android.widget.ImageView$ScaleType getSplashImageScaleType() -> p
    android.graphics.Matrix getSplashImageTransformationMatrix() -> q
    void lambda$onCreate$0() -> r
com.google.androidbrowserhelper.trusted.LauncherActivityMetadata -> com.google.androidbrowserhelper.trusted.i:
    java.lang.String fileProviderAuthority -> h
    java.lang.String fallbackStrategyType -> k
    int splashScreenFadeOutDurationMillis -> i
    int splashImageDrawableId -> f
    java.util.List additionalTrustedOrigins -> j
    int splashScreenBackgroundColorId -> g
    java.lang.String defaultUrl -> a
    int navigationBarColorId -> d
    int navigationBarColorDarkId -> e
    int statusBarColorId -> b
    int statusBarColorDarkId -> c
    com.google.androidbrowserhelper.trusted.LauncherActivityMetadata parse(android.content.Context) -> a
com.google.androidbrowserhelper.trusted.SharedPreferencesTokenStore -> com.google.androidbrowserhelper.trusted.j:
    android.content.Context mContext -> a
    androidx.browser.trusted.Token load() -> a
    1:1:void store(androidx.browser.trusted.Token):0:0 -> a
    1:1:void setVerifiedProvider(java.lang.String,android.content.pm.PackageManager):0 -> a
com.google.androidbrowserhelper.trusted.TwaLauncher -> com.google.androidbrowserhelper.trusted.n:
    android.content.Context mContext -> a
    androidx.browser.customtabs.CustomTabsSession mSession -> f
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy WEBVIEW_FALLBACK_STRATEGY -> j
    com.google.androidbrowserhelper.trusted.TwaLauncher$TwaCustomTabsServiceConnection mServiceConnection -> e
    com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy CCT_FALLBACK_STRATEGY -> i
    int mSessionId -> d
    com.google.androidbrowserhelper.trusted.SharedPreferencesTokenStore mTokenStore -> g
    boolean mDestroyed -> h
    java.lang.String mProviderPackage -> b
    int mLaunchMode -> c
    1:1:void <init>(android.content.Context,java.lang.String):0:0 -> <init>
    1:1:void <init>(android.content.Context):0 -> <init>
    2:2:void <init>(android.content.Context,java.lang.String,int,com.google.androidbrowserhelper.trusted.SharedPreferencesTokenStore):0:0 -> <init>
    2:2:void <init>(android.content.Context,java.lang.String):0 -> <init>
    2:2:void <init>(android.content.Context):0 -> <init>
    android.content.Context access$200(com.google.androidbrowserhelper.trusted.TwaLauncher) -> a
    androidx.browser.customtabs.CustomTabsSession access$402(com.google.androidbrowserhelper.trusted.TwaLauncher,androidx.browser.customtabs.CustomTabsSession) -> a
    void destroy() -> a
    1:1:void launchWhenSessionEstablished(androidx.browser.trusted.TrustedWebActivityIntentBuilder,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable):0:0 -> a
    1:1:void lambda$launchTwa$2(androidx.browser.trusted.TrustedWebActivityIntentBuilder,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable):0 -> a
    void lambda$launchTwa$3(com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable) -> a
    void lambda$launchWhenSessionEstablished$4(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable) -> a
    2:2:void androidx.browser.customtabs.CustomTabsIntent.launchUrl(android.content.Context,android.net.Uri):0:0 -> a
    2:2:void lambda$static$0(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable):0 -> a
    3:3:void lambda$static$0(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable):0:0 -> a
    4:4:void launchTwa(androidx.browser.trusted.TrustedWebActivityIntentBuilder,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable,com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy):0:0 -> a
    4:4:void launch(androidx.browser.trusted.TrustedWebActivityIntentBuilder,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable,com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy):0 -> a
    5:5:void launch(androidx.browser.trusted.TrustedWebActivityIntentBuilder,com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy,java.lang.Runnable,com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy):0:0 -> a
    java.lang.String access$300(com.google.androidbrowserhelper.trusted.TwaLauncher) -> b
    java.lang.String getProviderPackage() -> b
    void lambda$static$1(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> b
    void launchWhenSplashScreenReady(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable) -> b
    androidx.browser.customtabs.CustomTabsSession access$400(com.google.androidbrowserhelper.trusted.TwaLauncher) -> c
    int access$500(com.google.androidbrowserhelper.trusted.TwaLauncher) -> d
com.google.androidbrowserhelper.trusted.TwaLauncher$1 -> com.google.androidbrowserhelper.trusted.k:
com.google.androidbrowserhelper.trusted.TwaLauncher$FallbackStrategy -> com.google.androidbrowserhelper.trusted.l:
    void launch(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.String,java.lang.Runnable) -> a
com.google.androidbrowserhelper.trusted.TwaLauncher$TwaCustomTabsServiceConnection -> com.google.androidbrowserhelper.trusted.m:
    java.lang.Runnable mOnSessionCreationFailedRunnable -> c
    java.lang.Runnable mOnSessionCreatedRunnable -> b
    com.google.androidbrowserhelper.trusted.TwaLauncher this$0 -> d
    1:1:void <init>(com.google.androidbrowserhelper.trusted.TwaLauncher):0:0 -> <init>
    1:1:void <init>(com.google.androidbrowserhelper.trusted.TwaLauncher,com.google.androidbrowserhelper.trusted.TwaLauncher$1):0 -> <init>
    1:1:void setSessionCreationRunnables(java.lang.Runnable,java.lang.Runnable):0:0 -> a
    1:1:void access$100(com.google.androidbrowserhelper.trusted.TwaLauncher$TwaCustomTabsServiceConnection,java.lang.Runnable,java.lang.Runnable):0 -> a
    void onCustomTabsServiceConnected(android.content.ComponentName,androidx.browser.customtabs.CustomTabsClient) -> a
com.google.androidbrowserhelper.trusted.TwaProviderPicker$Action -> com.google.androidbrowserhelper.trusted.o:
    java.lang.String provider -> b
    int launchMode -> a
com.google.androidbrowserhelper.trusted.TwaSharedPreferencesManager -> com.google.androidbrowserhelper.trusted.p:
    android.content.SharedPreferences mSharedPreferences -> a
    void writeLastLaunchedProviderPackageName(java.lang.String) -> a
com.google.androidbrowserhelper.trusted.WebViewFallbackActivity -> com.google.androidbrowserhelper.trusted.WebViewFallbackActivity:
    java.util.List mExtraOrigins -> s
    android.net.Uri mLaunchUrl -> p
    android.webkit.WebView mWebView -> r
    java.lang.String TAG -> t
    int mStatusBarColor -> q
    android.webkit.WebView access$000(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> a
    android.webkit.WebView access$002(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity,android.webkit.WebView) -> a
    1:1:void setupWebSettings(android.webkit.WebSettings):0:0 -> a
    1:1:void access$100(android.webkit.WebSettings):0 -> a
    android.content.Intent createLaunchIntent(android.content.Context,android.net.Uri,com.google.androidbrowserhelper.trusted.LauncherActivityMetadata) -> a
    android.net.Uri access$200(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> b
    int access$300(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> c
    java.util.List access$400(com.google.androidbrowserhelper.trusted.WebViewFallbackActivity) -> d
    1:1:android.webkit.WebViewClient createWebViewClient():0:0 -> onCreate
    1:1:void onCreate(android.os.Bundle):0 -> onCreate
    2:2:void onCreate(android.os.Bundle):0:0 -> onCreate
    3:3:void setupWebSettings(android.webkit.WebSettings):0:0 -> onCreate
    3:3:void onCreate(android.os.Bundle):0 -> onCreate
    4:4:void onCreate(android.os.Bundle):0:0 -> onCreate
com.google.androidbrowserhelper.trusted.WebViewFallbackActivity$1 -> com.google.androidbrowserhelper.trusted.q:
    com.google.androidbrowserhelper.trusted.WebViewFallbackActivity this$0 -> a
    1:1:boolean matchExtraOrigins(android.net.Uri):0:0 -> a
    1:1:boolean shouldOverrideUrlLoading(android.net.Uri):0 -> a
    2:2:boolean shouldOverrideUrlLoading(android.net.Uri):0:0 -> a
    3:3:void androidx.browser.customtabs.CustomTabsIntent.launchUrl(android.content.Context,android.net.Uri):0:0 -> a
    3:3:boolean shouldOverrideUrlLoading(android.net.Uri):0 -> a
    boolean uriOriginsMatch(android.net.Uri,android.net.Uri) -> a
com.google.androidbrowserhelper.trusted.splashscreens.-$$Lambda$PwaWrapperSplashScreenStrategy$jhTvWgJ8R6krB2fU0teia2GQ7WA -> com.google.androidbrowserhelper.trusted.r.a:
    java.lang.Runnable f$1 -> c
    com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy f$0 -> b
com.google.androidbrowserhelper.trusted.splashscreens.-$$Lambda$PwaWrapperSplashScreenStrategy$w9o5iqMEy62ZZ2i_sMAmRiQ7IGw -> com.google.androidbrowserhelper.trusted.r.b:
    java.lang.Runnable f$2 -> c
    com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy f$0 -> a
    androidx.browser.trusted.TrustedWebActivityIntentBuilder f$1 -> b
    void onFinished(boolean) -> a
com.google.androidbrowserhelper.trusted.splashscreens.PwaWrapperSplashScreenStrategy -> com.google.androidbrowserhelper.trusted.r.c:
    java.lang.String mFileProviderAuthority -> f
    android.widget.ImageView$ScaleType mScaleType -> d
    java.lang.String mProviderPackage -> j
    boolean mProviderSupportsSplashScreens -> k
    boolean mEnterAnimationComplete -> l
    com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor sSystemBarColorPredictor -> n
    int mFadeOutDurationMillis -> g
    int mDrawableId -> b
    int mBackgroundColor -> c
    android.graphics.Bitmap mSplashImage -> h
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask mSplashImageTransferTask -> i
    java.lang.Runnable mOnEnterAnimationCompleteRunnable -> m
    android.graphics.Matrix mTransformationMatrix -> e
    android.app.Activity mActivity -> a
    void configureTwaBuilder(androidx.browser.trusted.TrustedWebActivityIntentBuilder,androidx.browser.customtabs.CustomTabsSession,java.lang.Runnable) -> a
    void destroy() -> a
    1:1:void onSplashImageTransferred(androidx.browser.trusted.TrustedWebActivityIntentBuilder,boolean,java.lang.Runnable):0:0 -> a
    1:1:void lambda$configureTwaBuilder$0(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable,boolean):0 -> a
    2:2:android.os.Bundle makeSplashScreenParamsBundle():0:0 -> a
    2:2:void onSplashImageTransferred(androidx.browser.trusted.TrustedWebActivityIntentBuilder,boolean,java.lang.Runnable):0 -> a
    2:2:void lambda$configureTwaBuilder$0(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable,boolean):0 -> a
    3:3:void onSplashImageTransferred(androidx.browser.trusted.TrustedWebActivityIntentBuilder,boolean,java.lang.Runnable):0:0 -> a
    3:3:void lambda$configureTwaBuilder$0(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable,boolean):0 -> a
    4:4:void runWhenEnterAnimationComplete(java.lang.Runnable):0:0 -> a
    4:4:void onSplashImageTransferred(androidx.browser.trusted.TrustedWebActivityIntentBuilder,boolean,java.lang.Runnable):0 -> a
    4:4:void lambda$configureTwaBuilder$0(androidx.browser.trusted.TrustedWebActivityIntentBuilder,java.lang.Runnable,boolean):0 -> a
    void lambda$onSplashImageTransferred$1(java.lang.Runnable) -> a
    5:5:boolean androidx.browser.customtabs.TrustedWebUtils.areSplashScreensSupported(android.content.Context,java.lang.String,java.lang.String):0:0 -> a
    5:5:void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> a
    6:6:void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0:0 -> a
    7:7:void showSplashScreen():0:0 -> a
    7:7:void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> a
    8:8:android.graphics.Bitmap com.google.androidbrowserhelper.trusted.Utils.convertDrawableToBitmap(android.content.Context,int):0:0 -> a
    8:8:void showSplashScreen():0 -> a
    8:8:void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> a
    9:9:void showSplashScreen():0:0 -> a
    9:9:void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> a
    10:10:void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0:0 -> a
    11:11:void customizeStatusAndNavBarDuringSplashScreen(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0:0 -> a
    11:11:void onTwaLaunchInitiated(java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> a
    void onActivityEnterAnimationComplete() -> b
com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask -> com.google.androidbrowserhelper.trusted.r.f:
    android.content.Context mContext -> a
    androidx.browser.customtabs.CustomTabsSession mSession -> d
    android.graphics.Bitmap mBitmap -> b
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback mCallback -> f
    java.lang.String mAuthority -> c
    android.os.AsyncTask mAsyncTask -> g
    java.lang.String mProviderPackage -> e
    android.content.Context access$000(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> a
    void cancel() -> a
    void execute(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback) -> a
    android.graphics.Bitmap access$100(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> b
    java.lang.String access$200(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> c
    java.lang.String access$300(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> d
    androidx.browser.customtabs.CustomTabsSession access$400(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> e
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback access$500(com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask) -> f
com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$1 -> com.google.androidbrowserhelper.trusted.r.d:
    com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask this$0 -> a
    1:1:boolean androidx.browser.customtabs.TrustedWebUtils.transferSplashImage(android.content.Context,java.io.File,java.lang.String,java.lang.String,androidx.browser.customtabs.CustomTabsSession):0:0 -> a
    1:1:boolean transferToCustomTabsProvider(java.io.File):0 -> a
    1:1:java.lang.Boolean doInBackground(java.lang.Void[]):0:0 -> doInBackground
    1:1:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    2:2:long getLastAppUpdateTime():0:0 -> doInBackground
    2:2:java.lang.Boolean doInBackground(java.lang.Void[]):0 -> doInBackground
    2:2:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    3:3:java.lang.Boolean doInBackground(java.lang.Void[]):0:0 -> doInBackground
    3:3:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    4:4:long getLastAppUpdateTime():0:0 -> doInBackground
    4:4:java.lang.Boolean doInBackground(java.lang.Void[]):0 -> doInBackground
    4:4:java.lang.Object doInBackground(java.lang.Object[]):0 -> doInBackground
    1:1:void onPostExecute(java.lang.Boolean):0:0 -> onPostExecute
    1:1:void onPostExecute(java.lang.Object):0 -> onPostExecute
com.google.androidbrowserhelper.trusted.splashscreens.SplashImageTransferTask$Callback -> com.google.androidbrowserhelper.trusted.r.e:
    void onFinished(boolean) -> a
com.google.androidbrowserhelper.trusted.splashscreens.SplashScreenStrategy -> com.google.androidbrowserhelper.trusted.r.g:
com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor -> com.google.androidbrowserhelper.trusted.r.j:
    java.util.Map mSupportedFeaturesCache -> a
    int getExpectedColorScheme(android.content.Context,androidx.browser.trusted.TrustedWebActivityIntentBuilder) -> a
    1:1:boolean providerSupportsNavBarColorCustomization(android.content.Context,java.lang.String):0:0 -> a
    1:1:java.lang.Integer getExpectedNavbarColor(android.content.Context,java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> a
    2:2:boolean providerSupportsColorSchemeParams(android.content.Context,java.lang.String):0:0 -> a
    2:2:java.lang.Integer getExpectedNavbarColor(android.content.Context,java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> a
    3:3:java.lang.Integer getExpectedNavbarColor(android.content.Context,java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0:0 -> a
    4:4:boolean hasCategory(android.content.pm.ResolveInfo,java.lang.String):0:0 -> a
    4:4:com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$SupportedFeatures getSupportedFeatures(android.content.Context,java.lang.String):0 -> a
    5:5:com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$SupportedFeatures getSupportedFeatures(android.content.Context,java.lang.String):0:0 -> a
    1:1:boolean providerSupportsColorSchemeParams(android.content.Context,java.lang.String):0:0 -> b
    1:1:java.lang.Integer getExpectedStatusBarColor(android.content.Context,java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0 -> b
    2:2:java.lang.Integer getExpectedStatusBarColor(android.content.Context,java.lang.String,androidx.browser.trusted.TrustedWebActivityIntentBuilder):0:0 -> b
com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$1 -> com.google.androidbrowserhelper.trusted.r.h:
com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$SupportedFeatures -> com.google.androidbrowserhelper.trusted.r.i:
    boolean navbarColorCustomization -> a
    boolean colorSchemeCustomization -> b
    1:1:void <init>(boolean,boolean):0:0 -> <init>
    1:1:void <init>(boolean,boolean,com.google.androidbrowserhelper.trusted.splashscreens.SystemBarColorPredictor$1):0 -> <init>
